// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BICgRPC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BICgRPC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BICgRPC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BICgRPC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BICgRPC_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BICgRPC_2eproto;
namespace BICgRPC {
class Bridge;
class BridgeDefaultTypeInternal;
extern BridgeDefaultTypeInternal _Bridge_default_instance_;
class ConnectBridgeRequest;
class ConnectBridgeRequestDefaultTypeInternal;
extern ConnectBridgeRequestDefaultTypeInternal _ConnectBridgeRequest_default_instance_;
class ConnectBridgeResponse;
class ConnectBridgeResponseDefaultTypeInternal;
extern ConnectBridgeResponseDefaultTypeInternal _ConnectBridgeResponse_default_instance_;
class ConnectDeviceRequest;
class ConnectDeviceRequestDefaultTypeInternal;
extern ConnectDeviceRequestDefaultTypeInternal _ConnectDeviceRequest_default_instance_;
class ConnectionUpdate;
class ConnectionUpdateDefaultTypeInternal;
extern ConnectionUpdateDefaultTypeInternal _ConnectionUpdate_default_instance_;
class DescribeBridgeRequest;
class DescribeBridgeRequestDefaultTypeInternal;
extern DescribeBridgeRequestDefaultTypeInternal _DescribeBridgeRequest_default_instance_;
class DescribeBridgeResponse;
class DescribeBridgeResponseDefaultTypeInternal;
extern DescribeBridgeResponseDefaultTypeInternal _DescribeBridgeResponse_default_instance_;
class DisconnectBridgeRequest;
class DisconnectBridgeRequestDefaultTypeInternal;
extern DisconnectBridgeRequestDefaultTypeInternal _DisconnectBridgeRequest_default_instance_;
class ErrorUpdate;
class ErrorUpdateDefaultTypeInternal;
extern ErrorUpdateDefaultTypeInternal _ErrorUpdate_default_instance_;
class HumidityUpdate;
class HumidityUpdateDefaultTypeInternal;
extern HumidityUpdateDefaultTypeInternal _HumidityUpdate_default_instance_;
class NeuralSample;
class NeuralSampleDefaultTypeInternal;
extern NeuralSampleDefaultTypeInternal _NeuralSample_default_instance_;
class NeuralUpdate;
class NeuralUpdateDefaultTypeInternal;
extern NeuralUpdateDefaultTypeInternal _NeuralUpdate_default_instance_;
class PowerUpdate;
class PowerUpdateDefaultTypeInternal;
extern PowerUpdateDefaultTypeInternal _PowerUpdate_default_instance_;
class QueryBridgesRequest;
class QueryBridgesRequestDefaultTypeInternal;
extern QueryBridgesRequestDefaultTypeInternal _QueryBridgesRequest_default_instance_;
class QueryBridgesResponse;
class QueryBridgesResponseDefaultTypeInternal;
extern QueryBridgesResponseDefaultTypeInternal _QueryBridgesResponse_default_instance_;
class ScanDevicesReply;
class ScanDevicesReplyDefaultTypeInternal;
extern ScanDevicesReplyDefaultTypeInternal _ScanDevicesReply_default_instance_;
class ScanDevicesRequest;
class ScanDevicesRequestDefaultTypeInternal;
extern ScanDevicesRequestDefaultTypeInternal _ScanDevicesRequest_default_instance_;
class StimulationAtom;
class StimulationAtomDefaultTypeInternal;
extern StimulationAtomDefaultTypeInternal _StimulationAtom_default_instance_;
class StimulationFunctionDefinition;
class StimulationFunctionDefinitionDefaultTypeInternal;
extern StimulationFunctionDefinitionDefaultTypeInternal _StimulationFunctionDefinition_default_instance_;
class TemperatureUpdate;
class TemperatureUpdateDefaultTypeInternal;
extern TemperatureUpdateDefaultTypeInternal _TemperatureUpdate_default_instance_;
class bicGetHumidityReply;
class bicGetHumidityReplyDefaultTypeInternal;
extern bicGetHumidityReplyDefaultTypeInternal _bicGetHumidityReply_default_instance_;
class bicGetImpedanceReply;
class bicGetImpedanceReplyDefaultTypeInternal;
extern bicGetImpedanceReplyDefaultTypeInternal _bicGetImpedanceReply_default_instance_;
class bicGetImpedanceRequest;
class bicGetImpedanceRequestDefaultTypeInternal;
extern bicGetImpedanceRequestDefaultTypeInternal _bicGetImpedanceRequest_default_instance_;
class bicGetImplantInfoReply;
class bicGetImplantInfoReplyDefaultTypeInternal;
extern bicGetImplantInfoReplyDefaultTypeInternal _bicGetImplantInfoReply_default_instance_;
class bicGetImplantInfoReply_bicChannelInfo;
class bicGetImplantInfoReply_bicChannelInfoDefaultTypeInternal;
extern bicGetImplantInfoReply_bicChannelInfoDefaultTypeInternal _bicGetImplantInfoReply_bicChannelInfo_default_instance_;
class bicGetImplantInfoRequest;
class bicGetImplantInfoRequestDefaultTypeInternal;
extern bicGetImplantInfoRequestDefaultTypeInternal _bicGetImplantInfoRequest_default_instance_;
class bicGetTemperatureReply;
class bicGetTemperatureReplyDefaultTypeInternal;
extern bicGetTemperatureReplyDefaultTypeInternal _bicGetTemperatureReply_default_instance_;
class bicSetImplantPowerRequest;
class bicSetImplantPowerRequestDefaultTypeInternal;
extern bicSetImplantPowerRequestDefaultTypeInternal _bicSetImplantPowerRequest_default_instance_;
class bicSetSensingEnableRequest;
class bicSetSensingEnableRequestDefaultTypeInternal;
extern bicSetSensingEnableRequestDefaultTypeInternal _bicSetSensingEnableRequest_default_instance_;
class bicSetStreamEnable;
class bicSetStreamEnableDefaultTypeInternal;
extern bicSetStreamEnableDefaultTypeInternal _bicSetStreamEnable_default_instance_;
class bicStartStimulationRequest;
class bicStartStimulationRequestDefaultTypeInternal;
extern bicStartStimulationRequestDefaultTypeInternal _bicStartStimulationRequest_default_instance_;
class bicStimulationFunctionDefinitionRequest;
class bicStimulationFunctionDefinitionRequestDefaultTypeInternal;
extern bicStimulationFunctionDefinitionRequestDefaultTypeInternal _bicStimulationFunctionDefinitionRequest_default_instance_;
class bicSuccessReply;
class bicSuccessReplyDefaultTypeInternal;
extern bicSuccessReplyDefaultTypeInternal _bicSuccessReply_default_instance_;
}  // namespace BICgRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::BICgRPC::Bridge* Arena::CreateMaybeMessage<::BICgRPC::Bridge>(Arena*);
template<> ::BICgRPC::ConnectBridgeRequest* Arena::CreateMaybeMessage<::BICgRPC::ConnectBridgeRequest>(Arena*);
template<> ::BICgRPC::ConnectBridgeResponse* Arena::CreateMaybeMessage<::BICgRPC::ConnectBridgeResponse>(Arena*);
template<> ::BICgRPC::ConnectDeviceRequest* Arena::CreateMaybeMessage<::BICgRPC::ConnectDeviceRequest>(Arena*);
template<> ::BICgRPC::ConnectionUpdate* Arena::CreateMaybeMessage<::BICgRPC::ConnectionUpdate>(Arena*);
template<> ::BICgRPC::DescribeBridgeRequest* Arena::CreateMaybeMessage<::BICgRPC::DescribeBridgeRequest>(Arena*);
template<> ::BICgRPC::DescribeBridgeResponse* Arena::CreateMaybeMessage<::BICgRPC::DescribeBridgeResponse>(Arena*);
template<> ::BICgRPC::DisconnectBridgeRequest* Arena::CreateMaybeMessage<::BICgRPC::DisconnectBridgeRequest>(Arena*);
template<> ::BICgRPC::ErrorUpdate* Arena::CreateMaybeMessage<::BICgRPC::ErrorUpdate>(Arena*);
template<> ::BICgRPC::HumidityUpdate* Arena::CreateMaybeMessage<::BICgRPC::HumidityUpdate>(Arena*);
template<> ::BICgRPC::NeuralSample* Arena::CreateMaybeMessage<::BICgRPC::NeuralSample>(Arena*);
template<> ::BICgRPC::NeuralUpdate* Arena::CreateMaybeMessage<::BICgRPC::NeuralUpdate>(Arena*);
template<> ::BICgRPC::PowerUpdate* Arena::CreateMaybeMessage<::BICgRPC::PowerUpdate>(Arena*);
template<> ::BICgRPC::QueryBridgesRequest* Arena::CreateMaybeMessage<::BICgRPC::QueryBridgesRequest>(Arena*);
template<> ::BICgRPC::QueryBridgesResponse* Arena::CreateMaybeMessage<::BICgRPC::QueryBridgesResponse>(Arena*);
template<> ::BICgRPC::ScanDevicesReply* Arena::CreateMaybeMessage<::BICgRPC::ScanDevicesReply>(Arena*);
template<> ::BICgRPC::ScanDevicesRequest* Arena::CreateMaybeMessage<::BICgRPC::ScanDevicesRequest>(Arena*);
template<> ::BICgRPC::StimulationAtom* Arena::CreateMaybeMessage<::BICgRPC::StimulationAtom>(Arena*);
template<> ::BICgRPC::StimulationFunctionDefinition* Arena::CreateMaybeMessage<::BICgRPC::StimulationFunctionDefinition>(Arena*);
template<> ::BICgRPC::TemperatureUpdate* Arena::CreateMaybeMessage<::BICgRPC::TemperatureUpdate>(Arena*);
template<> ::BICgRPC::bicGetHumidityReply* Arena::CreateMaybeMessage<::BICgRPC::bicGetHumidityReply>(Arena*);
template<> ::BICgRPC::bicGetImpedanceReply* Arena::CreateMaybeMessage<::BICgRPC::bicGetImpedanceReply>(Arena*);
template<> ::BICgRPC::bicGetImpedanceRequest* Arena::CreateMaybeMessage<::BICgRPC::bicGetImpedanceRequest>(Arena*);
template<> ::BICgRPC::bicGetImplantInfoReply* Arena::CreateMaybeMessage<::BICgRPC::bicGetImplantInfoReply>(Arena*);
template<> ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo* Arena::CreateMaybeMessage<::BICgRPC::bicGetImplantInfoReply_bicChannelInfo>(Arena*);
template<> ::BICgRPC::bicGetImplantInfoRequest* Arena::CreateMaybeMessage<::BICgRPC::bicGetImplantInfoRequest>(Arena*);
template<> ::BICgRPC::bicGetTemperatureReply* Arena::CreateMaybeMessage<::BICgRPC::bicGetTemperatureReply>(Arena*);
template<> ::BICgRPC::bicSetImplantPowerRequest* Arena::CreateMaybeMessage<::BICgRPC::bicSetImplantPowerRequest>(Arena*);
template<> ::BICgRPC::bicSetSensingEnableRequest* Arena::CreateMaybeMessage<::BICgRPC::bicSetSensingEnableRequest>(Arena*);
template<> ::BICgRPC::bicSetStreamEnable* Arena::CreateMaybeMessage<::BICgRPC::bicSetStreamEnable>(Arena*);
template<> ::BICgRPC::bicStartStimulationRequest* Arena::CreateMaybeMessage<::BICgRPC::bicStartStimulationRequest>(Arena*);
template<> ::BICgRPC::bicStimulationFunctionDefinitionRequest* Arena::CreateMaybeMessage<::BICgRPC::bicStimulationFunctionDefinitionRequest>(Arena*);
template<> ::BICgRPC::bicSuccessReply* Arena::CreateMaybeMessage<::BICgRPC::bicSuccessReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BICgRPC {

enum bicGetImplantInfoReply_bicChannelInfo_UnitType : int {
  bicGetImplantInfoReply_bicChannelInfo_UnitType_UT_NO_UNIT = 0,
  bicGetImplantInfoReply_bicChannelInfo_UnitType_UT_CURRENT = 1,
  bicGetImplantInfoReply_bicChannelInfo_UnitType_UT_VOLTAGE = 2,
  bicGetImplantInfoReply_bicChannelInfo_UnitType_UT_COUNT = 3,
  bicGetImplantInfoReply_bicChannelInfo_UnitType_bicGetImplantInfoReply_bicChannelInfo_UnitType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  bicGetImplantInfoReply_bicChannelInfo_UnitType_bicGetImplantInfoReply_bicChannelInfo_UnitType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool bicGetImplantInfoReply_bicChannelInfo_UnitType_IsValid(int value);
constexpr bicGetImplantInfoReply_bicChannelInfo_UnitType bicGetImplantInfoReply_bicChannelInfo_UnitType_UnitType_MIN = bicGetImplantInfoReply_bicChannelInfo_UnitType_UT_NO_UNIT;
constexpr bicGetImplantInfoReply_bicChannelInfo_UnitType bicGetImplantInfoReply_bicChannelInfo_UnitType_UnitType_MAX = bicGetImplantInfoReply_bicChannelInfo_UnitType_UT_COUNT;
constexpr int bicGetImplantInfoReply_bicChannelInfo_UnitType_UnitType_ARRAYSIZE = bicGetImplantInfoReply_bicChannelInfo_UnitType_UnitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* bicGetImplantInfoReply_bicChannelInfo_UnitType_descriptor();
template<typename T>
inline const std::string& bicGetImplantInfoReply_bicChannelInfo_UnitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, bicGetImplantInfoReply_bicChannelInfo_UnitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function bicGetImplantInfoReply_bicChannelInfo_UnitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    bicGetImplantInfoReply_bicChannelInfo_UnitType_descriptor(), enum_t_value);
}
inline bool bicGetImplantInfoReply_bicChannelInfo_UnitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, bicGetImplantInfoReply_bicChannelInfo_UnitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<bicGetImplantInfoReply_bicChannelInfo_UnitType>(
    bicGetImplantInfoReply_bicChannelInfo_UnitType_descriptor(), name, value);
}
enum AtomType : int {
  NONE = 0,
  RECTANGULAR = 1,
  RECTANGULAR_4AMPS = 2,
  PAUSE = 3,
  AtomType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AtomType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AtomType_IsValid(int value);
constexpr AtomType AtomType_MIN = NONE;
constexpr AtomType AtomType_MAX = PAUSE;
constexpr int AtomType_ARRAYSIZE = AtomType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AtomType_descriptor();
template<typename T>
inline const std::string& AtomType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AtomType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AtomType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AtomType_descriptor(), enum_t_value);
}
inline bool AtomType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AtomType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AtomType>(
    AtomType_descriptor(), name, value);
}
enum ConnectBridgeStatus : int {
  CONNECT_BRIDGE_STATUS_UNSPECIFIED = 0,
  CONNECTION_SUCCESS = 1,
  CONNECTION_FAILURE = 2,
  ConnectBridgeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConnectBridgeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConnectBridgeStatus_IsValid(int value);
constexpr ConnectBridgeStatus ConnectBridgeStatus_MIN = CONNECT_BRIDGE_STATUS_UNSPECIFIED;
constexpr ConnectBridgeStatus ConnectBridgeStatus_MAX = CONNECTION_FAILURE;
constexpr int ConnectBridgeStatus_ARRAYSIZE = ConnectBridgeStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectBridgeStatus_descriptor();
template<typename T>
inline const std::string& ConnectBridgeStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectBridgeStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectBridgeStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectBridgeStatus_descriptor(), enum_t_value);
}
inline bool ConnectBridgeStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectBridgeStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectBridgeStatus>(
    ConnectBridgeStatus_descriptor(), name, value);
}
// ===================================================================

class bicSuccessReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicSuccessReply) */ {
 public:
  inline bicSuccessReply() : bicSuccessReply(nullptr) {}
  virtual ~bicSuccessReply();

  bicSuccessReply(const bicSuccessReply& from);
  bicSuccessReply(bicSuccessReply&& from) noexcept
    : bicSuccessReply() {
    *this = ::std::move(from);
  }

  inline bicSuccessReply& operator=(const bicSuccessReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicSuccessReply& operator=(bicSuccessReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicSuccessReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicSuccessReply* internal_default_instance() {
    return reinterpret_cast<const bicSuccessReply*>(
               &_bicSuccessReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(bicSuccessReply& a, bicSuccessReply& b) {
    a.Swap(&b);
  }
  inline void Swap(bicSuccessReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicSuccessReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicSuccessReply* New() const final {
    return CreateMaybeMessage<bicSuccessReply>(nullptr);
  }

  bicSuccessReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicSuccessReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicSuccessReply& from);
  void MergeFrom(const bicSuccessReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicSuccessReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicSuccessReply";
  }
  protected:
  explicit bicSuccessReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BICgRPC.bicSuccessReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class ScanDevicesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.ScanDevicesRequest) */ {
 public:
  inline ScanDevicesRequest() : ScanDevicesRequest(nullptr) {}
  virtual ~ScanDevicesRequest();

  ScanDevicesRequest(const ScanDevicesRequest& from);
  ScanDevicesRequest(ScanDevicesRequest&& from) noexcept
    : ScanDevicesRequest() {
    *this = ::std::move(from);
  }

  inline ScanDevicesRequest& operator=(const ScanDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanDevicesRequest& operator=(ScanDevicesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanDevicesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanDevicesRequest* internal_default_instance() {
    return reinterpret_cast<const ScanDevicesRequest*>(
               &_ScanDevicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScanDevicesRequest& a, ScanDevicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanDevicesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanDevicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanDevicesRequest* New() const final {
    return CreateMaybeMessage<ScanDevicesRequest>(nullptr);
  }

  ScanDevicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanDevicesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanDevicesRequest& from);
  void MergeFrom(const ScanDevicesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanDevicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.ScanDevicesRequest";
  }
  protected:
  explicit ScanDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBridgeNameFieldNumber = 1,
  };
  // string bridgeName = 1;
  void clear_bridgename();
  const std::string& bridgename() const;
  void set_bridgename(const std::string& value);
  void set_bridgename(std::string&& value);
  void set_bridgename(const char* value);
  void set_bridgename(const char* value, size_t size);
  std::string* mutable_bridgename();
  std::string* release_bridgename();
  void set_allocated_bridgename(std::string* bridgename);
  private:
  const std::string& _internal_bridgename() const;
  void _internal_set_bridgename(const std::string& value);
  std::string* _internal_mutable_bridgename();
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.ScanDevicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bridgename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class ScanDevicesReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.ScanDevicesReply) */ {
 public:
  inline ScanDevicesReply() : ScanDevicesReply(nullptr) {}
  virtual ~ScanDevicesReply();

  ScanDevicesReply(const ScanDevicesReply& from);
  ScanDevicesReply(ScanDevicesReply&& from) noexcept
    : ScanDevicesReply() {
    *this = ::std::move(from);
  }

  inline ScanDevicesReply& operator=(const ScanDevicesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanDevicesReply& operator=(ScanDevicesReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanDevicesReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanDevicesReply* internal_default_instance() {
    return reinterpret_cast<const ScanDevicesReply*>(
               &_ScanDevicesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScanDevicesReply& a, ScanDevicesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanDevicesReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanDevicesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanDevicesReply* New() const final {
    return CreateMaybeMessage<ScanDevicesReply>(nullptr);
  }

  ScanDevicesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanDevicesReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanDevicesReply& from);
  void MergeFrom(const ScanDevicesReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanDevicesReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.ScanDevicesReply";
  }
  protected:
  explicit ScanDevicesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDiscoveredDeviceFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .BICgRPC.bicGetImplantInfoReply discoveredDevice = 2;
  bool has_discovereddevice() const;
  private:
  bool _internal_has_discovereddevice() const;
  public:
  void clear_discovereddevice();
  const ::BICgRPC::bicGetImplantInfoReply& discovereddevice() const;
  ::BICgRPC::bicGetImplantInfoReply* release_discovereddevice();
  ::BICgRPC::bicGetImplantInfoReply* mutable_discovereddevice();
  void set_allocated_discovereddevice(::BICgRPC::bicGetImplantInfoReply* discovereddevice);
  private:
  const ::BICgRPC::bicGetImplantInfoReply& _internal_discovereddevice() const;
  ::BICgRPC::bicGetImplantInfoReply* _internal_mutable_discovereddevice();
  public:
  void unsafe_arena_set_allocated_discovereddevice(
      ::BICgRPC::bicGetImplantInfoReply* discovereddevice);
  ::BICgRPC::bicGetImplantInfoReply* unsafe_arena_release_discovereddevice();

  // @@protoc_insertion_point(class_scope:BICgRPC.ScanDevicesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::BICgRPC::bicGetImplantInfoReply* discovereddevice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class ConnectDeviceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.ConnectDeviceRequest) */ {
 public:
  inline ConnectDeviceRequest() : ConnectDeviceRequest(nullptr) {}
  virtual ~ConnectDeviceRequest();

  ConnectDeviceRequest(const ConnectDeviceRequest& from);
  ConnectDeviceRequest(ConnectDeviceRequest&& from) noexcept
    : ConnectDeviceRequest() {
    *this = ::std::move(from);
  }

  inline ConnectDeviceRequest& operator=(const ConnectDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectDeviceRequest& operator=(ConnectDeviceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectDeviceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectDeviceRequest*>(
               &_ConnectDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConnectDeviceRequest& a, ConnectDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectDeviceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectDeviceRequest* New() const final {
    return CreateMaybeMessage<ConnectDeviceRequest>(nullptr);
  }

  ConnectDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectDeviceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectDeviceRequest& from);
  void MergeFrom(const ConnectDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.ConnectDeviceRequest";
  }
  protected:
  explicit ConnectDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceAddressFieldNumber = 1,
    kLogFileNameFieldNumber = 2,
  };
  // string deviceAddress = 1;
  void clear_deviceaddress();
  const std::string& deviceaddress() const;
  void set_deviceaddress(const std::string& value);
  void set_deviceaddress(std::string&& value);
  void set_deviceaddress(const char* value);
  void set_deviceaddress(const char* value, size_t size);
  std::string* mutable_deviceaddress();
  std::string* release_deviceaddress();
  void set_allocated_deviceaddress(std::string* deviceaddress);
  private:
  const std::string& _internal_deviceaddress() const;
  void _internal_set_deviceaddress(const std::string& value);
  std::string* _internal_mutable_deviceaddress();
  public:

  // string logFileName = 2;
  void clear_logfilename();
  const std::string& logfilename() const;
  void set_logfilename(const std::string& value);
  void set_logfilename(std::string&& value);
  void set_logfilename(const char* value);
  void set_logfilename(const char* value, size_t size);
  std::string* mutable_logfilename();
  std::string* release_logfilename();
  void set_allocated_logfilename(std::string* logfilename);
  private:
  const std::string& _internal_logfilename() const;
  void _internal_set_logfilename(const std::string& value);
  std::string* _internal_mutable_logfilename();
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.ConnectDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logfilename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicGetImplantInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicGetImplantInfoRequest) */ {
 public:
  inline bicGetImplantInfoRequest() : bicGetImplantInfoRequest(nullptr) {}
  virtual ~bicGetImplantInfoRequest();

  bicGetImplantInfoRequest(const bicGetImplantInfoRequest& from);
  bicGetImplantInfoRequest(bicGetImplantInfoRequest&& from) noexcept
    : bicGetImplantInfoRequest() {
    *this = ::std::move(from);
  }

  inline bicGetImplantInfoRequest& operator=(const bicGetImplantInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicGetImplantInfoRequest& operator=(bicGetImplantInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicGetImplantInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicGetImplantInfoRequest* internal_default_instance() {
    return reinterpret_cast<const bicGetImplantInfoRequest*>(
               &_bicGetImplantInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(bicGetImplantInfoRequest& a, bicGetImplantInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(bicGetImplantInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicGetImplantInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicGetImplantInfoRequest* New() const final {
    return CreateMaybeMessage<bicGetImplantInfoRequest>(nullptr);
  }

  bicGetImplantInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicGetImplantInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicGetImplantInfoRequest& from);
  void MergeFrom(const bicGetImplantInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicGetImplantInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicGetImplantInfoRequest";
  }
  protected:
  explicit bicGetImplantInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateCachedInfoFieldNumber = 1,
  };
  // bool updateCachedInfo = 1;
  void clear_updatecachedinfo();
  bool updatecachedinfo() const;
  void set_updatecachedinfo(bool value);
  private:
  bool _internal_updatecachedinfo() const;
  void _internal_set_updatecachedinfo(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.bicGetImplantInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool updatecachedinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicGetImplantInfoReply_bicChannelInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicGetImplantInfoReply.bicChannelInfo) */ {
 public:
  inline bicGetImplantInfoReply_bicChannelInfo() : bicGetImplantInfoReply_bicChannelInfo(nullptr) {}
  virtual ~bicGetImplantInfoReply_bicChannelInfo();

  bicGetImplantInfoReply_bicChannelInfo(const bicGetImplantInfoReply_bicChannelInfo& from);
  bicGetImplantInfoReply_bicChannelInfo(bicGetImplantInfoReply_bicChannelInfo&& from) noexcept
    : bicGetImplantInfoReply_bicChannelInfo() {
    *this = ::std::move(from);
  }

  inline bicGetImplantInfoReply_bicChannelInfo& operator=(const bicGetImplantInfoReply_bicChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicGetImplantInfoReply_bicChannelInfo& operator=(bicGetImplantInfoReply_bicChannelInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicGetImplantInfoReply_bicChannelInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicGetImplantInfoReply_bicChannelInfo* internal_default_instance() {
    return reinterpret_cast<const bicGetImplantInfoReply_bicChannelInfo*>(
               &_bicGetImplantInfoReply_bicChannelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(bicGetImplantInfoReply_bicChannelInfo& a, bicGetImplantInfoReply_bicChannelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(bicGetImplantInfoReply_bicChannelInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicGetImplantInfoReply_bicChannelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicGetImplantInfoReply_bicChannelInfo* New() const final {
    return CreateMaybeMessage<bicGetImplantInfoReply_bicChannelInfo>(nullptr);
  }

  bicGetImplantInfoReply_bicChannelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicGetImplantInfoReply_bicChannelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicGetImplantInfoReply_bicChannelInfo& from);
  void MergeFrom(const bicGetImplantInfoReply_bicChannelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicGetImplantInfoReply_bicChannelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicGetImplantInfoReply.bicChannelInfo";
  }
  protected:
  explicit bicGetImplantInfoReply_bicChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef bicGetImplantInfoReply_bicChannelInfo_UnitType UnitType;
  static constexpr UnitType UT_NO_UNIT =
    bicGetImplantInfoReply_bicChannelInfo_UnitType_UT_NO_UNIT;
  static constexpr UnitType UT_CURRENT =
    bicGetImplantInfoReply_bicChannelInfo_UnitType_UT_CURRENT;
  static constexpr UnitType UT_VOLTAGE =
    bicGetImplantInfoReply_bicChannelInfo_UnitType_UT_VOLTAGE;
  static constexpr UnitType UT_COUNT =
    bicGetImplantInfoReply_bicChannelInfo_UnitType_UT_COUNT;
  static inline bool UnitType_IsValid(int value) {
    return bicGetImplantInfoReply_bicChannelInfo_UnitType_IsValid(value);
  }
  static constexpr UnitType UnitType_MIN =
    bicGetImplantInfoReply_bicChannelInfo_UnitType_UnitType_MIN;
  static constexpr UnitType UnitType_MAX =
    bicGetImplantInfoReply_bicChannelInfo_UnitType_UnitType_MAX;
  static constexpr int UnitType_ARRAYSIZE =
    bicGetImplantInfoReply_bicChannelInfo_UnitType_UnitType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UnitType_descriptor() {
    return bicGetImplantInfoReply_bicChannelInfo_UnitType_descriptor();
  }
  template<typename T>
  static inline const std::string& UnitType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UnitType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UnitType_Name.");
    return bicGetImplantInfoReply_bicChannelInfo_UnitType_Name(enum_t_value);
  }
  static inline bool UnitType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UnitType* value) {
    return bicGetImplantInfoReply_bicChannelInfo_UnitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMeasureValueMinFieldNumber = 2,
    kMeasureValueMaxFieldNumber = 3,
    kCanMeasureFieldNumber = 1,
    kCanStimulateFieldNumber = 4,
    kCanMeasureImpedanceFieldNumber = 8,
    kStimulationUnitFieldNumber = 5,
    kStimValueMinFieldNumber = 6,
    kStimValueMaxFieldNumber = 7,
  };
  // double measureValueMin = 2;
  void clear_measurevaluemin();
  double measurevaluemin() const;
  void set_measurevaluemin(double value);
  private:
  double _internal_measurevaluemin() const;
  void _internal_set_measurevaluemin(double value);
  public:

  // double measureValueMax = 3;
  void clear_measurevaluemax();
  double measurevaluemax() const;
  void set_measurevaluemax(double value);
  private:
  double _internal_measurevaluemax() const;
  void _internal_set_measurevaluemax(double value);
  public:

  // bool canMeasure = 1;
  void clear_canmeasure();
  bool canmeasure() const;
  void set_canmeasure(bool value);
  private:
  bool _internal_canmeasure() const;
  void _internal_set_canmeasure(bool value);
  public:

  // bool canStimulate = 4;
  void clear_canstimulate();
  bool canstimulate() const;
  void set_canstimulate(bool value);
  private:
  bool _internal_canstimulate() const;
  void _internal_set_canstimulate(bool value);
  public:

  // bool canMeasureImpedance = 8;
  void clear_canmeasureimpedance();
  bool canmeasureimpedance() const;
  void set_canmeasureimpedance(bool value);
  private:
  bool _internal_canmeasureimpedance() const;
  void _internal_set_canmeasureimpedance(bool value);
  public:

  // .BICgRPC.bicGetImplantInfoReply.bicChannelInfo.UnitType stimulationUnit = 5;
  void clear_stimulationunit();
  ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType stimulationunit() const;
  void set_stimulationunit(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType value);
  private:
  ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType _internal_stimulationunit() const;
  void _internal_set_stimulationunit(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType value);
  public:

  // double stimValueMin = 6;
  void clear_stimvaluemin();
  double stimvaluemin() const;
  void set_stimvaluemin(double value);
  private:
  double _internal_stimvaluemin() const;
  void _internal_set_stimvaluemin(double value);
  public:

  // double stimValueMax = 7;
  void clear_stimvaluemax();
  double stimvaluemax() const;
  void set_stimvaluemax(double value);
  private:
  double _internal_stimvaluemax() const;
  void _internal_set_stimvaluemax(double value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double measurevaluemin_;
  double measurevaluemax_;
  bool canmeasure_;
  bool canstimulate_;
  bool canmeasureimpedance_;
  int stimulationunit_;
  double stimvaluemin_;
  double stimvaluemax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicGetImplantInfoReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicGetImplantInfoReply) */ {
 public:
  inline bicGetImplantInfoReply() : bicGetImplantInfoReply(nullptr) {}
  virtual ~bicGetImplantInfoReply();

  bicGetImplantInfoReply(const bicGetImplantInfoReply& from);
  bicGetImplantInfoReply(bicGetImplantInfoReply&& from) noexcept
    : bicGetImplantInfoReply() {
    *this = ::std::move(from);
  }

  inline bicGetImplantInfoReply& operator=(const bicGetImplantInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicGetImplantInfoReply& operator=(bicGetImplantInfoReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicGetImplantInfoReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicGetImplantInfoReply* internal_default_instance() {
    return reinterpret_cast<const bicGetImplantInfoReply*>(
               &_bicGetImplantInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(bicGetImplantInfoReply& a, bicGetImplantInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(bicGetImplantInfoReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicGetImplantInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicGetImplantInfoReply* New() const final {
    return CreateMaybeMessage<bicGetImplantInfoReply>(nullptr);
  }

  bicGetImplantInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicGetImplantInfoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicGetImplantInfoReply& from);
  void MergeFrom(const bicGetImplantInfoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicGetImplantInfoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicGetImplantInfoReply";
  }
  protected:
  explicit bicGetImplantInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef bicGetImplantInfoReply_bicChannelInfo bicChannelInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelInfoListFieldNumber = 4,
    kFirmwareVersionFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
    kSuccessFieldNumber = 9,
    kChannelCountFieldNumber = 5,
    kMeasurementChannelCountFieldNumber = 6,
    kStimulationChannelCountFieldNumber = 7,
    kSamplingRateFieldNumber = 8,
  };
  // repeated .BICgRPC.bicGetImplantInfoReply.bicChannelInfo channelInfoList = 4;
  int channelinfolist_size() const;
  private:
  int _internal_channelinfolist_size() const;
  public:
  void clear_channelinfolist();
  ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo* mutable_channelinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo >*
      mutable_channelinfolist();
  private:
  const ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo& _internal_channelinfolist(int index) const;
  ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo* _internal_add_channelinfolist();
  public:
  const ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo& channelinfolist(int index) const;
  ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo* add_channelinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo >&
      channelinfolist() const;

  // string firmwareVersion = 1;
  void clear_firmwareversion();
  const std::string& firmwareversion() const;
  void set_firmwareversion(const std::string& value);
  void set_firmwareversion(std::string&& value);
  void set_firmwareversion(const char* value);
  void set_firmwareversion(const char* value, size_t size);
  std::string* mutable_firmwareversion();
  std::string* release_firmwareversion();
  void set_allocated_firmwareversion(std::string* firmwareversion);
  private:
  const std::string& _internal_firmwareversion() const;
  void _internal_set_firmwareversion(const std::string& value);
  std::string* _internal_mutable_firmwareversion();
  public:

  // string deviceType = 2;
  void clear_devicetype();
  const std::string& devicetype() const;
  void set_devicetype(const std::string& value);
  void set_devicetype(std::string&& value);
  void set_devicetype(const char* value);
  void set_devicetype(const char* value, size_t size);
  std::string* mutable_devicetype();
  std::string* release_devicetype();
  void set_allocated_devicetype(std::string* devicetype);
  private:
  const std::string& _internal_devicetype() const;
  void _internal_set_devicetype(const std::string& value);
  std::string* _internal_mutable_devicetype();
  public:

  // string deviceId = 3;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string success = 9;
  void clear_success();
  const std::string& success() const;
  void set_success(const std::string& value);
  void set_success(std::string&& value);
  void set_success(const char* value);
  void set_success(const char* value, size_t size);
  std::string* mutable_success();
  std::string* release_success();
  void set_allocated_success(std::string* success);
  private:
  const std::string& _internal_success() const;
  void _internal_set_success(const std::string& value);
  std::string* _internal_mutable_success();
  public:

  // uint32 channelCount = 5;
  void clear_channelcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 channelcount() const;
  void set_channelcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channelcount() const;
  void _internal_set_channelcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 measurementChannelCount = 6;
  void clear_measurementchannelcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 measurementchannelcount() const;
  void set_measurementchannelcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_measurementchannelcount() const;
  void _internal_set_measurementchannelcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stimulationChannelCount = 7;
  void clear_stimulationchannelcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 stimulationchannelcount() const;
  void set_stimulationchannelcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stimulationchannelcount() const;
  void _internal_set_stimulationchannelcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 samplingRate = 8;
  void clear_samplingrate();
  ::PROTOBUF_NAMESPACE_ID::uint32 samplingrate() const;
  void set_samplingrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_samplingrate() const;
  void _internal_set_samplingrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.bicGetImplantInfoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo > channelinfolist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmwareversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channelcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 measurementchannelcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stimulationchannelcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 samplingrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicSetStreamEnable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicSetStreamEnable) */ {
 public:
  inline bicSetStreamEnable() : bicSetStreamEnable(nullptr) {}
  virtual ~bicSetStreamEnable();

  bicSetStreamEnable(const bicSetStreamEnable& from);
  bicSetStreamEnable(bicSetStreamEnable&& from) noexcept
    : bicSetStreamEnable() {
    *this = ::std::move(from);
  }

  inline bicSetStreamEnable& operator=(const bicSetStreamEnable& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicSetStreamEnable& operator=(bicSetStreamEnable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicSetStreamEnable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicSetStreamEnable* internal_default_instance() {
    return reinterpret_cast<const bicSetStreamEnable*>(
               &_bicSetStreamEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(bicSetStreamEnable& a, bicSetStreamEnable& b) {
    a.Swap(&b);
  }
  inline void Swap(bicSetStreamEnable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicSetStreamEnable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicSetStreamEnable* New() const final {
    return CreateMaybeMessage<bicSetStreamEnable>(nullptr);
  }

  bicSetStreamEnable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicSetStreamEnable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicSetStreamEnable& from);
  void MergeFrom(const bicSetStreamEnable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicSetStreamEnable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicSetStreamEnable";
  }
  protected:
  explicit bicSetStreamEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.bicSetStreamEnable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicGetImpedanceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicGetImpedanceRequest) */ {
 public:
  inline bicGetImpedanceRequest() : bicGetImpedanceRequest(nullptr) {}
  virtual ~bicGetImpedanceRequest();

  bicGetImpedanceRequest(const bicGetImpedanceRequest& from);
  bicGetImpedanceRequest(bicGetImpedanceRequest&& from) noexcept
    : bicGetImpedanceRequest() {
    *this = ::std::move(from);
  }

  inline bicGetImpedanceRequest& operator=(const bicGetImpedanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicGetImpedanceRequest& operator=(bicGetImpedanceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicGetImpedanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicGetImpedanceRequest* internal_default_instance() {
    return reinterpret_cast<const bicGetImpedanceRequest*>(
               &_bicGetImpedanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(bicGetImpedanceRequest& a, bicGetImpedanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(bicGetImpedanceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicGetImpedanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicGetImpedanceRequest* New() const final {
    return CreateMaybeMessage<bicGetImpedanceRequest>(nullptr);
  }

  bicGetImpedanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicGetImpedanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicGetImpedanceRequest& from);
  void MergeFrom(const bicGetImpedanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicGetImpedanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicGetImpedanceRequest";
  }
  protected:
  explicit bicGetImpedanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
  };
  // uint32 channel = 1;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.bicGetImpedanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicGetImpedanceReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicGetImpedanceReply) */ {
 public:
  inline bicGetImpedanceReply() : bicGetImpedanceReply(nullptr) {}
  virtual ~bicGetImpedanceReply();

  bicGetImpedanceReply(const bicGetImpedanceReply& from);
  bicGetImpedanceReply(bicGetImpedanceReply&& from) noexcept
    : bicGetImpedanceReply() {
    *this = ::std::move(from);
  }

  inline bicGetImpedanceReply& operator=(const bicGetImpedanceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicGetImpedanceReply& operator=(bicGetImpedanceReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicGetImpedanceReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicGetImpedanceReply* internal_default_instance() {
    return reinterpret_cast<const bicGetImpedanceReply*>(
               &_bicGetImpedanceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(bicGetImpedanceReply& a, bicGetImpedanceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(bicGetImpedanceReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicGetImpedanceReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicGetImpedanceReply* New() const final {
    return CreateMaybeMessage<bicGetImpedanceReply>(nullptr);
  }

  bicGetImpedanceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicGetImpedanceReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicGetImpedanceReply& from);
  void MergeFrom(const bicGetImpedanceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicGetImpedanceReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicGetImpedanceReply";
  }
  protected:
  explicit bicGetImpedanceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 2,
    kSuccessFieldNumber = 3,
    kChannelImpedanceFieldNumber = 1,
  };
  // string units = 2;
  void clear_units();
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // string success = 3;
  void clear_success();
  const std::string& success() const;
  void set_success(const std::string& value);
  void set_success(std::string&& value);
  void set_success(const char* value);
  void set_success(const char* value, size_t size);
  std::string* mutable_success();
  std::string* release_success();
  void set_allocated_success(std::string* success);
  private:
  const std::string& _internal_success() const;
  void _internal_set_success(const std::string& value);
  std::string* _internal_mutable_success();
  public:

  // double channelImpedance = 1;
  void clear_channelimpedance();
  double channelimpedance() const;
  void set_channelimpedance(double value);
  private:
  double _internal_channelimpedance() const;
  void _internal_set_channelimpedance(double value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.bicGetImpedanceReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_;
  double channelimpedance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicGetTemperatureReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicGetTemperatureReply) */ {
 public:
  inline bicGetTemperatureReply() : bicGetTemperatureReply(nullptr) {}
  virtual ~bicGetTemperatureReply();

  bicGetTemperatureReply(const bicGetTemperatureReply& from);
  bicGetTemperatureReply(bicGetTemperatureReply&& from) noexcept
    : bicGetTemperatureReply() {
    *this = ::std::move(from);
  }

  inline bicGetTemperatureReply& operator=(const bicGetTemperatureReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicGetTemperatureReply& operator=(bicGetTemperatureReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicGetTemperatureReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicGetTemperatureReply* internal_default_instance() {
    return reinterpret_cast<const bicGetTemperatureReply*>(
               &_bicGetTemperatureReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(bicGetTemperatureReply& a, bicGetTemperatureReply& b) {
    a.Swap(&b);
  }
  inline void Swap(bicGetTemperatureReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicGetTemperatureReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicGetTemperatureReply* New() const final {
    return CreateMaybeMessage<bicGetTemperatureReply>(nullptr);
  }

  bicGetTemperatureReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicGetTemperatureReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicGetTemperatureReply& from);
  void MergeFrom(const bicGetTemperatureReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicGetTemperatureReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicGetTemperatureReply";
  }
  protected:
  explicit bicGetTemperatureReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 2,
    kSuccessFieldNumber = 3,
    kTemperatureFieldNumber = 1,
  };
  // string units = 2;
  void clear_units();
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // string success = 3;
  void clear_success();
  const std::string& success() const;
  void set_success(const std::string& value);
  void set_success(std::string&& value);
  void set_success(const char* value);
  void set_success(const char* value, size_t size);
  std::string* mutable_success();
  std::string* release_success();
  void set_allocated_success(std::string* success);
  private:
  const std::string& _internal_success() const;
  void _internal_set_success(const std::string& value);
  std::string* _internal_mutable_success();
  public:

  // double temperature = 1;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.bicGetTemperatureReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_;
  double temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicGetHumidityReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicGetHumidityReply) */ {
 public:
  inline bicGetHumidityReply() : bicGetHumidityReply(nullptr) {}
  virtual ~bicGetHumidityReply();

  bicGetHumidityReply(const bicGetHumidityReply& from);
  bicGetHumidityReply(bicGetHumidityReply&& from) noexcept
    : bicGetHumidityReply() {
    *this = ::std::move(from);
  }

  inline bicGetHumidityReply& operator=(const bicGetHumidityReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicGetHumidityReply& operator=(bicGetHumidityReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicGetHumidityReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicGetHumidityReply* internal_default_instance() {
    return reinterpret_cast<const bicGetHumidityReply*>(
               &_bicGetHumidityReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(bicGetHumidityReply& a, bicGetHumidityReply& b) {
    a.Swap(&b);
  }
  inline void Swap(bicGetHumidityReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicGetHumidityReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicGetHumidityReply* New() const final {
    return CreateMaybeMessage<bicGetHumidityReply>(nullptr);
  }

  bicGetHumidityReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicGetHumidityReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicGetHumidityReply& from);
  void MergeFrom(const bicGetHumidityReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicGetHumidityReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicGetHumidityReply";
  }
  protected:
  explicit bicGetHumidityReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 2,
    kSuccessFieldNumber = 3,
    kHumidityFieldNumber = 1,
  };
  // string units = 2;
  void clear_units();
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // string success = 3;
  void clear_success();
  const std::string& success() const;
  void set_success(const std::string& value);
  void set_success(std::string&& value);
  void set_success(const char* value);
  void set_success(const char* value, size_t size);
  std::string* mutable_success();
  std::string* release_success();
  void set_allocated_success(std::string* success);
  private:
  const std::string& _internal_success() const;
  void _internal_set_success(const std::string& value);
  std::string* _internal_mutable_success();
  public:

  // double humidity = 1;
  void clear_humidity();
  double humidity() const;
  void set_humidity(double value);
  private:
  double _internal_humidity() const;
  void _internal_set_humidity(double value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.bicGetHumidityReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_;
  double humidity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicSetSensingEnableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicSetSensingEnableRequest) */ {
 public:
  inline bicSetSensingEnableRequest() : bicSetSensingEnableRequest(nullptr) {}
  virtual ~bicSetSensingEnableRequest();

  bicSetSensingEnableRequest(const bicSetSensingEnableRequest& from);
  bicSetSensingEnableRequest(bicSetSensingEnableRequest&& from) noexcept
    : bicSetSensingEnableRequest() {
    *this = ::std::move(from);
  }

  inline bicSetSensingEnableRequest& operator=(const bicSetSensingEnableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicSetSensingEnableRequest& operator=(bicSetSensingEnableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicSetSensingEnableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicSetSensingEnableRequest* internal_default_instance() {
    return reinterpret_cast<const bicSetSensingEnableRequest*>(
               &_bicSetSensingEnableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(bicSetSensingEnableRequest& a, bicSetSensingEnableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(bicSetSensingEnableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicSetSensingEnableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicSetSensingEnableRequest* New() const final {
    return CreateMaybeMessage<bicSetSensingEnableRequest>(nullptr);
  }

  bicSetSensingEnableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicSetSensingEnableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicSetSensingEnableRequest& from);
  void MergeFrom(const bicSetSensingEnableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicSetSensingEnableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicSetSensingEnableRequest";
  }
  protected:
  explicit bicSetSensingEnableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefChannelsFieldNumber = 2,
    kEnableSensingFieldNumber = 1,
    kBufferSizeFieldNumber = 3,
  };
  // repeated uint32 refChannels = 2;
  int refchannels_size() const;
  private:
  int _internal_refchannels_size() const;
  public:
  void clear_refchannels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_refchannels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_refchannels() const;
  void _internal_add_refchannels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_refchannels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 refchannels(int index) const;
  void set_refchannels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_refchannels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      refchannels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_refchannels();

  // bool enableSensing = 1;
  void clear_enablesensing();
  bool enablesensing() const;
  void set_enablesensing(bool value);
  private:
  bool _internal_enablesensing() const;
  void _internal_set_enablesensing(bool value);
  public:

  // uint32 bufferSize = 3;
  void clear_buffersize();
  ::PROTOBUF_NAMESPACE_ID::uint32 buffersize() const;
  void set_buffersize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buffersize() const;
  void _internal_set_buffersize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.bicSetSensingEnableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > refchannels_;
  mutable std::atomic<int> _refchannels_cached_byte_size_;
  bool enablesensing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buffersize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicSetImplantPowerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicSetImplantPowerRequest) */ {
 public:
  inline bicSetImplantPowerRequest() : bicSetImplantPowerRequest(nullptr) {}
  virtual ~bicSetImplantPowerRequest();

  bicSetImplantPowerRequest(const bicSetImplantPowerRequest& from);
  bicSetImplantPowerRequest(bicSetImplantPowerRequest&& from) noexcept
    : bicSetImplantPowerRequest() {
    *this = ::std::move(from);
  }

  inline bicSetImplantPowerRequest& operator=(const bicSetImplantPowerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicSetImplantPowerRequest& operator=(bicSetImplantPowerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicSetImplantPowerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicSetImplantPowerRequest* internal_default_instance() {
    return reinterpret_cast<const bicSetImplantPowerRequest*>(
               &_bicSetImplantPowerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(bicSetImplantPowerRequest& a, bicSetImplantPowerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(bicSetImplantPowerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicSetImplantPowerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicSetImplantPowerRequest* New() const final {
    return CreateMaybeMessage<bicSetImplantPowerRequest>(nullptr);
  }

  bicSetImplantPowerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicSetImplantPowerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicSetImplantPowerRequest& from);
  void MergeFrom(const bicSetImplantPowerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicSetImplantPowerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicSetImplantPowerRequest";
  }
  protected:
  explicit bicSetImplantPowerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPowerEnabledFieldNumber = 1,
  };
  // bool powerEnabled = 1;
  void clear_powerenabled();
  bool powerenabled() const;
  void set_powerenabled(bool value);
  private:
  bool _internal_powerenabled() const;
  void _internal_set_powerenabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.bicSetImplantPowerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool powerenabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicStartStimulationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicStartStimulationRequest) */ {
 public:
  inline bicStartStimulationRequest() : bicStartStimulationRequest(nullptr) {}
  virtual ~bicStartStimulationRequest();

  bicStartStimulationRequest(const bicStartStimulationRequest& from);
  bicStartStimulationRequest(bicStartStimulationRequest&& from) noexcept
    : bicStartStimulationRequest() {
    *this = ::std::move(from);
  }

  inline bicStartStimulationRequest& operator=(const bicStartStimulationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicStartStimulationRequest& operator=(bicStartStimulationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicStartStimulationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicStartStimulationRequest* internal_default_instance() {
    return reinterpret_cast<const bicStartStimulationRequest*>(
               &_bicStartStimulationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(bicStartStimulationRequest& a, bicStartStimulationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(bicStartStimulationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicStartStimulationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicStartStimulationRequest* New() const final {
    return CreateMaybeMessage<bicStartStimulationRequest>(nullptr);
  }

  bicStartStimulationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicStartStimulationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicStartStimulationRequest& from);
  void MergeFrom(const bicStartStimulationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicStartStimulationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicStartStimulationRequest";
  }
  protected:
  explicit bicStartStimulationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 1,
  };
  // string functionName = 1;
  void clear_functionname();
  const std::string& functionname() const;
  void set_functionname(const std::string& value);
  void set_functionname(std::string&& value);
  void set_functionname(const char* value);
  void set_functionname(const char* value, size_t size);
  std::string* mutable_functionname();
  std::string* release_functionname();
  void set_allocated_functionname(std::string* functionname);
  private:
  const std::string& _internal_functionname() const;
  void _internal_set_functionname(const std::string& value);
  std::string* _internal_mutable_functionname();
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.bicStartStimulationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr functionname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class bicStimulationFunctionDefinitionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.bicStimulationFunctionDefinitionRequest) */ {
 public:
  inline bicStimulationFunctionDefinitionRequest() : bicStimulationFunctionDefinitionRequest(nullptr) {}
  virtual ~bicStimulationFunctionDefinitionRequest();

  bicStimulationFunctionDefinitionRequest(const bicStimulationFunctionDefinitionRequest& from);
  bicStimulationFunctionDefinitionRequest(bicStimulationFunctionDefinitionRequest&& from) noexcept
    : bicStimulationFunctionDefinitionRequest() {
    *this = ::std::move(from);
  }

  inline bicStimulationFunctionDefinitionRequest& operator=(const bicStimulationFunctionDefinitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline bicStimulationFunctionDefinitionRequest& operator=(bicStimulationFunctionDefinitionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bicStimulationFunctionDefinitionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bicStimulationFunctionDefinitionRequest* internal_default_instance() {
    return reinterpret_cast<const bicStimulationFunctionDefinitionRequest*>(
               &_bicStimulationFunctionDefinitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(bicStimulationFunctionDefinitionRequest& a, bicStimulationFunctionDefinitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(bicStimulationFunctionDefinitionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bicStimulationFunctionDefinitionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bicStimulationFunctionDefinitionRequest* New() const final {
    return CreateMaybeMessage<bicStimulationFunctionDefinitionRequest>(nullptr);
  }

  bicStimulationFunctionDefinitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bicStimulationFunctionDefinitionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bicStimulationFunctionDefinitionRequest& from);
  void MergeFrom(const bicStimulationFunctionDefinitionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bicStimulationFunctionDefinitionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.bicStimulationFunctionDefinitionRequest";
  }
  protected:
  explicit bicStimulationFunctionDefinitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionsFieldNumber = 1,
  };
  // repeated .BICgRPC.StimulationFunctionDefinition functions = 1;
  int functions_size() const;
  private:
  int _internal_functions_size() const;
  public:
  void clear_functions();
  ::BICgRPC::StimulationFunctionDefinition* mutable_functions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::StimulationFunctionDefinition >*
      mutable_functions();
  private:
  const ::BICgRPC::StimulationFunctionDefinition& _internal_functions(int index) const;
  ::BICgRPC::StimulationFunctionDefinition* _internal_add_functions();
  public:
  const ::BICgRPC::StimulationFunctionDefinition& functions(int index) const;
  ::BICgRPC::StimulationFunctionDefinition* add_functions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::StimulationFunctionDefinition >&
      functions() const;

  // @@protoc_insertion_point(class_scope:BICgRPC.bicStimulationFunctionDefinitionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::StimulationFunctionDefinition > functions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class StimulationFunctionDefinition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.StimulationFunctionDefinition) */ {
 public:
  inline StimulationFunctionDefinition() : StimulationFunctionDefinition(nullptr) {}
  virtual ~StimulationFunctionDefinition();

  StimulationFunctionDefinition(const StimulationFunctionDefinition& from);
  StimulationFunctionDefinition(StimulationFunctionDefinition&& from) noexcept
    : StimulationFunctionDefinition() {
    *this = ::std::move(from);
  }

  inline StimulationFunctionDefinition& operator=(const StimulationFunctionDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline StimulationFunctionDefinition& operator=(StimulationFunctionDefinition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StimulationFunctionDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StimulationFunctionDefinition* internal_default_instance() {
    return reinterpret_cast<const StimulationFunctionDefinition*>(
               &_StimulationFunctionDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StimulationFunctionDefinition& a, StimulationFunctionDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(StimulationFunctionDefinition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StimulationFunctionDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StimulationFunctionDefinition* New() const final {
    return CreateMaybeMessage<StimulationFunctionDefinition>(nullptr);
  }

  StimulationFunctionDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StimulationFunctionDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StimulationFunctionDefinition& from);
  void MergeFrom(const StimulationFunctionDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StimulationFunctionDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.StimulationFunctionDefinition";
  }
  protected:
  explicit StimulationFunctionDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceElectrodesFieldNumber = 3,
    kSinkElectrodesFieldNumber = 4,
    kAtomsFieldNumber = 5,
    kFunctionNameFieldNumber = 1,
    kRepetitionsFieldNumber = 2,
  };
  // repeated uint32 sourceElectrodes = 3;
  int sourceelectrodes_size() const;
  private:
  int _internal_sourceelectrodes_size() const;
  public:
  void clear_sourceelectrodes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sourceelectrodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_sourceelectrodes() const;
  void _internal_add_sourceelectrodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_sourceelectrodes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 sourceelectrodes(int index) const;
  void set_sourceelectrodes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_sourceelectrodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      sourceelectrodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_sourceelectrodes();

  // repeated uint32 sinkElectrodes = 4;
  int sinkelectrodes_size() const;
  private:
  int _internal_sinkelectrodes_size() const;
  public:
  void clear_sinkelectrodes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sinkelectrodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_sinkelectrodes() const;
  void _internal_add_sinkelectrodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_sinkelectrodes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 sinkelectrodes(int index) const;
  void set_sinkelectrodes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_sinkelectrodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      sinkelectrodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_sinkelectrodes();

  // repeated .BICgRPC.StimulationAtom atoms = 5;
  int atoms_size() const;
  private:
  int _internal_atoms_size() const;
  public:
  void clear_atoms();
  ::BICgRPC::StimulationAtom* mutable_atoms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::StimulationAtom >*
      mutable_atoms();
  private:
  const ::BICgRPC::StimulationAtom& _internal_atoms(int index) const;
  ::BICgRPC::StimulationAtom* _internal_add_atoms();
  public:
  const ::BICgRPC::StimulationAtom& atoms(int index) const;
  ::BICgRPC::StimulationAtom* add_atoms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::StimulationAtom >&
      atoms() const;

  // string functionName = 1;
  void clear_functionname();
  const std::string& functionname() const;
  void set_functionname(const std::string& value);
  void set_functionname(std::string&& value);
  void set_functionname(const char* value);
  void set_functionname(const char* value, size_t size);
  std::string* mutable_functionname();
  std::string* release_functionname();
  void set_allocated_functionname(std::string* functionname);
  private:
  const std::string& _internal_functionname() const;
  void _internal_set_functionname(const std::string& value);
  std::string* _internal_mutable_functionname();
  public:

  // uint32 repetitions = 2;
  void clear_repetitions();
  ::PROTOBUF_NAMESPACE_ID::uint32 repetitions() const;
  void set_repetitions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repetitions() const;
  void _internal_set_repetitions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.StimulationFunctionDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > sourceelectrodes_;
  mutable std::atomic<int> _sourceelectrodes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > sinkelectrodes_;
  mutable std::atomic<int> _sinkelectrodes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::StimulationAtom > atoms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr functionname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repetitions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class StimulationAtom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.StimulationAtom) */ {
 public:
  inline StimulationAtom() : StimulationAtom(nullptr) {}
  virtual ~StimulationAtom();

  StimulationAtom(const StimulationAtom& from);
  StimulationAtom(StimulationAtom&& from) noexcept
    : StimulationAtom() {
    *this = ::std::move(from);
  }

  inline StimulationAtom& operator=(const StimulationAtom& from) {
    CopyFrom(from);
    return *this;
  }
  inline StimulationAtom& operator=(StimulationAtom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StimulationAtom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StimulationAtom* internal_default_instance() {
    return reinterpret_cast<const StimulationAtom*>(
               &_StimulationAtom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StimulationAtom& a, StimulationAtom& b) {
    a.Swap(&b);
  }
  inline void Swap(StimulationAtom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StimulationAtom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StimulationAtom* New() const final {
    return CreateMaybeMessage<StimulationAtom>(nullptr);
  }

  StimulationAtom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StimulationAtom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StimulationAtom& from);
  void MergeFrom(const StimulationAtom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StimulationAtom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.StimulationAtom";
  }
  protected:
  explicit StimulationAtom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmplitudeFieldNumber = 1,
    kDurationFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated double amplitude = 1;
  int amplitude_size() const;
  private:
  int _internal_amplitude_size() const;
  public:
  void clear_amplitude();
  private:
  double _internal_amplitude(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_amplitude() const;
  void _internal_add_amplitude(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_amplitude();
  public:
  double amplitude(int index) const;
  void set_amplitude(int index, double value);
  void add_amplitude(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      amplitude() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_amplitude();

  // double duration = 2;
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // .BICgRPC.AtomType type = 3;
  void clear_type();
  ::BICgRPC::AtomType type() const;
  void set_type(::BICgRPC::AtomType value);
  private:
  ::BICgRPC::AtomType _internal_type() const;
  void _internal_set_type(::BICgRPC::AtomType value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.StimulationAtom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > amplitude_;
  mutable std::atomic<int> _amplitude_cached_byte_size_;
  double duration_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class TemperatureUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.TemperatureUpdate) */ {
 public:
  inline TemperatureUpdate() : TemperatureUpdate(nullptr) {}
  virtual ~TemperatureUpdate();

  TemperatureUpdate(const TemperatureUpdate& from);
  TemperatureUpdate(TemperatureUpdate&& from) noexcept
    : TemperatureUpdate() {
    *this = ::std::move(from);
  }

  inline TemperatureUpdate& operator=(const TemperatureUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemperatureUpdate& operator=(TemperatureUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TemperatureUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TemperatureUpdate* internal_default_instance() {
    return reinterpret_cast<const TemperatureUpdate*>(
               &_TemperatureUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TemperatureUpdate& a, TemperatureUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TemperatureUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemperatureUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TemperatureUpdate* New() const final {
    return CreateMaybeMessage<TemperatureUpdate>(nullptr);
  }

  TemperatureUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TemperatureUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TemperatureUpdate& from);
  void MergeFrom(const TemperatureUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemperatureUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.TemperatureUpdate";
  }
  protected:
  explicit TemperatureUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 2,
    kTemperatureFieldNumber = 1,
  };
  // string units = 2;
  void clear_units();
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // double temperature = 1;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.TemperatureUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  double temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class HumidityUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.HumidityUpdate) */ {
 public:
  inline HumidityUpdate() : HumidityUpdate(nullptr) {}
  virtual ~HumidityUpdate();

  HumidityUpdate(const HumidityUpdate& from);
  HumidityUpdate(HumidityUpdate&& from) noexcept
    : HumidityUpdate() {
    *this = ::std::move(from);
  }

  inline HumidityUpdate& operator=(const HumidityUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline HumidityUpdate& operator=(HumidityUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HumidityUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumidityUpdate* internal_default_instance() {
    return reinterpret_cast<const HumidityUpdate*>(
               &_HumidityUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(HumidityUpdate& a, HumidityUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(HumidityUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HumidityUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HumidityUpdate* New() const final {
    return CreateMaybeMessage<HumidityUpdate>(nullptr);
  }

  HumidityUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HumidityUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HumidityUpdate& from);
  void MergeFrom(const HumidityUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumidityUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.HumidityUpdate";
  }
  protected:
  explicit HumidityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 2,
    kHumidityFieldNumber = 1,
  };
  // string units = 2;
  void clear_units();
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // double humidity = 1;
  void clear_humidity();
  double humidity() const;
  void set_humidity(double value);
  private:
  double _internal_humidity() const;
  void _internal_set_humidity(double value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.HumidityUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  double humidity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class NeuralUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.NeuralUpdate) */ {
 public:
  inline NeuralUpdate() : NeuralUpdate(nullptr) {}
  virtual ~NeuralUpdate();

  NeuralUpdate(const NeuralUpdate& from);
  NeuralUpdate(NeuralUpdate&& from) noexcept
    : NeuralUpdate() {
    *this = ::std::move(from);
  }

  inline NeuralUpdate& operator=(const NeuralUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline NeuralUpdate& operator=(NeuralUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NeuralUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NeuralUpdate* internal_default_instance() {
    return reinterpret_cast<const NeuralUpdate*>(
               &_NeuralUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(NeuralUpdate& a, NeuralUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(NeuralUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NeuralUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NeuralUpdate* New() const final {
    return CreateMaybeMessage<NeuralUpdate>(nullptr);
  }

  NeuralUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NeuralUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NeuralUpdate& from);
  void MergeFrom(const NeuralUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeuralUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.NeuralUpdate";
  }
  protected:
  explicit NeuralUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 1,
  };
  // repeated .BICgRPC.NeuralSample samples = 1;
  int samples_size() const;
  private:
  int _internal_samples_size() const;
  public:
  void clear_samples();
  ::BICgRPC::NeuralSample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::NeuralSample >*
      mutable_samples();
  private:
  const ::BICgRPC::NeuralSample& _internal_samples(int index) const;
  ::BICgRPC::NeuralSample* _internal_add_samples();
  public:
  const ::BICgRPC::NeuralSample& samples(int index) const;
  ::BICgRPC::NeuralSample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::NeuralSample >&
      samples() const;

  // @@protoc_insertion_point(class_scope:BICgRPC.NeuralUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::NeuralSample > samples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class NeuralSample PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.NeuralSample) */ {
 public:
  inline NeuralSample() : NeuralSample(nullptr) {}
  virtual ~NeuralSample();

  NeuralSample(const NeuralSample& from);
  NeuralSample(NeuralSample&& from) noexcept
    : NeuralSample() {
    *this = ::std::move(from);
  }

  inline NeuralSample& operator=(const NeuralSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline NeuralSample& operator=(NeuralSample&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NeuralSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NeuralSample* internal_default_instance() {
    return reinterpret_cast<const NeuralSample*>(
               &_NeuralSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(NeuralSample& a, NeuralSample& b) {
    a.Swap(&b);
  }
  inline void Swap(NeuralSample* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NeuralSample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NeuralSample* New() const final {
    return CreateMaybeMessage<NeuralSample>(nullptr);
  }

  NeuralSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NeuralSample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NeuralSample& from);
  void MergeFrom(const NeuralSample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeuralSample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.NeuralSample";
  }
  protected:
  explicit NeuralSample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasurementsFieldNumber = 2,
    kNumberOfMeasurementsFieldNumber = 1,
    kSupplyVoltageFieldNumber = 3,
    kStimulationNumberFieldNumber = 5,
    kIsConnectedFieldNumber = 4,
    kStimulationActiveFieldNumber = 6,
    kSampleCounterFieldNumber = 7,
  };
  // repeated double measurements = 2;
  int measurements_size() const;
  private:
  int _internal_measurements_size() const;
  public:
  void clear_measurements();
  private:
  double _internal_measurements(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_measurements() const;
  void _internal_add_measurements(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_measurements();
  public:
  double measurements(int index) const;
  void set_measurements(int index, double value);
  void add_measurements(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      measurements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_measurements();

  // uint32 numberOfMeasurements = 1;
  void clear_numberofmeasurements();
  ::PROTOBUF_NAMESPACE_ID::uint32 numberofmeasurements() const;
  void set_numberofmeasurements(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numberofmeasurements() const;
  void _internal_set_numberofmeasurements(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 supplyVoltage = 3;
  void clear_supplyvoltage();
  ::PROTOBUF_NAMESPACE_ID::uint32 supplyvoltage() const;
  void set_supplyvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_supplyvoltage() const;
  void _internal_set_supplyvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stimulationNumber = 5;
  void clear_stimulationnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 stimulationnumber() const;
  void set_stimulationnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stimulationnumber() const;
  void _internal_set_stimulationnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool isConnected = 4;
  void clear_isconnected();
  bool isconnected() const;
  void set_isconnected(bool value);
  private:
  bool _internal_isconnected() const;
  void _internal_set_isconnected(bool value);
  public:

  // bool stimulationActive = 6;
  void clear_stimulationactive();
  bool stimulationactive() const;
  void set_stimulationactive(bool value);
  private:
  bool _internal_stimulationactive() const;
  void _internal_set_stimulationactive(bool value);
  public:

  // uint32 sampleCounter = 7;
  void clear_samplecounter();
  ::PROTOBUF_NAMESPACE_ID::uint32 samplecounter() const;
  void set_samplecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_samplecounter() const;
  void _internal_set_samplecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.NeuralSample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > measurements_;
  mutable std::atomic<int> _measurements_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numberofmeasurements_;
  ::PROTOBUF_NAMESPACE_ID::uint32 supplyvoltage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stimulationnumber_;
  bool isconnected_;
  bool stimulationactive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 samplecounter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class ConnectionUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.ConnectionUpdate) */ {
 public:
  inline ConnectionUpdate() : ConnectionUpdate(nullptr) {}
  virtual ~ConnectionUpdate();

  ConnectionUpdate(const ConnectionUpdate& from);
  ConnectionUpdate(ConnectionUpdate&& from) noexcept
    : ConnectionUpdate() {
    *this = ::std::move(from);
  }

  inline ConnectionUpdate& operator=(const ConnectionUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionUpdate& operator=(ConnectionUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionUpdate* internal_default_instance() {
    return reinterpret_cast<const ConnectionUpdate*>(
               &_ConnectionUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ConnectionUpdate& a, ConnectionUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionUpdate* New() const final {
    return CreateMaybeMessage<ConnectionUpdate>(nullptr);
  }

  ConnectionUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionUpdate& from);
  void MergeFrom(const ConnectionUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.ConnectionUpdate";
  }
  protected:
  explicit ConnectionUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionTypeFieldNumber = 1,
    kIsConnectedFieldNumber = 2,
  };
  // string connectionType = 1;
  void clear_connectiontype();
  const std::string& connectiontype() const;
  void set_connectiontype(const std::string& value);
  void set_connectiontype(std::string&& value);
  void set_connectiontype(const char* value);
  void set_connectiontype(const char* value, size_t size);
  std::string* mutable_connectiontype();
  std::string* release_connectiontype();
  void set_allocated_connectiontype(std::string* connectiontype);
  private:
  const std::string& _internal_connectiontype() const;
  void _internal_set_connectiontype(const std::string& value);
  std::string* _internal_mutable_connectiontype();
  public:

  // bool isConnected = 2;
  void clear_isconnected();
  bool isconnected() const;
  void set_isconnected(bool value);
  private:
  bool _internal_isconnected() const;
  void _internal_set_isconnected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.ConnectionUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connectiontype_;
  bool isconnected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class PowerUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.PowerUpdate) */ {
 public:
  inline PowerUpdate() : PowerUpdate(nullptr) {}
  virtual ~PowerUpdate();

  PowerUpdate(const PowerUpdate& from);
  PowerUpdate(PowerUpdate&& from) noexcept
    : PowerUpdate() {
    *this = ::std::move(from);
  }

  inline PowerUpdate& operator=(const PowerUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerUpdate& operator=(PowerUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowerUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerUpdate* internal_default_instance() {
    return reinterpret_cast<const PowerUpdate*>(
               &_PowerUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PowerUpdate& a, PowerUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerUpdate* New() const final {
    return CreateMaybeMessage<PowerUpdate>(nullptr);
  }

  PowerUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowerUpdate& from);
  void MergeFrom(const PowerUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.PowerUpdate";
  }
  protected:
  explicit PowerUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterFieldNumber = 1,
    kUnitsFieldNumber = 3,
    kValueFieldNumber = 2,
  };
  // string parameter = 1;
  void clear_parameter();
  const std::string& parameter() const;
  void set_parameter(const std::string& value);
  void set_parameter(std::string&& value);
  void set_parameter(const char* value);
  void set_parameter(const char* value, size_t size);
  std::string* mutable_parameter();
  std::string* release_parameter();
  void set_allocated_parameter(std::string* parameter);
  private:
  const std::string& _internal_parameter() const;
  void _internal_set_parameter(const std::string& value);
  std::string* _internal_mutable_parameter();
  public:

  // string units = 3;
  void clear_units();
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.PowerUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class ErrorUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.ErrorUpdate) */ {
 public:
  inline ErrorUpdate() : ErrorUpdate(nullptr) {}
  virtual ~ErrorUpdate();

  ErrorUpdate(const ErrorUpdate& from);
  ErrorUpdate(ErrorUpdate&& from) noexcept
    : ErrorUpdate() {
    *this = ::std::move(from);
  }

  inline ErrorUpdate& operator=(const ErrorUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorUpdate& operator=(ErrorUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorUpdate* internal_default_instance() {
    return reinterpret_cast<const ErrorUpdate*>(
               &_ErrorUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ErrorUpdate& a, ErrorUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorUpdate* New() const final {
    return CreateMaybeMessage<ErrorUpdate>(nullptr);
  }

  ErrorUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorUpdate& from);
  void MergeFrom(const ErrorUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.ErrorUpdate";
  }
  protected:
  explicit ErrorUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.ErrorUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class Bridge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.Bridge) */ {
 public:
  inline Bridge() : Bridge(nullptr) {}
  virtual ~Bridge();

  Bridge(const Bridge& from);
  Bridge(Bridge&& from) noexcept
    : Bridge() {
    *this = ::std::move(from);
  }

  inline Bridge& operator=(const Bridge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bridge& operator=(Bridge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bridge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bridge* internal_default_instance() {
    return reinterpret_cast<const Bridge*>(
               &_Bridge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Bridge& a, Bridge& b) {
    a.Swap(&b);
  }
  inline void Swap(Bridge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bridge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bridge* New() const final {
    return CreateMaybeMessage<Bridge>(nullptr);
  }

  Bridge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bridge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bridge& from);
  void MergeFrom(const Bridge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bridge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.Bridge";
  }
  protected:
  explicit Bridge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kImplantTypeFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
    kFirmwareVersionFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string implantType = 2;
  void clear_implanttype();
  const std::string& implanttype() const;
  void set_implanttype(const std::string& value);
  void set_implanttype(std::string&& value);
  void set_implanttype(const char* value);
  void set_implanttype(const char* value, size_t size);
  std::string* mutable_implanttype();
  std::string* release_implanttype();
  void set_allocated_implanttype(std::string* implanttype);
  private:
  const std::string& _internal_implanttype() const;
  void _internal_set_implanttype(const std::string& value);
  std::string* _internal_mutable_implanttype();
  public:

  // string deviceId = 3;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string firmwareVersion = 4;
  void clear_firmwareversion();
  const std::string& firmwareversion() const;
  void set_firmwareversion(const std::string& value);
  void set_firmwareversion(std::string&& value);
  void set_firmwareversion(const char* value);
  void set_firmwareversion(const char* value, size_t size);
  std::string* mutable_firmwareversion();
  std::string* release_firmwareversion();
  void set_allocated_firmwareversion(std::string* firmwareversion);
  private:
  const std::string& _internal_firmwareversion() const;
  void _internal_set_firmwareversion(const std::string& value);
  std::string* _internal_mutable_firmwareversion();
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.Bridge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr implanttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmwareversion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class QueryBridgesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.QueryBridgesRequest) */ {
 public:
  inline QueryBridgesRequest() : QueryBridgesRequest(nullptr) {}
  virtual ~QueryBridgesRequest();

  QueryBridgesRequest(const QueryBridgesRequest& from);
  QueryBridgesRequest(QueryBridgesRequest&& from) noexcept
    : QueryBridgesRequest() {
    *this = ::std::move(from);
  }

  inline QueryBridgesRequest& operator=(const QueryBridgesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBridgesRequest& operator=(QueryBridgesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryBridgesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryBridgesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryBridgesRequest*>(
               &_QueryBridgesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(QueryBridgesRequest& a, QueryBridgesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBridgesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBridgesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryBridgesRequest* New() const final {
    return CreateMaybeMessage<QueryBridgesRequest>(nullptr);
  }

  QueryBridgesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryBridgesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryBridgesRequest& from);
  void MergeFrom(const QueryBridgesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryBridgesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.QueryBridgesRequest";
  }
  protected:
  explicit QueryBridgesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.QueryBridgesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class QueryBridgesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.QueryBridgesResponse) */ {
 public:
  inline QueryBridgesResponse() : QueryBridgesResponse(nullptr) {}
  virtual ~QueryBridgesResponse();

  QueryBridgesResponse(const QueryBridgesResponse& from);
  QueryBridgesResponse(QueryBridgesResponse&& from) noexcept
    : QueryBridgesResponse() {
    *this = ::std::move(from);
  }

  inline QueryBridgesResponse& operator=(const QueryBridgesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBridgesResponse& operator=(QueryBridgesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryBridgesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryBridgesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryBridgesResponse*>(
               &_QueryBridgesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(QueryBridgesResponse& a, QueryBridgesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBridgesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBridgesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryBridgesResponse* New() const final {
    return CreateMaybeMessage<QueryBridgesResponse>(nullptr);
  }

  QueryBridgesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryBridgesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryBridgesResponse& from);
  void MergeFrom(const QueryBridgesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryBridgesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.QueryBridgesResponse";
  }
  protected:
  explicit QueryBridgesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBridgesFieldNumber = 1,
  };
  // repeated .BICgRPC.Bridge bridges = 1;
  int bridges_size() const;
  private:
  int _internal_bridges_size() const;
  public:
  void clear_bridges();
  ::BICgRPC::Bridge* mutable_bridges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::Bridge >*
      mutable_bridges();
  private:
  const ::BICgRPC::Bridge& _internal_bridges(int index) const;
  ::BICgRPC::Bridge* _internal_add_bridges();
  public:
  const ::BICgRPC::Bridge& bridges(int index) const;
  ::BICgRPC::Bridge* add_bridges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::Bridge >&
      bridges() const;

  // @@protoc_insertion_point(class_scope:BICgRPC.QueryBridgesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::Bridge > bridges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class ConnectBridgeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.ConnectBridgeRequest) */ {
 public:
  inline ConnectBridgeRequest() : ConnectBridgeRequest(nullptr) {}
  virtual ~ConnectBridgeRequest();

  ConnectBridgeRequest(const ConnectBridgeRequest& from);
  ConnectBridgeRequest(ConnectBridgeRequest&& from) noexcept
    : ConnectBridgeRequest() {
    *this = ::std::move(from);
  }

  inline ConnectBridgeRequest& operator=(const ConnectBridgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectBridgeRequest& operator=(ConnectBridgeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectBridgeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectBridgeRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectBridgeRequest*>(
               &_ConnectBridgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ConnectBridgeRequest& a, ConnectBridgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectBridgeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectBridgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectBridgeRequest* New() const final {
    return CreateMaybeMessage<ConnectBridgeRequest>(nullptr);
  }

  ConnectBridgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectBridgeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectBridgeRequest& from);
  void MergeFrom(const ConnectBridgeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectBridgeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.ConnectBridgeRequest";
  }
  protected:
  explicit ConnectBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kParametersFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Any parameters = 2;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const PROTOBUF_NAMESPACE_ID::Any& parameters() const;
  PROTOBUF_NAMESPACE_ID::Any* release_parameters();
  PROTOBUF_NAMESPACE_ID::Any* mutable_parameters();
  void set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Any* parameters);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_parameters() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      PROTOBUF_NAMESPACE_ID::Any* parameters);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_parameters();

  // @@protoc_insertion_point(class_scope:BICgRPC.ConnectBridgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Any* parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class ConnectBridgeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.ConnectBridgeResponse) */ {
 public:
  inline ConnectBridgeResponse() : ConnectBridgeResponse(nullptr) {}
  virtual ~ConnectBridgeResponse();

  ConnectBridgeResponse(const ConnectBridgeResponse& from);
  ConnectBridgeResponse(ConnectBridgeResponse&& from) noexcept
    : ConnectBridgeResponse() {
    *this = ::std::move(from);
  }

  inline ConnectBridgeResponse& operator=(const ConnectBridgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectBridgeResponse& operator=(ConnectBridgeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectBridgeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectBridgeResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectBridgeResponse*>(
               &_ConnectBridgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ConnectBridgeResponse& a, ConnectBridgeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectBridgeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectBridgeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectBridgeResponse* New() const final {
    return CreateMaybeMessage<ConnectBridgeResponse>(nullptr);
  }

  ConnectBridgeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectBridgeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectBridgeResponse& from);
  void MergeFrom(const ConnectBridgeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectBridgeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.ConnectBridgeResponse";
  }
  protected:
  explicit ConnectBridgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDetailsFieldNumber = 3,
    kConnectionStatusFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Any details = 3;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const PROTOBUF_NAMESPACE_ID::Any& details() const;
  PROTOBUF_NAMESPACE_ID::Any* release_details();
  PROTOBUF_NAMESPACE_ID::Any* mutable_details();
  void set_allocated_details(PROTOBUF_NAMESPACE_ID::Any* details);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_details() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      PROTOBUF_NAMESPACE_ID::Any* details);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_details();

  // .BICgRPC.ConnectBridgeStatus connection_status = 2;
  void clear_connection_status();
  ::BICgRPC::ConnectBridgeStatus connection_status() const;
  void set_connection_status(::BICgRPC::ConnectBridgeStatus value);
  private:
  ::BICgRPC::ConnectBridgeStatus _internal_connection_status() const;
  void _internal_set_connection_status(::BICgRPC::ConnectBridgeStatus value);
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.ConnectBridgeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Any* details_;
  int connection_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class DescribeBridgeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.DescribeBridgeRequest) */ {
 public:
  inline DescribeBridgeRequest() : DescribeBridgeRequest(nullptr) {}
  virtual ~DescribeBridgeRequest();

  DescribeBridgeRequest(const DescribeBridgeRequest& from);
  DescribeBridgeRequest(DescribeBridgeRequest&& from) noexcept
    : DescribeBridgeRequest() {
    *this = ::std::move(from);
  }

  inline DescribeBridgeRequest& operator=(const DescribeBridgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeBridgeRequest& operator=(DescribeBridgeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeBridgeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeBridgeRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeBridgeRequest*>(
               &_DescribeBridgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DescribeBridgeRequest& a, DescribeBridgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeBridgeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeBridgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeBridgeRequest* New() const final {
    return CreateMaybeMessage<DescribeBridgeRequest>(nullptr);
  }

  DescribeBridgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeBridgeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeBridgeRequest& from);
  void MergeFrom(const DescribeBridgeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeBridgeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.DescribeBridgeRequest";
  }
  protected:
  explicit DescribeBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.DescribeBridgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class DescribeBridgeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.DescribeBridgeResponse) */ {
 public:
  inline DescribeBridgeResponse() : DescribeBridgeResponse(nullptr) {}
  virtual ~DescribeBridgeResponse();

  DescribeBridgeResponse(const DescribeBridgeResponse& from);
  DescribeBridgeResponse(DescribeBridgeResponse&& from) noexcept
    : DescribeBridgeResponse() {
    *this = ::std::move(from);
  }

  inline DescribeBridgeResponse& operator=(const DescribeBridgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeBridgeResponse& operator=(DescribeBridgeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeBridgeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeBridgeResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeBridgeResponse*>(
               &_DescribeBridgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(DescribeBridgeResponse& a, DescribeBridgeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeBridgeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescribeBridgeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeBridgeResponse* New() const final {
    return CreateMaybeMessage<DescribeBridgeResponse>(nullptr);
  }

  DescribeBridgeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeBridgeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeBridgeResponse& from);
  void MergeFrom(const DescribeBridgeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeBridgeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.DescribeBridgeResponse";
  }
  protected:
  explicit DescribeBridgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDetailsFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .BICgRPC.Bridge details = 2;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::BICgRPC::Bridge& details() const;
  ::BICgRPC::Bridge* release_details();
  ::BICgRPC::Bridge* mutable_details();
  void set_allocated_details(::BICgRPC::Bridge* details);
  private:
  const ::BICgRPC::Bridge& _internal_details() const;
  ::BICgRPC::Bridge* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::BICgRPC::Bridge* details);
  ::BICgRPC::Bridge* unsafe_arena_release_details();

  // .google.protobuf.Any error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const PROTOBUF_NAMESPACE_ID::Any& error() const;
  PROTOBUF_NAMESPACE_ID::Any* release_error();
  PROTOBUF_NAMESPACE_ID::Any* mutable_error();
  void set_allocated_error(PROTOBUF_NAMESPACE_ID::Any* error);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_error() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      PROTOBUF_NAMESPACE_ID::Any* error);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:BICgRPC.DescribeBridgeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::BICgRPC::Bridge* details_;
  PROTOBUF_NAMESPACE_ID::Any* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// -------------------------------------------------------------------

class DisconnectBridgeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BICgRPC.DisconnectBridgeRequest) */ {
 public:
  inline DisconnectBridgeRequest() : DisconnectBridgeRequest(nullptr) {}
  virtual ~DisconnectBridgeRequest();

  DisconnectBridgeRequest(const DisconnectBridgeRequest& from);
  DisconnectBridgeRequest(DisconnectBridgeRequest&& from) noexcept
    : DisconnectBridgeRequest() {
    *this = ::std::move(from);
  }

  inline DisconnectBridgeRequest& operator=(const DisconnectBridgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectBridgeRequest& operator=(DisconnectBridgeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisconnectBridgeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectBridgeRequest* internal_default_instance() {
    return reinterpret_cast<const DisconnectBridgeRequest*>(
               &_DisconnectBridgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DisconnectBridgeRequest& a, DisconnectBridgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectBridgeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisconnectBridgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisconnectBridgeRequest* New() const final {
    return CreateMaybeMessage<DisconnectBridgeRequest>(nullptr);
  }

  DisconnectBridgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectBridgeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisconnectBridgeRequest& from);
  void MergeFrom(const DisconnectBridgeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectBridgeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BICgRPC.DisconnectBridgeRequest";
  }
  protected:
  explicit DisconnectBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BICgRPC_2eproto);
    return ::descriptor_table_BICgRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:BICgRPC.DisconnectBridgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BICgRPC_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// bicSuccessReply

// -------------------------------------------------------------------

// ScanDevicesRequest

// string bridgeName = 1;
inline void ScanDevicesRequest::clear_bridgename() {
  bridgename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScanDevicesRequest::bridgename() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ScanDevicesRequest.bridgeName)
  return _internal_bridgename();
}
inline void ScanDevicesRequest::set_bridgename(const std::string& value) {
  _internal_set_bridgename(value);
  // @@protoc_insertion_point(field_set:BICgRPC.ScanDevicesRequest.bridgeName)
}
inline std::string* ScanDevicesRequest::mutable_bridgename() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.ScanDevicesRequest.bridgeName)
  return _internal_mutable_bridgename();
}
inline const std::string& ScanDevicesRequest::_internal_bridgename() const {
  return bridgename_.Get();
}
inline void ScanDevicesRequest::_internal_set_bridgename(const std::string& value) {
  
  bridgename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScanDevicesRequest::set_bridgename(std::string&& value) {
  
  bridgename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.ScanDevicesRequest.bridgeName)
}
inline void ScanDevicesRequest::set_bridgename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bridgename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.ScanDevicesRequest.bridgeName)
}
inline void ScanDevicesRequest::set_bridgename(const char* value,
    size_t size) {
  
  bridgename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.ScanDevicesRequest.bridgeName)
}
inline std::string* ScanDevicesRequest::_internal_mutable_bridgename() {
  
  return bridgename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScanDevicesRequest::release_bridgename() {
  // @@protoc_insertion_point(field_release:BICgRPC.ScanDevicesRequest.bridgeName)
  return bridgename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanDevicesRequest::set_allocated_bridgename(std::string* bridgename) {
  if (bridgename != nullptr) {
    
  } else {
    
  }
  bridgename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bridgename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.ScanDevicesRequest.bridgeName)
}

// -------------------------------------------------------------------

// ScanDevicesReply

// string name = 1;
inline void ScanDevicesReply::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScanDevicesReply::name() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ScanDevicesReply.name)
  return _internal_name();
}
inline void ScanDevicesReply::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BICgRPC.ScanDevicesReply.name)
}
inline std::string* ScanDevicesReply::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.ScanDevicesReply.name)
  return _internal_mutable_name();
}
inline const std::string& ScanDevicesReply::_internal_name() const {
  return name_.Get();
}
inline void ScanDevicesReply::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScanDevicesReply::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.ScanDevicesReply.name)
}
inline void ScanDevicesReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.ScanDevicesReply.name)
}
inline void ScanDevicesReply::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.ScanDevicesReply.name)
}
inline std::string* ScanDevicesReply::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScanDevicesReply::release_name() {
  // @@protoc_insertion_point(field_release:BICgRPC.ScanDevicesReply.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanDevicesReply::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.ScanDevicesReply.name)
}

// .BICgRPC.bicGetImplantInfoReply discoveredDevice = 2;
inline bool ScanDevicesReply::_internal_has_discovereddevice() const {
  return this != internal_default_instance() && discovereddevice_ != nullptr;
}
inline bool ScanDevicesReply::has_discovereddevice() const {
  return _internal_has_discovereddevice();
}
inline void ScanDevicesReply::clear_discovereddevice() {
  if (GetArena() == nullptr && discovereddevice_ != nullptr) {
    delete discovereddevice_;
  }
  discovereddevice_ = nullptr;
}
inline const ::BICgRPC::bicGetImplantInfoReply& ScanDevicesReply::_internal_discovereddevice() const {
  const ::BICgRPC::bicGetImplantInfoReply* p = discovereddevice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BICgRPC::bicGetImplantInfoReply*>(
      &::BICgRPC::_bicGetImplantInfoReply_default_instance_);
}
inline const ::BICgRPC::bicGetImplantInfoReply& ScanDevicesReply::discovereddevice() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ScanDevicesReply.discoveredDevice)
  return _internal_discovereddevice();
}
inline void ScanDevicesReply::unsafe_arena_set_allocated_discovereddevice(
    ::BICgRPC::bicGetImplantInfoReply* discovereddevice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discovereddevice_);
  }
  discovereddevice_ = discovereddevice;
  if (discovereddevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BICgRPC.ScanDevicesReply.discoveredDevice)
}
inline ::BICgRPC::bicGetImplantInfoReply* ScanDevicesReply::release_discovereddevice() {
  
  ::BICgRPC::bicGetImplantInfoReply* temp = discovereddevice_;
  discovereddevice_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BICgRPC::bicGetImplantInfoReply* ScanDevicesReply::unsafe_arena_release_discovereddevice() {
  // @@protoc_insertion_point(field_release:BICgRPC.ScanDevicesReply.discoveredDevice)
  
  ::BICgRPC::bicGetImplantInfoReply* temp = discovereddevice_;
  discovereddevice_ = nullptr;
  return temp;
}
inline ::BICgRPC::bicGetImplantInfoReply* ScanDevicesReply::_internal_mutable_discovereddevice() {
  
  if (discovereddevice_ == nullptr) {
    auto* p = CreateMaybeMessage<::BICgRPC::bicGetImplantInfoReply>(GetArena());
    discovereddevice_ = p;
  }
  return discovereddevice_;
}
inline ::BICgRPC::bicGetImplantInfoReply* ScanDevicesReply::mutable_discovereddevice() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.ScanDevicesReply.discoveredDevice)
  return _internal_mutable_discovereddevice();
}
inline void ScanDevicesReply::set_allocated_discovereddevice(::BICgRPC::bicGetImplantInfoReply* discovereddevice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete discovereddevice_;
  }
  if (discovereddevice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(discovereddevice);
    if (message_arena != submessage_arena) {
      discovereddevice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discovereddevice, submessage_arena);
    }
    
  } else {
    
  }
  discovereddevice_ = discovereddevice;
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.ScanDevicesReply.discoveredDevice)
}

// -------------------------------------------------------------------

// ConnectDeviceRequest

// string deviceAddress = 1;
inline void ConnectDeviceRequest::clear_deviceaddress() {
  deviceaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectDeviceRequest::deviceaddress() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ConnectDeviceRequest.deviceAddress)
  return _internal_deviceaddress();
}
inline void ConnectDeviceRequest::set_deviceaddress(const std::string& value) {
  _internal_set_deviceaddress(value);
  // @@protoc_insertion_point(field_set:BICgRPC.ConnectDeviceRequest.deviceAddress)
}
inline std::string* ConnectDeviceRequest::mutable_deviceaddress() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.ConnectDeviceRequest.deviceAddress)
  return _internal_mutable_deviceaddress();
}
inline const std::string& ConnectDeviceRequest::_internal_deviceaddress() const {
  return deviceaddress_.Get();
}
inline void ConnectDeviceRequest::_internal_set_deviceaddress(const std::string& value) {
  
  deviceaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectDeviceRequest::set_deviceaddress(std::string&& value) {
  
  deviceaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.ConnectDeviceRequest.deviceAddress)
}
inline void ConnectDeviceRequest::set_deviceaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.ConnectDeviceRequest.deviceAddress)
}
inline void ConnectDeviceRequest::set_deviceaddress(const char* value,
    size_t size) {
  
  deviceaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.ConnectDeviceRequest.deviceAddress)
}
inline std::string* ConnectDeviceRequest::_internal_mutable_deviceaddress() {
  
  return deviceaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectDeviceRequest::release_deviceaddress() {
  // @@protoc_insertion_point(field_release:BICgRPC.ConnectDeviceRequest.deviceAddress)
  return deviceaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectDeviceRequest::set_allocated_deviceaddress(std::string* deviceaddress) {
  if (deviceaddress != nullptr) {
    
  } else {
    
  }
  deviceaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.ConnectDeviceRequest.deviceAddress)
}

// string logFileName = 2;
inline void ConnectDeviceRequest::clear_logfilename() {
  logfilename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectDeviceRequest::logfilename() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ConnectDeviceRequest.logFileName)
  return _internal_logfilename();
}
inline void ConnectDeviceRequest::set_logfilename(const std::string& value) {
  _internal_set_logfilename(value);
  // @@protoc_insertion_point(field_set:BICgRPC.ConnectDeviceRequest.logFileName)
}
inline std::string* ConnectDeviceRequest::mutable_logfilename() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.ConnectDeviceRequest.logFileName)
  return _internal_mutable_logfilename();
}
inline const std::string& ConnectDeviceRequest::_internal_logfilename() const {
  return logfilename_.Get();
}
inline void ConnectDeviceRequest::_internal_set_logfilename(const std::string& value) {
  
  logfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectDeviceRequest::set_logfilename(std::string&& value) {
  
  logfilename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.ConnectDeviceRequest.logFileName)
}
inline void ConnectDeviceRequest::set_logfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.ConnectDeviceRequest.logFileName)
}
inline void ConnectDeviceRequest::set_logfilename(const char* value,
    size_t size) {
  
  logfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.ConnectDeviceRequest.logFileName)
}
inline std::string* ConnectDeviceRequest::_internal_mutable_logfilename() {
  
  return logfilename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectDeviceRequest::release_logfilename() {
  // @@protoc_insertion_point(field_release:BICgRPC.ConnectDeviceRequest.logFileName)
  return logfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectDeviceRequest::set_allocated_logfilename(std::string* logfilename) {
  if (logfilename != nullptr) {
    
  } else {
    
  }
  logfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.ConnectDeviceRequest.logFileName)
}

// -------------------------------------------------------------------

// bicGetImplantInfoRequest

// bool updateCachedInfo = 1;
inline void bicGetImplantInfoRequest::clear_updatecachedinfo() {
  updatecachedinfo_ = false;
}
inline bool bicGetImplantInfoRequest::_internal_updatecachedinfo() const {
  return updatecachedinfo_;
}
inline bool bicGetImplantInfoRequest::updatecachedinfo() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoRequest.updateCachedInfo)
  return _internal_updatecachedinfo();
}
inline void bicGetImplantInfoRequest::_internal_set_updatecachedinfo(bool value) {
  
  updatecachedinfo_ = value;
}
inline void bicGetImplantInfoRequest::set_updatecachedinfo(bool value) {
  _internal_set_updatecachedinfo(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoRequest.updateCachedInfo)
}

// -------------------------------------------------------------------

// bicGetImplantInfoReply_bicChannelInfo

// bool canMeasure = 1;
inline void bicGetImplantInfoReply_bicChannelInfo::clear_canmeasure() {
  canmeasure_ = false;
}
inline bool bicGetImplantInfoReply_bicChannelInfo::_internal_canmeasure() const {
  return canmeasure_;
}
inline bool bicGetImplantInfoReply_bicChannelInfo::canmeasure() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.canMeasure)
  return _internal_canmeasure();
}
inline void bicGetImplantInfoReply_bicChannelInfo::_internal_set_canmeasure(bool value) {
  
  canmeasure_ = value;
}
inline void bicGetImplantInfoReply_bicChannelInfo::set_canmeasure(bool value) {
  _internal_set_canmeasure(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.canMeasure)
}

// double measureValueMin = 2;
inline void bicGetImplantInfoReply_bicChannelInfo::clear_measurevaluemin() {
  measurevaluemin_ = 0;
}
inline double bicGetImplantInfoReply_bicChannelInfo::_internal_measurevaluemin() const {
  return measurevaluemin_;
}
inline double bicGetImplantInfoReply_bicChannelInfo::measurevaluemin() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.measureValueMin)
  return _internal_measurevaluemin();
}
inline void bicGetImplantInfoReply_bicChannelInfo::_internal_set_measurevaluemin(double value) {
  
  measurevaluemin_ = value;
}
inline void bicGetImplantInfoReply_bicChannelInfo::set_measurevaluemin(double value) {
  _internal_set_measurevaluemin(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.measureValueMin)
}

// double measureValueMax = 3;
inline void bicGetImplantInfoReply_bicChannelInfo::clear_measurevaluemax() {
  measurevaluemax_ = 0;
}
inline double bicGetImplantInfoReply_bicChannelInfo::_internal_measurevaluemax() const {
  return measurevaluemax_;
}
inline double bicGetImplantInfoReply_bicChannelInfo::measurevaluemax() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.measureValueMax)
  return _internal_measurevaluemax();
}
inline void bicGetImplantInfoReply_bicChannelInfo::_internal_set_measurevaluemax(double value) {
  
  measurevaluemax_ = value;
}
inline void bicGetImplantInfoReply_bicChannelInfo::set_measurevaluemax(double value) {
  _internal_set_measurevaluemax(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.measureValueMax)
}

// bool canStimulate = 4;
inline void bicGetImplantInfoReply_bicChannelInfo::clear_canstimulate() {
  canstimulate_ = false;
}
inline bool bicGetImplantInfoReply_bicChannelInfo::_internal_canstimulate() const {
  return canstimulate_;
}
inline bool bicGetImplantInfoReply_bicChannelInfo::canstimulate() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.canStimulate)
  return _internal_canstimulate();
}
inline void bicGetImplantInfoReply_bicChannelInfo::_internal_set_canstimulate(bool value) {
  
  canstimulate_ = value;
}
inline void bicGetImplantInfoReply_bicChannelInfo::set_canstimulate(bool value) {
  _internal_set_canstimulate(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.canStimulate)
}

// .BICgRPC.bicGetImplantInfoReply.bicChannelInfo.UnitType stimulationUnit = 5;
inline void bicGetImplantInfoReply_bicChannelInfo::clear_stimulationunit() {
  stimulationunit_ = 0;
}
inline ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType bicGetImplantInfoReply_bicChannelInfo::_internal_stimulationunit() const {
  return static_cast< ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType >(stimulationunit_);
}
inline ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType bicGetImplantInfoReply_bicChannelInfo::stimulationunit() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.stimulationUnit)
  return _internal_stimulationunit();
}
inline void bicGetImplantInfoReply_bicChannelInfo::_internal_set_stimulationunit(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType value) {
  
  stimulationunit_ = value;
}
inline void bicGetImplantInfoReply_bicChannelInfo::set_stimulationunit(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType value) {
  _internal_set_stimulationunit(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.stimulationUnit)
}

// double stimValueMin = 6;
inline void bicGetImplantInfoReply_bicChannelInfo::clear_stimvaluemin() {
  stimvaluemin_ = 0;
}
inline double bicGetImplantInfoReply_bicChannelInfo::_internal_stimvaluemin() const {
  return stimvaluemin_;
}
inline double bicGetImplantInfoReply_bicChannelInfo::stimvaluemin() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.stimValueMin)
  return _internal_stimvaluemin();
}
inline void bicGetImplantInfoReply_bicChannelInfo::_internal_set_stimvaluemin(double value) {
  
  stimvaluemin_ = value;
}
inline void bicGetImplantInfoReply_bicChannelInfo::set_stimvaluemin(double value) {
  _internal_set_stimvaluemin(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.stimValueMin)
}

// double stimValueMax = 7;
inline void bicGetImplantInfoReply_bicChannelInfo::clear_stimvaluemax() {
  stimvaluemax_ = 0;
}
inline double bicGetImplantInfoReply_bicChannelInfo::_internal_stimvaluemax() const {
  return stimvaluemax_;
}
inline double bicGetImplantInfoReply_bicChannelInfo::stimvaluemax() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.stimValueMax)
  return _internal_stimvaluemax();
}
inline void bicGetImplantInfoReply_bicChannelInfo::_internal_set_stimvaluemax(double value) {
  
  stimvaluemax_ = value;
}
inline void bicGetImplantInfoReply_bicChannelInfo::set_stimvaluemax(double value) {
  _internal_set_stimvaluemax(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.stimValueMax)
}

// bool canMeasureImpedance = 8;
inline void bicGetImplantInfoReply_bicChannelInfo::clear_canmeasureimpedance() {
  canmeasureimpedance_ = false;
}
inline bool bicGetImplantInfoReply_bicChannelInfo::_internal_canmeasureimpedance() const {
  return canmeasureimpedance_;
}
inline bool bicGetImplantInfoReply_bicChannelInfo::canmeasureimpedance() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.canMeasureImpedance)
  return _internal_canmeasureimpedance();
}
inline void bicGetImplantInfoReply_bicChannelInfo::_internal_set_canmeasureimpedance(bool value) {
  
  canmeasureimpedance_ = value;
}
inline void bicGetImplantInfoReply_bicChannelInfo::set_canmeasureimpedance(bool value) {
  _internal_set_canmeasureimpedance(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.bicChannelInfo.canMeasureImpedance)
}

// -------------------------------------------------------------------

// bicGetImplantInfoReply

// string firmwareVersion = 1;
inline void bicGetImplantInfoReply::clear_firmwareversion() {
  firmwareversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bicGetImplantInfoReply::firmwareversion() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.firmwareVersion)
  return _internal_firmwareversion();
}
inline void bicGetImplantInfoReply::set_firmwareversion(const std::string& value) {
  _internal_set_firmwareversion(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.firmwareVersion)
}
inline std::string* bicGetImplantInfoReply::mutable_firmwareversion() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicGetImplantInfoReply.firmwareVersion)
  return _internal_mutable_firmwareversion();
}
inline const std::string& bicGetImplantInfoReply::_internal_firmwareversion() const {
  return firmwareversion_.Get();
}
inline void bicGetImplantInfoReply::_internal_set_firmwareversion(const std::string& value) {
  
  firmwareversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bicGetImplantInfoReply::set_firmwareversion(std::string&& value) {
  
  firmwareversion_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.bicGetImplantInfoReply.firmwareVersion)
}
inline void bicGetImplantInfoReply::set_firmwareversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmwareversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.bicGetImplantInfoReply.firmwareVersion)
}
inline void bicGetImplantInfoReply::set_firmwareversion(const char* value,
    size_t size) {
  
  firmwareversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.bicGetImplantInfoReply.firmwareVersion)
}
inline std::string* bicGetImplantInfoReply::_internal_mutable_firmwareversion() {
  
  return firmwareversion_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bicGetImplantInfoReply::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:BICgRPC.bicGetImplantInfoReply.firmwareVersion)
  return firmwareversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bicGetImplantInfoReply::set_allocated_firmwareversion(std::string* firmwareversion) {
  if (firmwareversion != nullptr) {
    
  } else {
    
  }
  firmwareversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmwareversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.bicGetImplantInfoReply.firmwareVersion)
}

// string deviceType = 2;
inline void bicGetImplantInfoReply::clear_devicetype() {
  devicetype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bicGetImplantInfoReply::devicetype() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.deviceType)
  return _internal_devicetype();
}
inline void bicGetImplantInfoReply::set_devicetype(const std::string& value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.deviceType)
}
inline std::string* bicGetImplantInfoReply::mutable_devicetype() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicGetImplantInfoReply.deviceType)
  return _internal_mutable_devicetype();
}
inline const std::string& bicGetImplantInfoReply::_internal_devicetype() const {
  return devicetype_.Get();
}
inline void bicGetImplantInfoReply::_internal_set_devicetype(const std::string& value) {
  
  devicetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bicGetImplantInfoReply::set_devicetype(std::string&& value) {
  
  devicetype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.bicGetImplantInfoReply.deviceType)
}
inline void bicGetImplantInfoReply::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.bicGetImplantInfoReply.deviceType)
}
inline void bicGetImplantInfoReply::set_devicetype(const char* value,
    size_t size) {
  
  devicetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.bicGetImplantInfoReply.deviceType)
}
inline std::string* bicGetImplantInfoReply::_internal_mutable_devicetype() {
  
  return devicetype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bicGetImplantInfoReply::release_devicetype() {
  // @@protoc_insertion_point(field_release:BICgRPC.bicGetImplantInfoReply.deviceType)
  return devicetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bicGetImplantInfoReply::set_allocated_devicetype(std::string* devicetype) {
  if (devicetype != nullptr) {
    
  } else {
    
  }
  devicetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.bicGetImplantInfoReply.deviceType)
}

// string deviceId = 3;
inline void bicGetImplantInfoReply::clear_deviceid() {
  deviceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bicGetImplantInfoReply::deviceid() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.deviceId)
  return _internal_deviceid();
}
inline void bicGetImplantInfoReply::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.deviceId)
}
inline std::string* bicGetImplantInfoReply::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicGetImplantInfoReply.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& bicGetImplantInfoReply::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void bicGetImplantInfoReply::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bicGetImplantInfoReply::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.bicGetImplantInfoReply.deviceId)
}
inline void bicGetImplantInfoReply::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.bicGetImplantInfoReply.deviceId)
}
inline void bicGetImplantInfoReply::set_deviceid(const char* value,
    size_t size) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.bicGetImplantInfoReply.deviceId)
}
inline std::string* bicGetImplantInfoReply::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bicGetImplantInfoReply::release_deviceid() {
  // @@protoc_insertion_point(field_release:BICgRPC.bicGetImplantInfoReply.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bicGetImplantInfoReply::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.bicGetImplantInfoReply.deviceId)
}

// repeated .BICgRPC.bicGetImplantInfoReply.bicChannelInfo channelInfoList = 4;
inline int bicGetImplantInfoReply::_internal_channelinfolist_size() const {
  return channelinfolist_.size();
}
inline int bicGetImplantInfoReply::channelinfolist_size() const {
  return _internal_channelinfolist_size();
}
inline void bicGetImplantInfoReply::clear_channelinfolist() {
  channelinfolist_.Clear();
}
inline ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo* bicGetImplantInfoReply::mutable_channelinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicGetImplantInfoReply.channelInfoList)
  return channelinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo >*
bicGetImplantInfoReply::mutable_channelinfolist() {
  // @@protoc_insertion_point(field_mutable_list:BICgRPC.bicGetImplantInfoReply.channelInfoList)
  return &channelinfolist_;
}
inline const ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo& bicGetImplantInfoReply::_internal_channelinfolist(int index) const {
  return channelinfolist_.Get(index);
}
inline const ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo& bicGetImplantInfoReply::channelinfolist(int index) const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.channelInfoList)
  return _internal_channelinfolist(index);
}
inline ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo* bicGetImplantInfoReply::_internal_add_channelinfolist() {
  return channelinfolist_.Add();
}
inline ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo* bicGetImplantInfoReply::add_channelinfolist() {
  // @@protoc_insertion_point(field_add:BICgRPC.bicGetImplantInfoReply.channelInfoList)
  return _internal_add_channelinfolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo >&
bicGetImplantInfoReply::channelinfolist() const {
  // @@protoc_insertion_point(field_list:BICgRPC.bicGetImplantInfoReply.channelInfoList)
  return channelinfolist_;
}

// uint32 channelCount = 5;
inline void bicGetImplantInfoReply::clear_channelcount() {
  channelcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicGetImplantInfoReply::_internal_channelcount() const {
  return channelcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicGetImplantInfoReply::channelcount() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.channelCount)
  return _internal_channelcount();
}
inline void bicGetImplantInfoReply::_internal_set_channelcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channelcount_ = value;
}
inline void bicGetImplantInfoReply::set_channelcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channelcount(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.channelCount)
}

// uint32 measurementChannelCount = 6;
inline void bicGetImplantInfoReply::clear_measurementchannelcount() {
  measurementchannelcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicGetImplantInfoReply::_internal_measurementchannelcount() const {
  return measurementchannelcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicGetImplantInfoReply::measurementchannelcount() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.measurementChannelCount)
  return _internal_measurementchannelcount();
}
inline void bicGetImplantInfoReply::_internal_set_measurementchannelcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  measurementchannelcount_ = value;
}
inline void bicGetImplantInfoReply::set_measurementchannelcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_measurementchannelcount(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.measurementChannelCount)
}

// uint32 stimulationChannelCount = 7;
inline void bicGetImplantInfoReply::clear_stimulationchannelcount() {
  stimulationchannelcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicGetImplantInfoReply::_internal_stimulationchannelcount() const {
  return stimulationchannelcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicGetImplantInfoReply::stimulationchannelcount() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.stimulationChannelCount)
  return _internal_stimulationchannelcount();
}
inline void bicGetImplantInfoReply::_internal_set_stimulationchannelcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stimulationchannelcount_ = value;
}
inline void bicGetImplantInfoReply::set_stimulationchannelcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stimulationchannelcount(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.stimulationChannelCount)
}

// uint32 samplingRate = 8;
inline void bicGetImplantInfoReply::clear_samplingrate() {
  samplingrate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicGetImplantInfoReply::_internal_samplingrate() const {
  return samplingrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicGetImplantInfoReply::samplingrate() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.samplingRate)
  return _internal_samplingrate();
}
inline void bicGetImplantInfoReply::_internal_set_samplingrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  samplingrate_ = value;
}
inline void bicGetImplantInfoReply::set_samplingrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_samplingrate(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.samplingRate)
}

// string success = 9;
inline void bicGetImplantInfoReply::clear_success() {
  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bicGetImplantInfoReply::success() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImplantInfoReply.success)
  return _internal_success();
}
inline void bicGetImplantInfoReply::set_success(const std::string& value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImplantInfoReply.success)
}
inline std::string* bicGetImplantInfoReply::mutable_success() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicGetImplantInfoReply.success)
  return _internal_mutable_success();
}
inline const std::string& bicGetImplantInfoReply::_internal_success() const {
  return success_.Get();
}
inline void bicGetImplantInfoReply::_internal_set_success(const std::string& value) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bicGetImplantInfoReply::set_success(std::string&& value) {
  
  success_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.bicGetImplantInfoReply.success)
}
inline void bicGetImplantInfoReply::set_success(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.bicGetImplantInfoReply.success)
}
inline void bicGetImplantInfoReply::set_success(const char* value,
    size_t size) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.bicGetImplantInfoReply.success)
}
inline std::string* bicGetImplantInfoReply::_internal_mutable_success() {
  
  return success_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bicGetImplantInfoReply::release_success() {
  // @@protoc_insertion_point(field_release:BICgRPC.bicGetImplantInfoReply.success)
  return success_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bicGetImplantInfoReply::set_allocated_success(std::string* success) {
  if (success != nullptr) {
    
  } else {
    
  }
  success_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), success,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.bicGetImplantInfoReply.success)
}

// -------------------------------------------------------------------

// bicSetStreamEnable

// bool enable = 1;
inline void bicSetStreamEnable::clear_enable() {
  enable_ = false;
}
inline bool bicSetStreamEnable::_internal_enable() const {
  return enable_;
}
inline bool bicSetStreamEnable::enable() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicSetStreamEnable.enable)
  return _internal_enable();
}
inline void bicSetStreamEnable::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void bicSetStreamEnable::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicSetStreamEnable.enable)
}

// -------------------------------------------------------------------

// bicGetImpedanceRequest

// uint32 channel = 1;
inline void bicGetImpedanceRequest::clear_channel() {
  channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicGetImpedanceRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicGetImpedanceRequest::channel() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImpedanceRequest.channel)
  return _internal_channel();
}
inline void bicGetImpedanceRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_ = value;
}
inline void bicGetImpedanceRequest::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImpedanceRequest.channel)
}

// -------------------------------------------------------------------

// bicGetImpedanceReply

// double channelImpedance = 1;
inline void bicGetImpedanceReply::clear_channelimpedance() {
  channelimpedance_ = 0;
}
inline double bicGetImpedanceReply::_internal_channelimpedance() const {
  return channelimpedance_;
}
inline double bicGetImpedanceReply::channelimpedance() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImpedanceReply.channelImpedance)
  return _internal_channelimpedance();
}
inline void bicGetImpedanceReply::_internal_set_channelimpedance(double value) {
  
  channelimpedance_ = value;
}
inline void bicGetImpedanceReply::set_channelimpedance(double value) {
  _internal_set_channelimpedance(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImpedanceReply.channelImpedance)
}

// string units = 2;
inline void bicGetImpedanceReply::clear_units() {
  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bicGetImpedanceReply::units() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImpedanceReply.units)
  return _internal_units();
}
inline void bicGetImpedanceReply::set_units(const std::string& value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImpedanceReply.units)
}
inline std::string* bicGetImpedanceReply::mutable_units() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicGetImpedanceReply.units)
  return _internal_mutable_units();
}
inline const std::string& bicGetImpedanceReply::_internal_units() const {
  return units_.Get();
}
inline void bicGetImpedanceReply::_internal_set_units(const std::string& value) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bicGetImpedanceReply::set_units(std::string&& value) {
  
  units_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.bicGetImpedanceReply.units)
}
inline void bicGetImpedanceReply::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.bicGetImpedanceReply.units)
}
inline void bicGetImpedanceReply::set_units(const char* value,
    size_t size) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.bicGetImpedanceReply.units)
}
inline std::string* bicGetImpedanceReply::_internal_mutable_units() {
  
  return units_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bicGetImpedanceReply::release_units() {
  // @@protoc_insertion_point(field_release:BICgRPC.bicGetImpedanceReply.units)
  return units_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bicGetImpedanceReply::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.bicGetImpedanceReply.units)
}

// string success = 3;
inline void bicGetImpedanceReply::clear_success() {
  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bicGetImpedanceReply::success() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetImpedanceReply.success)
  return _internal_success();
}
inline void bicGetImpedanceReply::set_success(const std::string& value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetImpedanceReply.success)
}
inline std::string* bicGetImpedanceReply::mutable_success() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicGetImpedanceReply.success)
  return _internal_mutable_success();
}
inline const std::string& bicGetImpedanceReply::_internal_success() const {
  return success_.Get();
}
inline void bicGetImpedanceReply::_internal_set_success(const std::string& value) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bicGetImpedanceReply::set_success(std::string&& value) {
  
  success_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.bicGetImpedanceReply.success)
}
inline void bicGetImpedanceReply::set_success(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.bicGetImpedanceReply.success)
}
inline void bicGetImpedanceReply::set_success(const char* value,
    size_t size) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.bicGetImpedanceReply.success)
}
inline std::string* bicGetImpedanceReply::_internal_mutable_success() {
  
  return success_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bicGetImpedanceReply::release_success() {
  // @@protoc_insertion_point(field_release:BICgRPC.bicGetImpedanceReply.success)
  return success_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bicGetImpedanceReply::set_allocated_success(std::string* success) {
  if (success != nullptr) {
    
  } else {
    
  }
  success_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), success,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.bicGetImpedanceReply.success)
}

// -------------------------------------------------------------------

// bicGetTemperatureReply

// double temperature = 1;
inline void bicGetTemperatureReply::clear_temperature() {
  temperature_ = 0;
}
inline double bicGetTemperatureReply::_internal_temperature() const {
  return temperature_;
}
inline double bicGetTemperatureReply::temperature() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetTemperatureReply.temperature)
  return _internal_temperature();
}
inline void bicGetTemperatureReply::_internal_set_temperature(double value) {
  
  temperature_ = value;
}
inline void bicGetTemperatureReply::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetTemperatureReply.temperature)
}

// string units = 2;
inline void bicGetTemperatureReply::clear_units() {
  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bicGetTemperatureReply::units() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetTemperatureReply.units)
  return _internal_units();
}
inline void bicGetTemperatureReply::set_units(const std::string& value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetTemperatureReply.units)
}
inline std::string* bicGetTemperatureReply::mutable_units() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicGetTemperatureReply.units)
  return _internal_mutable_units();
}
inline const std::string& bicGetTemperatureReply::_internal_units() const {
  return units_.Get();
}
inline void bicGetTemperatureReply::_internal_set_units(const std::string& value) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bicGetTemperatureReply::set_units(std::string&& value) {
  
  units_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.bicGetTemperatureReply.units)
}
inline void bicGetTemperatureReply::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.bicGetTemperatureReply.units)
}
inline void bicGetTemperatureReply::set_units(const char* value,
    size_t size) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.bicGetTemperatureReply.units)
}
inline std::string* bicGetTemperatureReply::_internal_mutable_units() {
  
  return units_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bicGetTemperatureReply::release_units() {
  // @@protoc_insertion_point(field_release:BICgRPC.bicGetTemperatureReply.units)
  return units_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bicGetTemperatureReply::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.bicGetTemperatureReply.units)
}

// string success = 3;
inline void bicGetTemperatureReply::clear_success() {
  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bicGetTemperatureReply::success() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetTemperatureReply.success)
  return _internal_success();
}
inline void bicGetTemperatureReply::set_success(const std::string& value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetTemperatureReply.success)
}
inline std::string* bicGetTemperatureReply::mutable_success() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicGetTemperatureReply.success)
  return _internal_mutable_success();
}
inline const std::string& bicGetTemperatureReply::_internal_success() const {
  return success_.Get();
}
inline void bicGetTemperatureReply::_internal_set_success(const std::string& value) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bicGetTemperatureReply::set_success(std::string&& value) {
  
  success_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.bicGetTemperatureReply.success)
}
inline void bicGetTemperatureReply::set_success(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.bicGetTemperatureReply.success)
}
inline void bicGetTemperatureReply::set_success(const char* value,
    size_t size) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.bicGetTemperatureReply.success)
}
inline std::string* bicGetTemperatureReply::_internal_mutable_success() {
  
  return success_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bicGetTemperatureReply::release_success() {
  // @@protoc_insertion_point(field_release:BICgRPC.bicGetTemperatureReply.success)
  return success_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bicGetTemperatureReply::set_allocated_success(std::string* success) {
  if (success != nullptr) {
    
  } else {
    
  }
  success_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), success,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.bicGetTemperatureReply.success)
}

// -------------------------------------------------------------------

// bicGetHumidityReply

// double humidity = 1;
inline void bicGetHumidityReply::clear_humidity() {
  humidity_ = 0;
}
inline double bicGetHumidityReply::_internal_humidity() const {
  return humidity_;
}
inline double bicGetHumidityReply::humidity() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetHumidityReply.humidity)
  return _internal_humidity();
}
inline void bicGetHumidityReply::_internal_set_humidity(double value) {
  
  humidity_ = value;
}
inline void bicGetHumidityReply::set_humidity(double value) {
  _internal_set_humidity(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetHumidityReply.humidity)
}

// string units = 2;
inline void bicGetHumidityReply::clear_units() {
  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bicGetHumidityReply::units() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetHumidityReply.units)
  return _internal_units();
}
inline void bicGetHumidityReply::set_units(const std::string& value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetHumidityReply.units)
}
inline std::string* bicGetHumidityReply::mutable_units() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicGetHumidityReply.units)
  return _internal_mutable_units();
}
inline const std::string& bicGetHumidityReply::_internal_units() const {
  return units_.Get();
}
inline void bicGetHumidityReply::_internal_set_units(const std::string& value) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bicGetHumidityReply::set_units(std::string&& value) {
  
  units_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.bicGetHumidityReply.units)
}
inline void bicGetHumidityReply::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.bicGetHumidityReply.units)
}
inline void bicGetHumidityReply::set_units(const char* value,
    size_t size) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.bicGetHumidityReply.units)
}
inline std::string* bicGetHumidityReply::_internal_mutable_units() {
  
  return units_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bicGetHumidityReply::release_units() {
  // @@protoc_insertion_point(field_release:BICgRPC.bicGetHumidityReply.units)
  return units_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bicGetHumidityReply::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.bicGetHumidityReply.units)
}

// string success = 3;
inline void bicGetHumidityReply::clear_success() {
  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bicGetHumidityReply::success() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicGetHumidityReply.success)
  return _internal_success();
}
inline void bicGetHumidityReply::set_success(const std::string& value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicGetHumidityReply.success)
}
inline std::string* bicGetHumidityReply::mutable_success() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicGetHumidityReply.success)
  return _internal_mutable_success();
}
inline const std::string& bicGetHumidityReply::_internal_success() const {
  return success_.Get();
}
inline void bicGetHumidityReply::_internal_set_success(const std::string& value) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bicGetHumidityReply::set_success(std::string&& value) {
  
  success_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.bicGetHumidityReply.success)
}
inline void bicGetHumidityReply::set_success(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.bicGetHumidityReply.success)
}
inline void bicGetHumidityReply::set_success(const char* value,
    size_t size) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.bicGetHumidityReply.success)
}
inline std::string* bicGetHumidityReply::_internal_mutable_success() {
  
  return success_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bicGetHumidityReply::release_success() {
  // @@protoc_insertion_point(field_release:BICgRPC.bicGetHumidityReply.success)
  return success_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bicGetHumidityReply::set_allocated_success(std::string* success) {
  if (success != nullptr) {
    
  } else {
    
  }
  success_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), success,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.bicGetHumidityReply.success)
}

// -------------------------------------------------------------------

// bicSetSensingEnableRequest

// bool enableSensing = 1;
inline void bicSetSensingEnableRequest::clear_enablesensing() {
  enablesensing_ = false;
}
inline bool bicSetSensingEnableRequest::_internal_enablesensing() const {
  return enablesensing_;
}
inline bool bicSetSensingEnableRequest::enablesensing() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicSetSensingEnableRequest.enableSensing)
  return _internal_enablesensing();
}
inline void bicSetSensingEnableRequest::_internal_set_enablesensing(bool value) {
  
  enablesensing_ = value;
}
inline void bicSetSensingEnableRequest::set_enablesensing(bool value) {
  _internal_set_enablesensing(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicSetSensingEnableRequest.enableSensing)
}

// repeated uint32 refChannels = 2;
inline int bicSetSensingEnableRequest::_internal_refchannels_size() const {
  return refchannels_.size();
}
inline int bicSetSensingEnableRequest::refchannels_size() const {
  return _internal_refchannels_size();
}
inline void bicSetSensingEnableRequest::clear_refchannels() {
  refchannels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicSetSensingEnableRequest::_internal_refchannels(int index) const {
  return refchannels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicSetSensingEnableRequest::refchannels(int index) const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicSetSensingEnableRequest.refChannels)
  return _internal_refchannels(index);
}
inline void bicSetSensingEnableRequest::set_refchannels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  refchannels_.Set(index, value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicSetSensingEnableRequest.refChannels)
}
inline void bicSetSensingEnableRequest::_internal_add_refchannels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  refchannels_.Add(value);
}
inline void bicSetSensingEnableRequest::add_refchannels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_refchannels(value);
  // @@protoc_insertion_point(field_add:BICgRPC.bicSetSensingEnableRequest.refChannels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
bicSetSensingEnableRequest::_internal_refchannels() const {
  return refchannels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
bicSetSensingEnableRequest::refchannels() const {
  // @@protoc_insertion_point(field_list:BICgRPC.bicSetSensingEnableRequest.refChannels)
  return _internal_refchannels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
bicSetSensingEnableRequest::_internal_mutable_refchannels() {
  return &refchannels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
bicSetSensingEnableRequest::mutable_refchannels() {
  // @@protoc_insertion_point(field_mutable_list:BICgRPC.bicSetSensingEnableRequest.refChannels)
  return _internal_mutable_refchannels();
}

// uint32 bufferSize = 3;
inline void bicSetSensingEnableRequest::clear_buffersize() {
  buffersize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicSetSensingEnableRequest::_internal_buffersize() const {
  return buffersize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 bicSetSensingEnableRequest::buffersize() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicSetSensingEnableRequest.bufferSize)
  return _internal_buffersize();
}
inline void bicSetSensingEnableRequest::_internal_set_buffersize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  buffersize_ = value;
}
inline void bicSetSensingEnableRequest::set_buffersize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buffersize(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicSetSensingEnableRequest.bufferSize)
}

// -------------------------------------------------------------------

// bicSetImplantPowerRequest

// bool powerEnabled = 1;
inline void bicSetImplantPowerRequest::clear_powerenabled() {
  powerenabled_ = false;
}
inline bool bicSetImplantPowerRequest::_internal_powerenabled() const {
  return powerenabled_;
}
inline bool bicSetImplantPowerRequest::powerenabled() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicSetImplantPowerRequest.powerEnabled)
  return _internal_powerenabled();
}
inline void bicSetImplantPowerRequest::_internal_set_powerenabled(bool value) {
  
  powerenabled_ = value;
}
inline void bicSetImplantPowerRequest::set_powerenabled(bool value) {
  _internal_set_powerenabled(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicSetImplantPowerRequest.powerEnabled)
}

// -------------------------------------------------------------------

// bicStartStimulationRequest

// string functionName = 1;
inline void bicStartStimulationRequest::clear_functionname() {
  functionname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bicStartStimulationRequest::functionname() const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicStartStimulationRequest.functionName)
  return _internal_functionname();
}
inline void bicStartStimulationRequest::set_functionname(const std::string& value) {
  _internal_set_functionname(value);
  // @@protoc_insertion_point(field_set:BICgRPC.bicStartStimulationRequest.functionName)
}
inline std::string* bicStartStimulationRequest::mutable_functionname() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicStartStimulationRequest.functionName)
  return _internal_mutable_functionname();
}
inline const std::string& bicStartStimulationRequest::_internal_functionname() const {
  return functionname_.Get();
}
inline void bicStartStimulationRequest::_internal_set_functionname(const std::string& value) {
  
  functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bicStartStimulationRequest::set_functionname(std::string&& value) {
  
  functionname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.bicStartStimulationRequest.functionName)
}
inline void bicStartStimulationRequest::set_functionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.bicStartStimulationRequest.functionName)
}
inline void bicStartStimulationRequest::set_functionname(const char* value,
    size_t size) {
  
  functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.bicStartStimulationRequest.functionName)
}
inline std::string* bicStartStimulationRequest::_internal_mutable_functionname() {
  
  return functionname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bicStartStimulationRequest::release_functionname() {
  // @@protoc_insertion_point(field_release:BICgRPC.bicStartStimulationRequest.functionName)
  return functionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bicStartStimulationRequest::set_allocated_functionname(std::string* functionname) {
  if (functionname != nullptr) {
    
  } else {
    
  }
  functionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), functionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.bicStartStimulationRequest.functionName)
}

// -------------------------------------------------------------------

// bicStimulationFunctionDefinitionRequest

// repeated .BICgRPC.StimulationFunctionDefinition functions = 1;
inline int bicStimulationFunctionDefinitionRequest::_internal_functions_size() const {
  return functions_.size();
}
inline int bicStimulationFunctionDefinitionRequest::functions_size() const {
  return _internal_functions_size();
}
inline void bicStimulationFunctionDefinitionRequest::clear_functions() {
  functions_.Clear();
}
inline ::BICgRPC::StimulationFunctionDefinition* bicStimulationFunctionDefinitionRequest::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:BICgRPC.bicStimulationFunctionDefinitionRequest.functions)
  return functions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::StimulationFunctionDefinition >*
bicStimulationFunctionDefinitionRequest::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:BICgRPC.bicStimulationFunctionDefinitionRequest.functions)
  return &functions_;
}
inline const ::BICgRPC::StimulationFunctionDefinition& bicStimulationFunctionDefinitionRequest::_internal_functions(int index) const {
  return functions_.Get(index);
}
inline const ::BICgRPC::StimulationFunctionDefinition& bicStimulationFunctionDefinitionRequest::functions(int index) const {
  // @@protoc_insertion_point(field_get:BICgRPC.bicStimulationFunctionDefinitionRequest.functions)
  return _internal_functions(index);
}
inline ::BICgRPC::StimulationFunctionDefinition* bicStimulationFunctionDefinitionRequest::_internal_add_functions() {
  return functions_.Add();
}
inline ::BICgRPC::StimulationFunctionDefinition* bicStimulationFunctionDefinitionRequest::add_functions() {
  // @@protoc_insertion_point(field_add:BICgRPC.bicStimulationFunctionDefinitionRequest.functions)
  return _internal_add_functions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::StimulationFunctionDefinition >&
bicStimulationFunctionDefinitionRequest::functions() const {
  // @@protoc_insertion_point(field_list:BICgRPC.bicStimulationFunctionDefinitionRequest.functions)
  return functions_;
}

// -------------------------------------------------------------------

// StimulationFunctionDefinition

// string functionName = 1;
inline void StimulationFunctionDefinition::clear_functionname() {
  functionname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StimulationFunctionDefinition::functionname() const {
  // @@protoc_insertion_point(field_get:BICgRPC.StimulationFunctionDefinition.functionName)
  return _internal_functionname();
}
inline void StimulationFunctionDefinition::set_functionname(const std::string& value) {
  _internal_set_functionname(value);
  // @@protoc_insertion_point(field_set:BICgRPC.StimulationFunctionDefinition.functionName)
}
inline std::string* StimulationFunctionDefinition::mutable_functionname() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.StimulationFunctionDefinition.functionName)
  return _internal_mutable_functionname();
}
inline const std::string& StimulationFunctionDefinition::_internal_functionname() const {
  return functionname_.Get();
}
inline void StimulationFunctionDefinition::_internal_set_functionname(const std::string& value) {
  
  functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StimulationFunctionDefinition::set_functionname(std::string&& value) {
  
  functionname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.StimulationFunctionDefinition.functionName)
}
inline void StimulationFunctionDefinition::set_functionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.StimulationFunctionDefinition.functionName)
}
inline void StimulationFunctionDefinition::set_functionname(const char* value,
    size_t size) {
  
  functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.StimulationFunctionDefinition.functionName)
}
inline std::string* StimulationFunctionDefinition::_internal_mutable_functionname() {
  
  return functionname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StimulationFunctionDefinition::release_functionname() {
  // @@protoc_insertion_point(field_release:BICgRPC.StimulationFunctionDefinition.functionName)
  return functionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StimulationFunctionDefinition::set_allocated_functionname(std::string* functionname) {
  if (functionname != nullptr) {
    
  } else {
    
  }
  functionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), functionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.StimulationFunctionDefinition.functionName)
}

// uint32 repetitions = 2;
inline void StimulationFunctionDefinition::clear_repetitions() {
  repetitions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StimulationFunctionDefinition::_internal_repetitions() const {
  return repetitions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StimulationFunctionDefinition::repetitions() const {
  // @@protoc_insertion_point(field_get:BICgRPC.StimulationFunctionDefinition.repetitions)
  return _internal_repetitions();
}
inline void StimulationFunctionDefinition::_internal_set_repetitions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  repetitions_ = value;
}
inline void StimulationFunctionDefinition::set_repetitions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repetitions(value);
  // @@protoc_insertion_point(field_set:BICgRPC.StimulationFunctionDefinition.repetitions)
}

// repeated uint32 sourceElectrodes = 3;
inline int StimulationFunctionDefinition::_internal_sourceelectrodes_size() const {
  return sourceelectrodes_.size();
}
inline int StimulationFunctionDefinition::sourceelectrodes_size() const {
  return _internal_sourceelectrodes_size();
}
inline void StimulationFunctionDefinition::clear_sourceelectrodes() {
  sourceelectrodes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StimulationFunctionDefinition::_internal_sourceelectrodes(int index) const {
  return sourceelectrodes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StimulationFunctionDefinition::sourceelectrodes(int index) const {
  // @@protoc_insertion_point(field_get:BICgRPC.StimulationFunctionDefinition.sourceElectrodes)
  return _internal_sourceelectrodes(index);
}
inline void StimulationFunctionDefinition::set_sourceelectrodes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  sourceelectrodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:BICgRPC.StimulationFunctionDefinition.sourceElectrodes)
}
inline void StimulationFunctionDefinition::_internal_add_sourceelectrodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  sourceelectrodes_.Add(value);
}
inline void StimulationFunctionDefinition::add_sourceelectrodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_sourceelectrodes(value);
  // @@protoc_insertion_point(field_add:BICgRPC.StimulationFunctionDefinition.sourceElectrodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
StimulationFunctionDefinition::_internal_sourceelectrodes() const {
  return sourceelectrodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
StimulationFunctionDefinition::sourceelectrodes() const {
  // @@protoc_insertion_point(field_list:BICgRPC.StimulationFunctionDefinition.sourceElectrodes)
  return _internal_sourceelectrodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
StimulationFunctionDefinition::_internal_mutable_sourceelectrodes() {
  return &sourceelectrodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
StimulationFunctionDefinition::mutable_sourceelectrodes() {
  // @@protoc_insertion_point(field_mutable_list:BICgRPC.StimulationFunctionDefinition.sourceElectrodes)
  return _internal_mutable_sourceelectrodes();
}

// repeated uint32 sinkElectrodes = 4;
inline int StimulationFunctionDefinition::_internal_sinkelectrodes_size() const {
  return sinkelectrodes_.size();
}
inline int StimulationFunctionDefinition::sinkelectrodes_size() const {
  return _internal_sinkelectrodes_size();
}
inline void StimulationFunctionDefinition::clear_sinkelectrodes() {
  sinkelectrodes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StimulationFunctionDefinition::_internal_sinkelectrodes(int index) const {
  return sinkelectrodes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StimulationFunctionDefinition::sinkelectrodes(int index) const {
  // @@protoc_insertion_point(field_get:BICgRPC.StimulationFunctionDefinition.sinkElectrodes)
  return _internal_sinkelectrodes(index);
}
inline void StimulationFunctionDefinition::set_sinkelectrodes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  sinkelectrodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:BICgRPC.StimulationFunctionDefinition.sinkElectrodes)
}
inline void StimulationFunctionDefinition::_internal_add_sinkelectrodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  sinkelectrodes_.Add(value);
}
inline void StimulationFunctionDefinition::add_sinkelectrodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_sinkelectrodes(value);
  // @@protoc_insertion_point(field_add:BICgRPC.StimulationFunctionDefinition.sinkElectrodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
StimulationFunctionDefinition::_internal_sinkelectrodes() const {
  return sinkelectrodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
StimulationFunctionDefinition::sinkelectrodes() const {
  // @@protoc_insertion_point(field_list:BICgRPC.StimulationFunctionDefinition.sinkElectrodes)
  return _internal_sinkelectrodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
StimulationFunctionDefinition::_internal_mutable_sinkelectrodes() {
  return &sinkelectrodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
StimulationFunctionDefinition::mutable_sinkelectrodes() {
  // @@protoc_insertion_point(field_mutable_list:BICgRPC.StimulationFunctionDefinition.sinkElectrodes)
  return _internal_mutable_sinkelectrodes();
}

// repeated .BICgRPC.StimulationAtom atoms = 5;
inline int StimulationFunctionDefinition::_internal_atoms_size() const {
  return atoms_.size();
}
inline int StimulationFunctionDefinition::atoms_size() const {
  return _internal_atoms_size();
}
inline void StimulationFunctionDefinition::clear_atoms() {
  atoms_.Clear();
}
inline ::BICgRPC::StimulationAtom* StimulationFunctionDefinition::mutable_atoms(int index) {
  // @@protoc_insertion_point(field_mutable:BICgRPC.StimulationFunctionDefinition.atoms)
  return atoms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::StimulationAtom >*
StimulationFunctionDefinition::mutable_atoms() {
  // @@protoc_insertion_point(field_mutable_list:BICgRPC.StimulationFunctionDefinition.atoms)
  return &atoms_;
}
inline const ::BICgRPC::StimulationAtom& StimulationFunctionDefinition::_internal_atoms(int index) const {
  return atoms_.Get(index);
}
inline const ::BICgRPC::StimulationAtom& StimulationFunctionDefinition::atoms(int index) const {
  // @@protoc_insertion_point(field_get:BICgRPC.StimulationFunctionDefinition.atoms)
  return _internal_atoms(index);
}
inline ::BICgRPC::StimulationAtom* StimulationFunctionDefinition::_internal_add_atoms() {
  return atoms_.Add();
}
inline ::BICgRPC::StimulationAtom* StimulationFunctionDefinition::add_atoms() {
  // @@protoc_insertion_point(field_add:BICgRPC.StimulationFunctionDefinition.atoms)
  return _internal_add_atoms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::StimulationAtom >&
StimulationFunctionDefinition::atoms() const {
  // @@protoc_insertion_point(field_list:BICgRPC.StimulationFunctionDefinition.atoms)
  return atoms_;
}

// -------------------------------------------------------------------

// StimulationAtom

// repeated double amplitude = 1;
inline int StimulationAtom::_internal_amplitude_size() const {
  return amplitude_.size();
}
inline int StimulationAtom::amplitude_size() const {
  return _internal_amplitude_size();
}
inline void StimulationAtom::clear_amplitude() {
  amplitude_.Clear();
}
inline double StimulationAtom::_internal_amplitude(int index) const {
  return amplitude_.Get(index);
}
inline double StimulationAtom::amplitude(int index) const {
  // @@protoc_insertion_point(field_get:BICgRPC.StimulationAtom.amplitude)
  return _internal_amplitude(index);
}
inline void StimulationAtom::set_amplitude(int index, double value) {
  amplitude_.Set(index, value);
  // @@protoc_insertion_point(field_set:BICgRPC.StimulationAtom.amplitude)
}
inline void StimulationAtom::_internal_add_amplitude(double value) {
  amplitude_.Add(value);
}
inline void StimulationAtom::add_amplitude(double value) {
  _internal_add_amplitude(value);
  // @@protoc_insertion_point(field_add:BICgRPC.StimulationAtom.amplitude)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
StimulationAtom::_internal_amplitude() const {
  return amplitude_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
StimulationAtom::amplitude() const {
  // @@protoc_insertion_point(field_list:BICgRPC.StimulationAtom.amplitude)
  return _internal_amplitude();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
StimulationAtom::_internal_mutable_amplitude() {
  return &amplitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
StimulationAtom::mutable_amplitude() {
  // @@protoc_insertion_point(field_mutable_list:BICgRPC.StimulationAtom.amplitude)
  return _internal_mutable_amplitude();
}

// double duration = 2;
inline void StimulationAtom::clear_duration() {
  duration_ = 0;
}
inline double StimulationAtom::_internal_duration() const {
  return duration_;
}
inline double StimulationAtom::duration() const {
  // @@protoc_insertion_point(field_get:BICgRPC.StimulationAtom.duration)
  return _internal_duration();
}
inline void StimulationAtom::_internal_set_duration(double value) {
  
  duration_ = value;
}
inline void StimulationAtom::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:BICgRPC.StimulationAtom.duration)
}

// .BICgRPC.AtomType type = 3;
inline void StimulationAtom::clear_type() {
  type_ = 0;
}
inline ::BICgRPC::AtomType StimulationAtom::_internal_type() const {
  return static_cast< ::BICgRPC::AtomType >(type_);
}
inline ::BICgRPC::AtomType StimulationAtom::type() const {
  // @@protoc_insertion_point(field_get:BICgRPC.StimulationAtom.type)
  return _internal_type();
}
inline void StimulationAtom::_internal_set_type(::BICgRPC::AtomType value) {
  
  type_ = value;
}
inline void StimulationAtom::set_type(::BICgRPC::AtomType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BICgRPC.StimulationAtom.type)
}

// -------------------------------------------------------------------

// TemperatureUpdate

// double temperature = 1;
inline void TemperatureUpdate::clear_temperature() {
  temperature_ = 0;
}
inline double TemperatureUpdate::_internal_temperature() const {
  return temperature_;
}
inline double TemperatureUpdate::temperature() const {
  // @@protoc_insertion_point(field_get:BICgRPC.TemperatureUpdate.temperature)
  return _internal_temperature();
}
inline void TemperatureUpdate::_internal_set_temperature(double value) {
  
  temperature_ = value;
}
inline void TemperatureUpdate::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:BICgRPC.TemperatureUpdate.temperature)
}

// string units = 2;
inline void TemperatureUpdate::clear_units() {
  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TemperatureUpdate::units() const {
  // @@protoc_insertion_point(field_get:BICgRPC.TemperatureUpdate.units)
  return _internal_units();
}
inline void TemperatureUpdate::set_units(const std::string& value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:BICgRPC.TemperatureUpdate.units)
}
inline std::string* TemperatureUpdate::mutable_units() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.TemperatureUpdate.units)
  return _internal_mutable_units();
}
inline const std::string& TemperatureUpdate::_internal_units() const {
  return units_.Get();
}
inline void TemperatureUpdate::_internal_set_units(const std::string& value) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TemperatureUpdate::set_units(std::string&& value) {
  
  units_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.TemperatureUpdate.units)
}
inline void TemperatureUpdate::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.TemperatureUpdate.units)
}
inline void TemperatureUpdate::set_units(const char* value,
    size_t size) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.TemperatureUpdate.units)
}
inline std::string* TemperatureUpdate::_internal_mutable_units() {
  
  return units_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TemperatureUpdate::release_units() {
  // @@protoc_insertion_point(field_release:BICgRPC.TemperatureUpdate.units)
  return units_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TemperatureUpdate::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.TemperatureUpdate.units)
}

// -------------------------------------------------------------------

// HumidityUpdate

// double humidity = 1;
inline void HumidityUpdate::clear_humidity() {
  humidity_ = 0;
}
inline double HumidityUpdate::_internal_humidity() const {
  return humidity_;
}
inline double HumidityUpdate::humidity() const {
  // @@protoc_insertion_point(field_get:BICgRPC.HumidityUpdate.humidity)
  return _internal_humidity();
}
inline void HumidityUpdate::_internal_set_humidity(double value) {
  
  humidity_ = value;
}
inline void HumidityUpdate::set_humidity(double value) {
  _internal_set_humidity(value);
  // @@protoc_insertion_point(field_set:BICgRPC.HumidityUpdate.humidity)
}

// string units = 2;
inline void HumidityUpdate::clear_units() {
  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HumidityUpdate::units() const {
  // @@protoc_insertion_point(field_get:BICgRPC.HumidityUpdate.units)
  return _internal_units();
}
inline void HumidityUpdate::set_units(const std::string& value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:BICgRPC.HumidityUpdate.units)
}
inline std::string* HumidityUpdate::mutable_units() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.HumidityUpdate.units)
  return _internal_mutable_units();
}
inline const std::string& HumidityUpdate::_internal_units() const {
  return units_.Get();
}
inline void HumidityUpdate::_internal_set_units(const std::string& value) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HumidityUpdate::set_units(std::string&& value) {
  
  units_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.HumidityUpdate.units)
}
inline void HumidityUpdate::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.HumidityUpdate.units)
}
inline void HumidityUpdate::set_units(const char* value,
    size_t size) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.HumidityUpdate.units)
}
inline std::string* HumidityUpdate::_internal_mutable_units() {
  
  return units_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HumidityUpdate::release_units() {
  // @@protoc_insertion_point(field_release:BICgRPC.HumidityUpdate.units)
  return units_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HumidityUpdate::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.HumidityUpdate.units)
}

// -------------------------------------------------------------------

// NeuralUpdate

// repeated .BICgRPC.NeuralSample samples = 1;
inline int NeuralUpdate::_internal_samples_size() const {
  return samples_.size();
}
inline int NeuralUpdate::samples_size() const {
  return _internal_samples_size();
}
inline void NeuralUpdate::clear_samples() {
  samples_.Clear();
}
inline ::BICgRPC::NeuralSample* NeuralUpdate::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:BICgRPC.NeuralUpdate.samples)
  return samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::NeuralSample >*
NeuralUpdate::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:BICgRPC.NeuralUpdate.samples)
  return &samples_;
}
inline const ::BICgRPC::NeuralSample& NeuralUpdate::_internal_samples(int index) const {
  return samples_.Get(index);
}
inline const ::BICgRPC::NeuralSample& NeuralUpdate::samples(int index) const {
  // @@protoc_insertion_point(field_get:BICgRPC.NeuralUpdate.samples)
  return _internal_samples(index);
}
inline ::BICgRPC::NeuralSample* NeuralUpdate::_internal_add_samples() {
  return samples_.Add();
}
inline ::BICgRPC::NeuralSample* NeuralUpdate::add_samples() {
  // @@protoc_insertion_point(field_add:BICgRPC.NeuralUpdate.samples)
  return _internal_add_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::NeuralSample >&
NeuralUpdate::samples() const {
  // @@protoc_insertion_point(field_list:BICgRPC.NeuralUpdate.samples)
  return samples_;
}

// -------------------------------------------------------------------

// NeuralSample

// uint32 numberOfMeasurements = 1;
inline void NeuralSample::clear_numberofmeasurements() {
  numberofmeasurements_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NeuralSample::_internal_numberofmeasurements() const {
  return numberofmeasurements_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NeuralSample::numberofmeasurements() const {
  // @@protoc_insertion_point(field_get:BICgRPC.NeuralSample.numberOfMeasurements)
  return _internal_numberofmeasurements();
}
inline void NeuralSample::_internal_set_numberofmeasurements(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numberofmeasurements_ = value;
}
inline void NeuralSample::set_numberofmeasurements(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numberofmeasurements(value);
  // @@protoc_insertion_point(field_set:BICgRPC.NeuralSample.numberOfMeasurements)
}

// repeated double measurements = 2;
inline int NeuralSample::_internal_measurements_size() const {
  return measurements_.size();
}
inline int NeuralSample::measurements_size() const {
  return _internal_measurements_size();
}
inline void NeuralSample::clear_measurements() {
  measurements_.Clear();
}
inline double NeuralSample::_internal_measurements(int index) const {
  return measurements_.Get(index);
}
inline double NeuralSample::measurements(int index) const {
  // @@protoc_insertion_point(field_get:BICgRPC.NeuralSample.measurements)
  return _internal_measurements(index);
}
inline void NeuralSample::set_measurements(int index, double value) {
  measurements_.Set(index, value);
  // @@protoc_insertion_point(field_set:BICgRPC.NeuralSample.measurements)
}
inline void NeuralSample::_internal_add_measurements(double value) {
  measurements_.Add(value);
}
inline void NeuralSample::add_measurements(double value) {
  _internal_add_measurements(value);
  // @@protoc_insertion_point(field_add:BICgRPC.NeuralSample.measurements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NeuralSample::_internal_measurements() const {
  return measurements_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NeuralSample::measurements() const {
  // @@protoc_insertion_point(field_list:BICgRPC.NeuralSample.measurements)
  return _internal_measurements();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NeuralSample::_internal_mutable_measurements() {
  return &measurements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NeuralSample::mutable_measurements() {
  // @@protoc_insertion_point(field_mutable_list:BICgRPC.NeuralSample.measurements)
  return _internal_mutable_measurements();
}

// uint32 supplyVoltage = 3;
inline void NeuralSample::clear_supplyvoltage() {
  supplyvoltage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NeuralSample::_internal_supplyvoltage() const {
  return supplyvoltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NeuralSample::supplyvoltage() const {
  // @@protoc_insertion_point(field_get:BICgRPC.NeuralSample.supplyVoltage)
  return _internal_supplyvoltage();
}
inline void NeuralSample::_internal_set_supplyvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  supplyvoltage_ = value;
}
inline void NeuralSample::set_supplyvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_supplyvoltage(value);
  // @@protoc_insertion_point(field_set:BICgRPC.NeuralSample.supplyVoltage)
}

// bool isConnected = 4;
inline void NeuralSample::clear_isconnected() {
  isconnected_ = false;
}
inline bool NeuralSample::_internal_isconnected() const {
  return isconnected_;
}
inline bool NeuralSample::isconnected() const {
  // @@protoc_insertion_point(field_get:BICgRPC.NeuralSample.isConnected)
  return _internal_isconnected();
}
inline void NeuralSample::_internal_set_isconnected(bool value) {
  
  isconnected_ = value;
}
inline void NeuralSample::set_isconnected(bool value) {
  _internal_set_isconnected(value);
  // @@protoc_insertion_point(field_set:BICgRPC.NeuralSample.isConnected)
}

// uint32 stimulationNumber = 5;
inline void NeuralSample::clear_stimulationnumber() {
  stimulationnumber_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NeuralSample::_internal_stimulationnumber() const {
  return stimulationnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NeuralSample::stimulationnumber() const {
  // @@protoc_insertion_point(field_get:BICgRPC.NeuralSample.stimulationNumber)
  return _internal_stimulationnumber();
}
inline void NeuralSample::_internal_set_stimulationnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stimulationnumber_ = value;
}
inline void NeuralSample::set_stimulationnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stimulationnumber(value);
  // @@protoc_insertion_point(field_set:BICgRPC.NeuralSample.stimulationNumber)
}

// bool stimulationActive = 6;
inline void NeuralSample::clear_stimulationactive() {
  stimulationactive_ = false;
}
inline bool NeuralSample::_internal_stimulationactive() const {
  return stimulationactive_;
}
inline bool NeuralSample::stimulationactive() const {
  // @@protoc_insertion_point(field_get:BICgRPC.NeuralSample.stimulationActive)
  return _internal_stimulationactive();
}
inline void NeuralSample::_internal_set_stimulationactive(bool value) {
  
  stimulationactive_ = value;
}
inline void NeuralSample::set_stimulationactive(bool value) {
  _internal_set_stimulationactive(value);
  // @@protoc_insertion_point(field_set:BICgRPC.NeuralSample.stimulationActive)
}

// uint32 sampleCounter = 7;
inline void NeuralSample::clear_samplecounter() {
  samplecounter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NeuralSample::_internal_samplecounter() const {
  return samplecounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NeuralSample::samplecounter() const {
  // @@protoc_insertion_point(field_get:BICgRPC.NeuralSample.sampleCounter)
  return _internal_samplecounter();
}
inline void NeuralSample::_internal_set_samplecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  samplecounter_ = value;
}
inline void NeuralSample::set_samplecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_samplecounter(value);
  // @@protoc_insertion_point(field_set:BICgRPC.NeuralSample.sampleCounter)
}

// -------------------------------------------------------------------

// ConnectionUpdate

// string connectionType = 1;
inline void ConnectionUpdate::clear_connectiontype() {
  connectiontype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionUpdate::connectiontype() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ConnectionUpdate.connectionType)
  return _internal_connectiontype();
}
inline void ConnectionUpdate::set_connectiontype(const std::string& value) {
  _internal_set_connectiontype(value);
  // @@protoc_insertion_point(field_set:BICgRPC.ConnectionUpdate.connectionType)
}
inline std::string* ConnectionUpdate::mutable_connectiontype() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.ConnectionUpdate.connectionType)
  return _internal_mutable_connectiontype();
}
inline const std::string& ConnectionUpdate::_internal_connectiontype() const {
  return connectiontype_.Get();
}
inline void ConnectionUpdate::_internal_set_connectiontype(const std::string& value) {
  
  connectiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionUpdate::set_connectiontype(std::string&& value) {
  
  connectiontype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.ConnectionUpdate.connectionType)
}
inline void ConnectionUpdate::set_connectiontype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connectiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.ConnectionUpdate.connectionType)
}
inline void ConnectionUpdate::set_connectiontype(const char* value,
    size_t size) {
  
  connectiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.ConnectionUpdate.connectionType)
}
inline std::string* ConnectionUpdate::_internal_mutable_connectiontype() {
  
  return connectiontype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionUpdate::release_connectiontype() {
  // @@protoc_insertion_point(field_release:BICgRPC.ConnectionUpdate.connectionType)
  return connectiontype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionUpdate::set_allocated_connectiontype(std::string* connectiontype) {
  if (connectiontype != nullptr) {
    
  } else {
    
  }
  connectiontype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connectiontype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.ConnectionUpdate.connectionType)
}

// bool isConnected = 2;
inline void ConnectionUpdate::clear_isconnected() {
  isconnected_ = false;
}
inline bool ConnectionUpdate::_internal_isconnected() const {
  return isconnected_;
}
inline bool ConnectionUpdate::isconnected() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ConnectionUpdate.isConnected)
  return _internal_isconnected();
}
inline void ConnectionUpdate::_internal_set_isconnected(bool value) {
  
  isconnected_ = value;
}
inline void ConnectionUpdate::set_isconnected(bool value) {
  _internal_set_isconnected(value);
  // @@protoc_insertion_point(field_set:BICgRPC.ConnectionUpdate.isConnected)
}

// -------------------------------------------------------------------

// PowerUpdate

// string parameter = 1;
inline void PowerUpdate::clear_parameter() {
  parameter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PowerUpdate::parameter() const {
  // @@protoc_insertion_point(field_get:BICgRPC.PowerUpdate.parameter)
  return _internal_parameter();
}
inline void PowerUpdate::set_parameter(const std::string& value) {
  _internal_set_parameter(value);
  // @@protoc_insertion_point(field_set:BICgRPC.PowerUpdate.parameter)
}
inline std::string* PowerUpdate::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.PowerUpdate.parameter)
  return _internal_mutable_parameter();
}
inline const std::string& PowerUpdate::_internal_parameter() const {
  return parameter_.Get();
}
inline void PowerUpdate::_internal_set_parameter(const std::string& value) {
  
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PowerUpdate::set_parameter(std::string&& value) {
  
  parameter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.PowerUpdate.parameter)
}
inline void PowerUpdate::set_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.PowerUpdate.parameter)
}
inline void PowerUpdate::set_parameter(const char* value,
    size_t size) {
  
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.PowerUpdate.parameter)
}
inline std::string* PowerUpdate::_internal_mutable_parameter() {
  
  return parameter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PowerUpdate::release_parameter() {
  // @@protoc_insertion_point(field_release:BICgRPC.PowerUpdate.parameter)
  return parameter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PowerUpdate::set_allocated_parameter(std::string* parameter) {
  if (parameter != nullptr) {
    
  } else {
    
  }
  parameter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.PowerUpdate.parameter)
}

// double value = 2;
inline void PowerUpdate::clear_value() {
  value_ = 0;
}
inline double PowerUpdate::_internal_value() const {
  return value_;
}
inline double PowerUpdate::value() const {
  // @@protoc_insertion_point(field_get:BICgRPC.PowerUpdate.value)
  return _internal_value();
}
inline void PowerUpdate::_internal_set_value(double value) {
  
  value_ = value;
}
inline void PowerUpdate::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:BICgRPC.PowerUpdate.value)
}

// string units = 3;
inline void PowerUpdate::clear_units() {
  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PowerUpdate::units() const {
  // @@protoc_insertion_point(field_get:BICgRPC.PowerUpdate.units)
  return _internal_units();
}
inline void PowerUpdate::set_units(const std::string& value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:BICgRPC.PowerUpdate.units)
}
inline std::string* PowerUpdate::mutable_units() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.PowerUpdate.units)
  return _internal_mutable_units();
}
inline const std::string& PowerUpdate::_internal_units() const {
  return units_.Get();
}
inline void PowerUpdate::_internal_set_units(const std::string& value) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PowerUpdate::set_units(std::string&& value) {
  
  units_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.PowerUpdate.units)
}
inline void PowerUpdate::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.PowerUpdate.units)
}
inline void PowerUpdate::set_units(const char* value,
    size_t size) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.PowerUpdate.units)
}
inline std::string* PowerUpdate::_internal_mutable_units() {
  
  return units_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PowerUpdate::release_units() {
  // @@protoc_insertion_point(field_release:BICgRPC.PowerUpdate.units)
  return units_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PowerUpdate::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.PowerUpdate.units)
}

// -------------------------------------------------------------------

// ErrorUpdate

// string message = 1;
inline void ErrorUpdate::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ErrorUpdate::message() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ErrorUpdate.message)
  return _internal_message();
}
inline void ErrorUpdate::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:BICgRPC.ErrorUpdate.message)
}
inline std::string* ErrorUpdate::mutable_message() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.ErrorUpdate.message)
  return _internal_mutable_message();
}
inline const std::string& ErrorUpdate::_internal_message() const {
  return message_.Get();
}
inline void ErrorUpdate::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorUpdate::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.ErrorUpdate.message)
}
inline void ErrorUpdate::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.ErrorUpdate.message)
}
inline void ErrorUpdate::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.ErrorUpdate.message)
}
inline std::string* ErrorUpdate::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorUpdate::release_message() {
  // @@protoc_insertion_point(field_release:BICgRPC.ErrorUpdate.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorUpdate::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.ErrorUpdate.message)
}

// -------------------------------------------------------------------

// Bridge

// string name = 1;
inline void Bridge::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Bridge::name() const {
  // @@protoc_insertion_point(field_get:BICgRPC.Bridge.name)
  return _internal_name();
}
inline void Bridge::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BICgRPC.Bridge.name)
}
inline std::string* Bridge::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.Bridge.name)
  return _internal_mutable_name();
}
inline const std::string& Bridge::_internal_name() const {
  return name_.Get();
}
inline void Bridge::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bridge::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.Bridge.name)
}
inline void Bridge::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.Bridge.name)
}
inline void Bridge::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.Bridge.name)
}
inline std::string* Bridge::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bridge::release_name() {
  // @@protoc_insertion_point(field_release:BICgRPC.Bridge.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bridge::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.Bridge.name)
}

// string implantType = 2;
inline void Bridge::clear_implanttype() {
  implanttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Bridge::implanttype() const {
  // @@protoc_insertion_point(field_get:BICgRPC.Bridge.implantType)
  return _internal_implanttype();
}
inline void Bridge::set_implanttype(const std::string& value) {
  _internal_set_implanttype(value);
  // @@protoc_insertion_point(field_set:BICgRPC.Bridge.implantType)
}
inline std::string* Bridge::mutable_implanttype() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.Bridge.implantType)
  return _internal_mutable_implanttype();
}
inline const std::string& Bridge::_internal_implanttype() const {
  return implanttype_.Get();
}
inline void Bridge::_internal_set_implanttype(const std::string& value) {
  
  implanttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bridge::set_implanttype(std::string&& value) {
  
  implanttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.Bridge.implantType)
}
inline void Bridge::set_implanttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  implanttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.Bridge.implantType)
}
inline void Bridge::set_implanttype(const char* value,
    size_t size) {
  
  implanttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.Bridge.implantType)
}
inline std::string* Bridge::_internal_mutable_implanttype() {
  
  return implanttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bridge::release_implanttype() {
  // @@protoc_insertion_point(field_release:BICgRPC.Bridge.implantType)
  return implanttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bridge::set_allocated_implanttype(std::string* implanttype) {
  if (implanttype != nullptr) {
    
  } else {
    
  }
  implanttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), implanttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.Bridge.implantType)
}

// string deviceId = 3;
inline void Bridge::clear_deviceid() {
  deviceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Bridge::deviceid() const {
  // @@protoc_insertion_point(field_get:BICgRPC.Bridge.deviceId)
  return _internal_deviceid();
}
inline void Bridge::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:BICgRPC.Bridge.deviceId)
}
inline std::string* Bridge::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.Bridge.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& Bridge::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void Bridge::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bridge::set_deviceid(std::string&& value) {
  
  deviceid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.Bridge.deviceId)
}
inline void Bridge::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.Bridge.deviceId)
}
inline void Bridge::set_deviceid(const char* value,
    size_t size) {
  
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.Bridge.deviceId)
}
inline std::string* Bridge::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bridge::release_deviceid() {
  // @@protoc_insertion_point(field_release:BICgRPC.Bridge.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bridge::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.Bridge.deviceId)
}

// string firmwareVersion = 4;
inline void Bridge::clear_firmwareversion() {
  firmwareversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Bridge::firmwareversion() const {
  // @@protoc_insertion_point(field_get:BICgRPC.Bridge.firmwareVersion)
  return _internal_firmwareversion();
}
inline void Bridge::set_firmwareversion(const std::string& value) {
  _internal_set_firmwareversion(value);
  // @@protoc_insertion_point(field_set:BICgRPC.Bridge.firmwareVersion)
}
inline std::string* Bridge::mutable_firmwareversion() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.Bridge.firmwareVersion)
  return _internal_mutable_firmwareversion();
}
inline const std::string& Bridge::_internal_firmwareversion() const {
  return firmwareversion_.Get();
}
inline void Bridge::_internal_set_firmwareversion(const std::string& value) {
  
  firmwareversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bridge::set_firmwareversion(std::string&& value) {
  
  firmwareversion_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.Bridge.firmwareVersion)
}
inline void Bridge::set_firmwareversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmwareversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.Bridge.firmwareVersion)
}
inline void Bridge::set_firmwareversion(const char* value,
    size_t size) {
  
  firmwareversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.Bridge.firmwareVersion)
}
inline std::string* Bridge::_internal_mutable_firmwareversion() {
  
  return firmwareversion_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bridge::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:BICgRPC.Bridge.firmwareVersion)
  return firmwareversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bridge::set_allocated_firmwareversion(std::string* firmwareversion) {
  if (firmwareversion != nullptr) {
    
  } else {
    
  }
  firmwareversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmwareversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.Bridge.firmwareVersion)
}

// -------------------------------------------------------------------

// QueryBridgesRequest

// string query = 1;
inline void QueryBridgesRequest::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryBridgesRequest::query() const {
  // @@protoc_insertion_point(field_get:BICgRPC.QueryBridgesRequest.query)
  return _internal_query();
}
inline void QueryBridgesRequest::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:BICgRPC.QueryBridgesRequest.query)
}
inline std::string* QueryBridgesRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.QueryBridgesRequest.query)
  return _internal_mutable_query();
}
inline const std::string& QueryBridgesRequest::_internal_query() const {
  return query_.Get();
}
inline void QueryBridgesRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryBridgesRequest::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.QueryBridgesRequest.query)
}
inline void QueryBridgesRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.QueryBridgesRequest.query)
}
inline void QueryBridgesRequest::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.QueryBridgesRequest.query)
}
inline std::string* QueryBridgesRequest::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryBridgesRequest::release_query() {
  // @@protoc_insertion_point(field_release:BICgRPC.QueryBridgesRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryBridgesRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.QueryBridgesRequest.query)
}

// -------------------------------------------------------------------

// QueryBridgesResponse

// repeated .BICgRPC.Bridge bridges = 1;
inline int QueryBridgesResponse::_internal_bridges_size() const {
  return bridges_.size();
}
inline int QueryBridgesResponse::bridges_size() const {
  return _internal_bridges_size();
}
inline void QueryBridgesResponse::clear_bridges() {
  bridges_.Clear();
}
inline ::BICgRPC::Bridge* QueryBridgesResponse::mutable_bridges(int index) {
  // @@protoc_insertion_point(field_mutable:BICgRPC.QueryBridgesResponse.bridges)
  return bridges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::Bridge >*
QueryBridgesResponse::mutable_bridges() {
  // @@protoc_insertion_point(field_mutable_list:BICgRPC.QueryBridgesResponse.bridges)
  return &bridges_;
}
inline const ::BICgRPC::Bridge& QueryBridgesResponse::_internal_bridges(int index) const {
  return bridges_.Get(index);
}
inline const ::BICgRPC::Bridge& QueryBridgesResponse::bridges(int index) const {
  // @@protoc_insertion_point(field_get:BICgRPC.QueryBridgesResponse.bridges)
  return _internal_bridges(index);
}
inline ::BICgRPC::Bridge* QueryBridgesResponse::_internal_add_bridges() {
  return bridges_.Add();
}
inline ::BICgRPC::Bridge* QueryBridgesResponse::add_bridges() {
  // @@protoc_insertion_point(field_add:BICgRPC.QueryBridgesResponse.bridges)
  return _internal_add_bridges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BICgRPC::Bridge >&
QueryBridgesResponse::bridges() const {
  // @@protoc_insertion_point(field_list:BICgRPC.QueryBridgesResponse.bridges)
  return bridges_;
}

// -------------------------------------------------------------------

// ConnectBridgeRequest

// string name = 1;
inline void ConnectBridgeRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectBridgeRequest::name() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ConnectBridgeRequest.name)
  return _internal_name();
}
inline void ConnectBridgeRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BICgRPC.ConnectBridgeRequest.name)
}
inline std::string* ConnectBridgeRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.ConnectBridgeRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ConnectBridgeRequest::_internal_name() const {
  return name_.Get();
}
inline void ConnectBridgeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectBridgeRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.ConnectBridgeRequest.name)
}
inline void ConnectBridgeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.ConnectBridgeRequest.name)
}
inline void ConnectBridgeRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.ConnectBridgeRequest.name)
}
inline std::string* ConnectBridgeRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectBridgeRequest::release_name() {
  // @@protoc_insertion_point(field_release:BICgRPC.ConnectBridgeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectBridgeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.ConnectBridgeRequest.name)
}

// .google.protobuf.Any parameters = 2;
inline bool ConnectBridgeRequest::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool ConnectBridgeRequest::has_parameters() const {
  return _internal_has_parameters();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ConnectBridgeRequest::_internal_parameters() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ConnectBridgeRequest::parameters() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ConnectBridgeRequest.parameters)
  return _internal_parameters();
}
inline void ConnectBridgeRequest::unsafe_arena_set_allocated_parameters(
    PROTOBUF_NAMESPACE_ID::Any* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BICgRPC.ConnectBridgeRequest.parameters)
}
inline PROTOBUF_NAMESPACE_ID::Any* ConnectBridgeRequest::release_parameters() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = parameters_;
  parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConnectBridgeRequest::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:BICgRPC.ConnectBridgeRequest.parameters)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConnectBridgeRequest::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConnectBridgeRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.ConnectBridgeRequest.parameters)
  return _internal_mutable_parameters();
}
inline void ConnectBridgeRequest::set_allocated_parameters(PROTOBUF_NAMESPACE_ID::Any* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters)->GetArena();
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.ConnectBridgeRequest.parameters)
}

// -------------------------------------------------------------------

// ConnectBridgeResponse

// string name = 1;
inline void ConnectBridgeResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectBridgeResponse::name() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ConnectBridgeResponse.name)
  return _internal_name();
}
inline void ConnectBridgeResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BICgRPC.ConnectBridgeResponse.name)
}
inline std::string* ConnectBridgeResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.ConnectBridgeResponse.name)
  return _internal_mutable_name();
}
inline const std::string& ConnectBridgeResponse::_internal_name() const {
  return name_.Get();
}
inline void ConnectBridgeResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectBridgeResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.ConnectBridgeResponse.name)
}
inline void ConnectBridgeResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.ConnectBridgeResponse.name)
}
inline void ConnectBridgeResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.ConnectBridgeResponse.name)
}
inline std::string* ConnectBridgeResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectBridgeResponse::release_name() {
  // @@protoc_insertion_point(field_release:BICgRPC.ConnectBridgeResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectBridgeResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.ConnectBridgeResponse.name)
}

// .BICgRPC.ConnectBridgeStatus connection_status = 2;
inline void ConnectBridgeResponse::clear_connection_status() {
  connection_status_ = 0;
}
inline ::BICgRPC::ConnectBridgeStatus ConnectBridgeResponse::_internal_connection_status() const {
  return static_cast< ::BICgRPC::ConnectBridgeStatus >(connection_status_);
}
inline ::BICgRPC::ConnectBridgeStatus ConnectBridgeResponse::connection_status() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ConnectBridgeResponse.connection_status)
  return _internal_connection_status();
}
inline void ConnectBridgeResponse::_internal_set_connection_status(::BICgRPC::ConnectBridgeStatus value) {
  
  connection_status_ = value;
}
inline void ConnectBridgeResponse::set_connection_status(::BICgRPC::ConnectBridgeStatus value) {
  _internal_set_connection_status(value);
  // @@protoc_insertion_point(field_set:BICgRPC.ConnectBridgeResponse.connection_status)
}

// .google.protobuf.Any details = 3;
inline bool ConnectBridgeResponse::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool ConnectBridgeResponse::has_details() const {
  return _internal_has_details();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ConnectBridgeResponse::_internal_details() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = details_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ConnectBridgeResponse::details() const {
  // @@protoc_insertion_point(field_get:BICgRPC.ConnectBridgeResponse.details)
  return _internal_details();
}
inline void ConnectBridgeResponse::unsafe_arena_set_allocated_details(
    PROTOBUF_NAMESPACE_ID::Any* details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BICgRPC.ConnectBridgeResponse.details)
}
inline PROTOBUF_NAMESPACE_ID::Any* ConnectBridgeResponse::release_details() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = details_;
  details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConnectBridgeResponse::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:BICgRPC.ConnectBridgeResponse.details)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = details_;
  details_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConnectBridgeResponse::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    details_ = p;
  }
  return details_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConnectBridgeResponse::mutable_details() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.ConnectBridgeResponse.details)
  return _internal_mutable_details();
}
inline void ConnectBridgeResponse::set_allocated_details(PROTOBUF_NAMESPACE_ID::Any* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details)->GetArena();
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.ConnectBridgeResponse.details)
}

// -------------------------------------------------------------------

// DescribeBridgeRequest

// string name = 1;
inline void DescribeBridgeRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DescribeBridgeRequest::name() const {
  // @@protoc_insertion_point(field_get:BICgRPC.DescribeBridgeRequest.name)
  return _internal_name();
}
inline void DescribeBridgeRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BICgRPC.DescribeBridgeRequest.name)
}
inline std::string* DescribeBridgeRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.DescribeBridgeRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DescribeBridgeRequest::_internal_name() const {
  return name_.Get();
}
inline void DescribeBridgeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DescribeBridgeRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.DescribeBridgeRequest.name)
}
inline void DescribeBridgeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.DescribeBridgeRequest.name)
}
inline void DescribeBridgeRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.DescribeBridgeRequest.name)
}
inline std::string* DescribeBridgeRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DescribeBridgeRequest::release_name() {
  // @@protoc_insertion_point(field_release:BICgRPC.DescribeBridgeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DescribeBridgeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.DescribeBridgeRequest.name)
}

// -------------------------------------------------------------------

// DescribeBridgeResponse

// string name = 1;
inline void DescribeBridgeResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DescribeBridgeResponse::name() const {
  // @@protoc_insertion_point(field_get:BICgRPC.DescribeBridgeResponse.name)
  return _internal_name();
}
inline void DescribeBridgeResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BICgRPC.DescribeBridgeResponse.name)
}
inline std::string* DescribeBridgeResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.DescribeBridgeResponse.name)
  return _internal_mutable_name();
}
inline const std::string& DescribeBridgeResponse::_internal_name() const {
  return name_.Get();
}
inline void DescribeBridgeResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DescribeBridgeResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.DescribeBridgeResponse.name)
}
inline void DescribeBridgeResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.DescribeBridgeResponse.name)
}
inline void DescribeBridgeResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.DescribeBridgeResponse.name)
}
inline std::string* DescribeBridgeResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DescribeBridgeResponse::release_name() {
  // @@protoc_insertion_point(field_release:BICgRPC.DescribeBridgeResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DescribeBridgeResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.DescribeBridgeResponse.name)
}

// .BICgRPC.Bridge details = 2;
inline bool DescribeBridgeResponse::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool DescribeBridgeResponse::has_details() const {
  return _internal_has_details();
}
inline void DescribeBridgeResponse::clear_details() {
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
inline const ::BICgRPC::Bridge& DescribeBridgeResponse::_internal_details() const {
  const ::BICgRPC::Bridge* p = details_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BICgRPC::Bridge*>(
      &::BICgRPC::_Bridge_default_instance_);
}
inline const ::BICgRPC::Bridge& DescribeBridgeResponse::details() const {
  // @@protoc_insertion_point(field_get:BICgRPC.DescribeBridgeResponse.details)
  return _internal_details();
}
inline void DescribeBridgeResponse::unsafe_arena_set_allocated_details(
    ::BICgRPC::Bridge* details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BICgRPC.DescribeBridgeResponse.details)
}
inline ::BICgRPC::Bridge* DescribeBridgeResponse::release_details() {
  
  ::BICgRPC::Bridge* temp = details_;
  details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BICgRPC::Bridge* DescribeBridgeResponse::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:BICgRPC.DescribeBridgeResponse.details)
  
  ::BICgRPC::Bridge* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::BICgRPC::Bridge* DescribeBridgeResponse::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::BICgRPC::Bridge>(GetArena());
    details_ = p;
  }
  return details_;
}
inline ::BICgRPC::Bridge* DescribeBridgeResponse::mutable_details() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.DescribeBridgeResponse.details)
  return _internal_mutable_details();
}
inline void DescribeBridgeResponse::set_allocated_details(::BICgRPC::Bridge* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.DescribeBridgeResponse.details)
}

// .google.protobuf.Any error = 3;
inline bool DescribeBridgeResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool DescribeBridgeResponse::has_error() const {
  return _internal_has_error();
}
inline const PROTOBUF_NAMESPACE_ID::Any& DescribeBridgeResponse::_internal_error() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& DescribeBridgeResponse::error() const {
  // @@protoc_insertion_point(field_get:BICgRPC.DescribeBridgeResponse.error)
  return _internal_error();
}
inline void DescribeBridgeResponse::unsafe_arena_set_allocated_error(
    PROTOBUF_NAMESPACE_ID::Any* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BICgRPC.DescribeBridgeResponse.error)
}
inline PROTOBUF_NAMESPACE_ID::Any* DescribeBridgeResponse::release_error() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* DescribeBridgeResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:BICgRPC.DescribeBridgeResponse.error)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = error_;
  error_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* DescribeBridgeResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    error_ = p;
  }
  return error_;
}
inline PROTOBUF_NAMESPACE_ID::Any* DescribeBridgeResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.DescribeBridgeResponse.error)
  return _internal_mutable_error();
}
inline void DescribeBridgeResponse::set_allocated_error(PROTOBUF_NAMESPACE_ID::Any* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.DescribeBridgeResponse.error)
}

// -------------------------------------------------------------------

// DisconnectBridgeRequest

// string name = 1;
inline void DisconnectBridgeRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DisconnectBridgeRequest::name() const {
  // @@protoc_insertion_point(field_get:BICgRPC.DisconnectBridgeRequest.name)
  return _internal_name();
}
inline void DisconnectBridgeRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BICgRPC.DisconnectBridgeRequest.name)
}
inline std::string* DisconnectBridgeRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BICgRPC.DisconnectBridgeRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DisconnectBridgeRequest::_internal_name() const {
  return name_.Get();
}
inline void DisconnectBridgeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisconnectBridgeRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BICgRPC.DisconnectBridgeRequest.name)
}
inline void DisconnectBridgeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BICgRPC.DisconnectBridgeRequest.name)
}
inline void DisconnectBridgeRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BICgRPC.DisconnectBridgeRequest.name)
}
inline std::string* DisconnectBridgeRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisconnectBridgeRequest::release_name() {
  // @@protoc_insertion_point(field_release:BICgRPC.DisconnectBridgeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisconnectBridgeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BICgRPC.DisconnectBridgeRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BICgRPC

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType>() {
  return ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType_descriptor();
}
template <> struct is_proto_enum< ::BICgRPC::AtomType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BICgRPC::AtomType>() {
  return ::BICgRPC::AtomType_descriptor();
}
template <> struct is_proto_enum< ::BICgRPC::ConnectBridgeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BICgRPC::ConnectBridgeStatus>() {
  return ::BICgRPC::ConnectBridgeStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BICgRPC_2eproto
