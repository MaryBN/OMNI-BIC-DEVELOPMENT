// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BICgRPC.proto

#include "BICgRPC.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_BICgRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bridge_BICgRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BICgRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_bicGetImplantInfoReply_BICgRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BICgRPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicGetImplantInfoReply_bicChannelInfo_BICgRPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace BICgRPC {
class bicSuccessReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicSuccessReply> _instance;
} _bicSuccessReply_default_instance_;
class ScanDevicesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanDevicesRequest> _instance;
} _ScanDevicesRequest_default_instance_;
class ScanDevicesReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanDevicesReply> _instance;
} _ScanDevicesReply_default_instance_;
class ConnectDeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectDeviceRequest> _instance;
} _ConnectDeviceRequest_default_instance_;
class bicGetImplantInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicGetImplantInfoRequest> _instance;
} _bicGetImplantInfoRequest_default_instance_;
class bicGetImplantInfoReply_bicChannelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicGetImplantInfoReply_bicChannelInfo> _instance;
} _bicGetImplantInfoReply_bicChannelInfo_default_instance_;
class bicGetImplantInfoReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicGetImplantInfoReply> _instance;
} _bicGetImplantInfoReply_default_instance_;
class bicSetStreamEnableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicSetStreamEnable> _instance;
} _bicSetStreamEnable_default_instance_;
class bicGetImpedanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicGetImpedanceRequest> _instance;
} _bicGetImpedanceRequest_default_instance_;
class bicGetImpedanceReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicGetImpedanceReply> _instance;
} _bicGetImpedanceReply_default_instance_;
class bicGetTemperatureReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicGetTemperatureReply> _instance;
} _bicGetTemperatureReply_default_instance_;
class bicGetHumidityReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicGetHumidityReply> _instance;
} _bicGetHumidityReply_default_instance_;
class bicSetSensingEnableRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicSetSensingEnableRequest> _instance;
} _bicSetSensingEnableRequest_default_instance_;
class bicSetImplantPowerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicSetImplantPowerRequest> _instance;
} _bicSetImplantPowerRequest_default_instance_;
class bicStartStimulationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bicStartStimulationRequest> _instance;
} _bicStartStimulationRequest_default_instance_;
class TemperatureUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TemperatureUpdate> _instance;
} _TemperatureUpdate_default_instance_;
class HumidityUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HumidityUpdate> _instance;
} _HumidityUpdate_default_instance_;
class BridgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bridge> _instance;
} _Bridge_default_instance_;
class QueryBridgesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryBridgesRequest> _instance;
} _QueryBridgesRequest_default_instance_;
class QueryBridgesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryBridgesResponse> _instance;
} _QueryBridgesResponse_default_instance_;
class ConnectBridgeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectBridgeRequest> _instance;
} _ConnectBridgeRequest_default_instance_;
class ConnectBridgeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectBridgeResponse> _instance;
} _ConnectBridgeResponse_default_instance_;
class DescribeBridgeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeBridgeRequest> _instance;
} _DescribeBridgeRequest_default_instance_;
class DescribeBridgeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeBridgeResponse> _instance;
} _DescribeBridgeResponse_default_instance_;
class DisconnectBridgeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisconnectBridgeRequest> _instance;
} _DisconnectBridgeRequest_default_instance_;
}  // namespace BICgRPC
static void InitDefaultsscc_info_Bridge_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_Bridge_default_instance_;
    new (ptr) ::BICgRPC::Bridge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::Bridge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bridge_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Bridge_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_ConnectBridgeRequest_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_ConnectBridgeRequest_default_instance_;
    new (ptr) ::BICgRPC::ConnectBridgeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::ConnectBridgeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectBridgeRequest_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConnectBridgeRequest_BICgRPC_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ConnectBridgeResponse_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_ConnectBridgeResponse_default_instance_;
    new (ptr) ::BICgRPC::ConnectBridgeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::ConnectBridgeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectBridgeResponse_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConnectBridgeResponse_BICgRPC_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ConnectDeviceRequest_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_ConnectDeviceRequest_default_instance_;
    new (ptr) ::BICgRPC::ConnectDeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::ConnectDeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectDeviceRequest_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectDeviceRequest_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_DescribeBridgeRequest_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_DescribeBridgeRequest_default_instance_;
    new (ptr) ::BICgRPC::DescribeBridgeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::DescribeBridgeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DescribeBridgeRequest_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DescribeBridgeRequest_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_DescribeBridgeResponse_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_DescribeBridgeResponse_default_instance_;
    new (ptr) ::BICgRPC::DescribeBridgeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::DescribeBridgeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DescribeBridgeResponse_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DescribeBridgeResponse_BICgRPC_2eproto}, {
      &scc_info_Bridge_BICgRPC_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_DisconnectBridgeRequest_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_DisconnectBridgeRequest_default_instance_;
    new (ptr) ::BICgRPC::DisconnectBridgeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::DisconnectBridgeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisconnectBridgeRequest_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisconnectBridgeRequest_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_HumidityUpdate_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_HumidityUpdate_default_instance_;
    new (ptr) ::BICgRPC::HumidityUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::HumidityUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HumidityUpdate_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HumidityUpdate_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_QueryBridgesRequest_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_QueryBridgesRequest_default_instance_;
    new (ptr) ::BICgRPC::QueryBridgesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::QueryBridgesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryBridgesRequest_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryBridgesRequest_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_QueryBridgesResponse_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_QueryBridgesResponse_default_instance_;
    new (ptr) ::BICgRPC::QueryBridgesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::QueryBridgesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryBridgesResponse_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryBridgesResponse_BICgRPC_2eproto}, {
      &scc_info_Bridge_BICgRPC_2eproto.base,}};

static void InitDefaultsscc_info_ScanDevicesReply_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_ScanDevicesReply_default_instance_;
    new (ptr) ::BICgRPC::ScanDevicesReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::ScanDevicesReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScanDevicesReply_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScanDevicesReply_BICgRPC_2eproto}, {
      &scc_info_bicGetImplantInfoReply_BICgRPC_2eproto.base,}};

static void InitDefaultsscc_info_ScanDevicesRequest_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_ScanDevicesRequest_default_instance_;
    new (ptr) ::BICgRPC::ScanDevicesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::ScanDevicesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScanDevicesRequest_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScanDevicesRequest_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_TemperatureUpdate_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_TemperatureUpdate_default_instance_;
    new (ptr) ::BICgRPC::TemperatureUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::TemperatureUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TemperatureUpdate_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TemperatureUpdate_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_bicGetHumidityReply_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicGetHumidityReply_default_instance_;
    new (ptr) ::BICgRPC::bicGetHumidityReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicGetHumidityReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicGetHumidityReply_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bicGetHumidityReply_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_bicGetImpedanceReply_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicGetImpedanceReply_default_instance_;
    new (ptr) ::BICgRPC::bicGetImpedanceReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicGetImpedanceReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicGetImpedanceReply_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bicGetImpedanceReply_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_bicGetImpedanceRequest_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicGetImpedanceRequest_default_instance_;
    new (ptr) ::BICgRPC::bicGetImpedanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicGetImpedanceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicGetImpedanceRequest_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bicGetImpedanceRequest_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_bicGetImplantInfoReply_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicGetImplantInfoReply_default_instance_;
    new (ptr) ::BICgRPC::bicGetImplantInfoReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicGetImplantInfoReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_bicGetImplantInfoReply_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_bicGetImplantInfoReply_BICgRPC_2eproto}, {
      &scc_info_bicGetImplantInfoReply_bicChannelInfo_BICgRPC_2eproto.base,}};

static void InitDefaultsscc_info_bicGetImplantInfoReply_bicChannelInfo_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicGetImplantInfoReply_bicChannelInfo_default_instance_;
    new (ptr) ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicGetImplantInfoReply_bicChannelInfo_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bicGetImplantInfoReply_bicChannelInfo_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_bicGetImplantInfoRequest_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicGetImplantInfoRequest_default_instance_;
    new (ptr) ::BICgRPC::bicGetImplantInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicGetImplantInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicGetImplantInfoRequest_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bicGetImplantInfoRequest_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_bicGetTemperatureReply_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicGetTemperatureReply_default_instance_;
    new (ptr) ::BICgRPC::bicGetTemperatureReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicGetTemperatureReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicGetTemperatureReply_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bicGetTemperatureReply_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_bicSetImplantPowerRequest_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicSetImplantPowerRequest_default_instance_;
    new (ptr) ::BICgRPC::bicSetImplantPowerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicSetImplantPowerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicSetImplantPowerRequest_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bicSetImplantPowerRequest_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_bicSetSensingEnableRequest_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicSetSensingEnableRequest_default_instance_;
    new (ptr) ::BICgRPC::bicSetSensingEnableRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicSetSensingEnableRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicSetSensingEnableRequest_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bicSetSensingEnableRequest_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_bicSetStreamEnable_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicSetStreamEnable_default_instance_;
    new (ptr) ::BICgRPC::bicSetStreamEnable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicSetStreamEnable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicSetStreamEnable_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bicSetStreamEnable_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_bicStartStimulationRequest_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicStartStimulationRequest_default_instance_;
    new (ptr) ::BICgRPC::bicStartStimulationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicStartStimulationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicStartStimulationRequest_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bicStartStimulationRequest_BICgRPC_2eproto}, {}};

static void InitDefaultsscc_info_bicSuccessReply_BICgRPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BICgRPC::_bicSuccessReply_default_instance_;
    new (ptr) ::BICgRPC::bicSuccessReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BICgRPC::bicSuccessReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bicSuccessReply_BICgRPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bicSuccessReply_BICgRPC_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_BICgRPC_2eproto[25];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_BICgRPC_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_BICgRPC_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_BICgRPC_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicSuccessReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ScanDevicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ScanDevicesRequest, bridgename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ScanDevicesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ScanDevicesReply, name_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ScanDevicesReply, discovereddevice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ConnectDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ConnectDeviceRequest, deviceaddress_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ConnectDeviceRequest, logfilename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoRequest, updatecachedinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo, canmeasure_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo, measurevaluemin_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo, measurevaluemax_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo, canstimulate_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo, stimulationunit_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo, stimvaluemin_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo, stimvaluemax_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo, canmeasureimpedance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply, firmwareversion_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply, devicetype_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply, deviceid_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply, channelinfolist_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply, channelcount_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply, measurementchannelcount_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply, stimulationchannelcount_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply, samplingrate_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImplantInfoReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicSetStreamEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicSetStreamEnable, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImpedanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImpedanceRequest, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImpedanceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImpedanceReply, channelimpedance_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImpedanceReply, units_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetImpedanceReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetTemperatureReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetTemperatureReply, temperature_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetTemperatureReply, units_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetTemperatureReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetHumidityReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetHumidityReply, humidity_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetHumidityReply, units_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicGetHumidityReply, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicSetSensingEnableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicSetSensingEnableRequest, enablesensing_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicSetSensingEnableRequest, refchannels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicSetImplantPowerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicSetImplantPowerRequest, powerenabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::bicStartStimulationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::TemperatureUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::TemperatureUpdate, temperature_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::TemperatureUpdate, units_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::HumidityUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::HumidityUpdate, humidity_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::HumidityUpdate, units_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::Bridge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::Bridge, name_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::Bridge, implanttype_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::Bridge, deviceid_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::Bridge, firmwareversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::QueryBridgesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::QueryBridgesRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::QueryBridgesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::QueryBridgesResponse, bridges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ConnectBridgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ConnectBridgeRequest, name_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ConnectBridgeRequest, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ConnectBridgeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ConnectBridgeResponse, name_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ConnectBridgeResponse, connection_status_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::ConnectBridgeResponse, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::DescribeBridgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::DescribeBridgeRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::DescribeBridgeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::DescribeBridgeResponse, name_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::DescribeBridgeResponse, details_),
  PROTOBUF_FIELD_OFFSET(::BICgRPC::DescribeBridgeResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::DisconnectBridgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BICgRPC::DisconnectBridgeRequest, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::BICgRPC::bicSuccessReply)},
  { 5, -1, sizeof(::BICgRPC::ScanDevicesRequest)},
  { 11, -1, sizeof(::BICgRPC::ScanDevicesReply)},
  { 18, -1, sizeof(::BICgRPC::ConnectDeviceRequest)},
  { 25, -1, sizeof(::BICgRPC::bicGetImplantInfoRequest)},
  { 31, -1, sizeof(::BICgRPC::bicGetImplantInfoReply_bicChannelInfo)},
  { 44, -1, sizeof(::BICgRPC::bicGetImplantInfoReply)},
  { 58, -1, sizeof(::BICgRPC::bicSetStreamEnable)},
  { 64, -1, sizeof(::BICgRPC::bicGetImpedanceRequest)},
  { 70, -1, sizeof(::BICgRPC::bicGetImpedanceReply)},
  { 78, -1, sizeof(::BICgRPC::bicGetTemperatureReply)},
  { 86, -1, sizeof(::BICgRPC::bicGetHumidityReply)},
  { 94, -1, sizeof(::BICgRPC::bicSetSensingEnableRequest)},
  { 101, -1, sizeof(::BICgRPC::bicSetImplantPowerRequest)},
  { 107, -1, sizeof(::BICgRPC::bicStartStimulationRequest)},
  { 112, -1, sizeof(::BICgRPC::TemperatureUpdate)},
  { 119, -1, sizeof(::BICgRPC::HumidityUpdate)},
  { 126, -1, sizeof(::BICgRPC::Bridge)},
  { 135, -1, sizeof(::BICgRPC::QueryBridgesRequest)},
  { 141, -1, sizeof(::BICgRPC::QueryBridgesResponse)},
  { 147, -1, sizeof(::BICgRPC::ConnectBridgeRequest)},
  { 154, -1, sizeof(::BICgRPC::ConnectBridgeResponse)},
  { 162, -1, sizeof(::BICgRPC::DescribeBridgeRequest)},
  { 168, -1, sizeof(::BICgRPC::DescribeBridgeResponse)},
  { 176, -1, sizeof(::BICgRPC::DisconnectBridgeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicSuccessReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_ScanDevicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_ScanDevicesReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_ConnectDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicGetImplantInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicGetImplantInfoReply_bicChannelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicGetImplantInfoReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicSetStreamEnable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicGetImpedanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicGetImpedanceReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicGetTemperatureReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicGetHumidityReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicSetSensingEnableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicSetImplantPowerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_bicStartStimulationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_TemperatureUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_HumidityUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_Bridge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_QueryBridgesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_QueryBridgesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_ConnectBridgeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_ConnectBridgeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_DescribeBridgeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_DescribeBridgeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BICgRPC::_DisconnectBridgeRequest_default_instance_),
};

const char descriptor_table_protodef_BICgRPC_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rBICgRPC.proto\022\007BICgRPC\032\031google/protobu"
  "f/any.proto\032\033google/protobuf/empty.proto"
  "\"\021\n\017bicSuccessReply\"(\n\022ScanDevicesReques"
  "t\022\022\n\nbridgeName\030\001 \001(\t\"[\n\020ScanDevicesRepl"
  "y\022\014\n\004name\030\001 \001(\t\0229\n\020discoveredDevice\030\002 \001("
  "\0132\037.BICgRPC.bicGetImplantInfoReply\"B\n\024Co"
  "nnectDeviceRequest\022\025\n\rdeviceAddress\030\001 \001("
  "\t\022\023\n\013logFileName\030\002 \001(\t\"4\n\030bicGetImplantI"
  "nfoRequest\022\030\n\020updateCachedInfo\030\001 \001(\010\"\363\004\n"
  "\026bicGetImplantInfoReply\022\027\n\017firmwareVersi"
  "on\030\001 \001(\t\022\022\n\ndeviceType\030\002 \001(\t\022\020\n\010deviceId"
  "\030\003 \001(\t\022G\n\017channelInfoList\030\004 \003(\0132..BICgRP"
  "C.bicGetImplantInfoReply.bicChannelInfo\022"
  "\024\n\014channelCount\030\005 \001(\r\022\037\n\027measurementChan"
  "nelCount\030\006 \001(\r\022\037\n\027stimulationChannelCoun"
  "t\030\007 \001(\r\022\024\n\014samplingRate\030\010 \001(\r\022\017\n\007success"
  "\030\t \001(\t\032\321\002\n\016bicChannelInfo\022\022\n\ncanMeasure\030"
  "\001 \001(\010\022\027\n\017measureValueMin\030\002 \001(\001\022\027\n\017measur"
  "eValueMax\030\003 \001(\001\022\024\n\014canStimulate\030\004 \001(\010\022P\n"
  "\017stimulationUnit\030\005 \001(\01627.BICgRPC.bicGetI"
  "mplantInfoReply.bicChannelInfo.UnitType\022"
  "\024\n\014stimValueMin\030\006 \001(\001\022\024\n\014stimValueMax\030\007 "
  "\001(\001\022\033\n\023canMeasureImpedance\030\010 \001(\010\"H\n\010Unit"
  "Type\022\016\n\nUT_NO_UNIT\020\000\022\016\n\nUT_CURRENT\020\001\022\016\n\n"
  "UT_VOLTAGE\020\002\022\014\n\010UT_COUNT\020\003\"$\n\022bicSetStre"
  "amEnable\022\016\n\006enable\030\001 \001(\010\")\n\026bicGetImpeda"
  "nceRequest\022\017\n\007channel\030\001 \001(\r\"P\n\024bicGetImp"
  "edanceReply\022\030\n\020channelImpedance\030\001 \001(\001\022\r\n"
  "\005units\030\002 \001(\t\022\017\n\007success\030\003 \001(\t\"M\n\026bicGetT"
  "emperatureReply\022\023\n\013temperature\030\001 \001(\001\022\r\n\005"
  "units\030\002 \001(\t\022\017\n\007success\030\003 \001(\t\"G\n\023bicGetHu"
  "midityReply\022\020\n\010humidity\030\001 \001(\001\022\r\n\005units\030\002"
  " \001(\t\022\017\n\007success\030\003 \001(\t\"H\n\032bicSetSensingEn"
  "ableRequest\022\025\n\renableSensing\030\001 \001(\010\022\023\n\013re"
  "fChannels\030\002 \003(\r\"1\n\031bicSetImplantPowerReq"
  "uest\022\024\n\014powerEnabled\030\001 \001(\010\"\034\n\032bicStartSt"
  "imulationRequest\"7\n\021TemperatureUpdate\022\023\n"
  "\013temperature\030\001 \001(\001\022\r\n\005units\030\002 \001(\t\"1\n\016Hum"
  "idityUpdate\022\020\n\010humidity\030\001 \001(\001\022\r\n\005units\030\002"
  " \001(\t\"V\n\006Bridge\022\014\n\004name\030\001 \001(\t\022\023\n\013implantT"
  "ype\030\002 \001(\t\022\020\n\010deviceId\030\003 \001(\t\022\027\n\017firmwareV"
  "ersion\030\004 \001(\t\"$\n\023QueryBridgesRequest\022\r\n\005q"
  "uery\030\001 \001(\t\"8\n\024QueryBridgesResponse\022 \n\007br"
  "idges\030\001 \003(\0132\017.BICgRPC.Bridge\"N\n\024ConnectB"
  "ridgeRequest\022\014\n\004name\030\001 \001(\t\022(\n\nparameters"
  "\030\002 \001(\0132\024.google.protobuf.Any\"\205\001\n\025Connect"
  "BridgeResponse\022\014\n\004name\030\001 \001(\t\0227\n\021connecti"
  "on_status\030\002 \001(\0162\034.BICgRPC.ConnectBridgeS"
  "tatus\022%\n\007details\030\003 \001(\0132\024.google.protobuf"
  ".Any\"%\n\025DescribeBridgeRequest\022\014\n\004name\030\001 "
  "\001(\t\"m\n\026DescribeBridgeResponse\022\014\n\004name\030\001 "
  "\001(\t\022 \n\007details\030\002 \001(\0132\017.BICgRPC.Bridge\022#\n"
  "\005error\030\003 \001(\0132\024.google.protobuf.Any\"\'\n\027Di"
  "sconnectBridgeRequest\022\014\n\004name\030\001 \001(\t*l\n\023C"
  "onnectBridgeStatus\022%\n!CONNECT_BRIDGE_STA"
  "TUS_UNSPECIFIED\020\000\022\026\n\022CONNECTION_SUCCESS\020"
  "\001\022\026\n\022CONNECTION_FAILURE\020\0022\354\003\n\020BICBridgeS"
  "ervice\022J\n\013ListBridges\022\034.BICgRPC.QueryBri"
  "dgesRequest\032\035.BICgRPC.QueryBridgesRespon"
  "se\022J\n\013ScanBridges\022\034.BICgRPC.QueryBridges"
  "Request\032\035.BICgRPC.QueryBridgesResponse\022O"
  "\n\020ConnectedBridges\022\034.BICgRPC.QueryBridge"
  "sRequest\032\035.BICgRPC.QueryBridgesResponse\022"
  "N\n\rConnectBridge\022\035.BICgRPC.ConnectBridge"
  "Request\032\036.BICgRPC.ConnectBridgeResponse\022"
  "Q\n\016DescribeBridge\022\036.BICgRPC.DescribeBrid"
  "geRequest\032\037.BICgRPC.DescribeBridgeRespon"
  "se\022L\n\020DisconnectBridge\022 .BICgRPC.Disconn"
  "ectBridgeRequest\032\026.google.protobuf.Empty"
  "2\247\010\n\020BICDeviceService\022G\n\013ScanDevices\022\033.B"
  "ICgRPC.ScanDevicesRequest\032\031.BICgRPC.Scan"
  "DevicesReply\"\000\022J\n\rConnectDevice\022\035.BICgRP"
  "C.ConnectDeviceRequest\032\030.BICgRPC.bicSucc"
  "essReply\"\000\022@\n\nbicDispose\022\026.google.protob"
  "uf.Empty\032\030.BICgRPC.bicSuccessReply\"\000\022Y\n\021"
  "bicGetImplantInfo\022!.BICgRPC.bicGetImplan"
  "tInfoRequest\032\037.BICgRPC.bicGetImplantInfo"
  "Reply\"\000\022S\n\017bicGetImpedance\022\037.BICgRPC.bic"
  "GetImpedanceRequest\032\035.BICgRPC.bicGetImpe"
  "danceReply\"\000\022N\n\021bicGetTemperature\022\026.goog"
  "le.protobuf.Empty\032\037.BICgRPC.bicGetTemper"
  "atureReply\"\000\022H\n\016bicGetHumidity\022\026.google."
  "protobuf.Empty\032\034.BICgRPC.bicGetHumidityR"
  "eply\"\000\022V\n\023bicSetSensingEnable\022#.BICgRPC."
  "bicSetSensingEnableRequest\032\030.BICgRPC.bic"
  "SuccessReply\"\000\022T\n\022bicSetImplantPower\022\".B"
  "ICgRPC.bicSetImplantPowerRequest\032\030.BICgR"
  "PC.bicSuccessReply\"\000\022V\n\023bicStartStimulat"
  "ion\022#.BICgRPC.bicStartStimulationRequest"
  "\032\030.BICgRPC.bicSuccessReply\"\000\022H\n\022bicStopS"
  "timulation\022\026.google.protobuf.Empty\032\030.BIC"
  "gRPC.bicSuccessReply\"\000\022S\n\024bicTemperature"
  "Stream\022\033.BICgRPC.bicSetStreamEnable\032\032.BI"
  "CgRPC.TemperatureUpdate\"\0000\001\022M\n\021bicHumidi"
  "tyStream\022\033.BICgRPC.bicSetStreamEnable\032\027."
  "BICgRPC.HumidityUpdate\"\0000\001B,\n\017io.grpc.BI"
  "CgRPCB\007BICgRPCP\001\242\002\003HLW\252\002\007BICgRPCb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_BICgRPC_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_BICgRPC_2eproto_sccs[25] = {
  &scc_info_Bridge_BICgRPC_2eproto.base,
  &scc_info_ConnectBridgeRequest_BICgRPC_2eproto.base,
  &scc_info_ConnectBridgeResponse_BICgRPC_2eproto.base,
  &scc_info_ConnectDeviceRequest_BICgRPC_2eproto.base,
  &scc_info_DescribeBridgeRequest_BICgRPC_2eproto.base,
  &scc_info_DescribeBridgeResponse_BICgRPC_2eproto.base,
  &scc_info_DisconnectBridgeRequest_BICgRPC_2eproto.base,
  &scc_info_HumidityUpdate_BICgRPC_2eproto.base,
  &scc_info_QueryBridgesRequest_BICgRPC_2eproto.base,
  &scc_info_QueryBridgesResponse_BICgRPC_2eproto.base,
  &scc_info_ScanDevicesReply_BICgRPC_2eproto.base,
  &scc_info_ScanDevicesRequest_BICgRPC_2eproto.base,
  &scc_info_TemperatureUpdate_BICgRPC_2eproto.base,
  &scc_info_bicGetHumidityReply_BICgRPC_2eproto.base,
  &scc_info_bicGetImpedanceReply_BICgRPC_2eproto.base,
  &scc_info_bicGetImpedanceRequest_BICgRPC_2eproto.base,
  &scc_info_bicGetImplantInfoReply_BICgRPC_2eproto.base,
  &scc_info_bicGetImplantInfoReply_bicChannelInfo_BICgRPC_2eproto.base,
  &scc_info_bicGetImplantInfoRequest_BICgRPC_2eproto.base,
  &scc_info_bicGetTemperatureReply_BICgRPC_2eproto.base,
  &scc_info_bicSetImplantPowerRequest_BICgRPC_2eproto.base,
  &scc_info_bicSetSensingEnableRequest_BICgRPC_2eproto.base,
  &scc_info_bicSetStreamEnable_BICgRPC_2eproto.base,
  &scc_info_bicStartStimulationRequest_BICgRPC_2eproto.base,
  &scc_info_bicSuccessReply_BICgRPC_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_BICgRPC_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BICgRPC_2eproto = {
  false, false, descriptor_table_protodef_BICgRPC_2eproto, "BICgRPC.proto", 3880,
  &descriptor_table_BICgRPC_2eproto_once, descriptor_table_BICgRPC_2eproto_sccs, descriptor_table_BICgRPC_2eproto_deps, 25, 2,
  schemas, file_default_instances, TableStruct_BICgRPC_2eproto::offsets,
  file_level_metadata_BICgRPC_2eproto, 25, file_level_enum_descriptors_BICgRPC_2eproto, file_level_service_descriptors_BICgRPC_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_BICgRPC_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_BICgRPC_2eproto)), true);
namespace BICgRPC {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* bicGetImplantInfoReply_bicChannelInfo_UnitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BICgRPC_2eproto);
  return file_level_enum_descriptors_BICgRPC_2eproto[0];
}
bool bicGetImplantInfoReply_bicChannelInfo_UnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr bicGetImplantInfoReply_bicChannelInfo_UnitType bicGetImplantInfoReply_bicChannelInfo::UT_NO_UNIT;
constexpr bicGetImplantInfoReply_bicChannelInfo_UnitType bicGetImplantInfoReply_bicChannelInfo::UT_CURRENT;
constexpr bicGetImplantInfoReply_bicChannelInfo_UnitType bicGetImplantInfoReply_bicChannelInfo::UT_VOLTAGE;
constexpr bicGetImplantInfoReply_bicChannelInfo_UnitType bicGetImplantInfoReply_bicChannelInfo::UT_COUNT;
constexpr bicGetImplantInfoReply_bicChannelInfo_UnitType bicGetImplantInfoReply_bicChannelInfo::UnitType_MIN;
constexpr bicGetImplantInfoReply_bicChannelInfo_UnitType bicGetImplantInfoReply_bicChannelInfo::UnitType_MAX;
constexpr int bicGetImplantInfoReply_bicChannelInfo::UnitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectBridgeStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_BICgRPC_2eproto);
  return file_level_enum_descriptors_BICgRPC_2eproto[1];
}
bool ConnectBridgeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void bicSuccessReply::InitAsDefaultInstance() {
}
class bicSuccessReply::_Internal {
 public:
};

bicSuccessReply::bicSuccessReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicSuccessReply)
}
bicSuccessReply::bicSuccessReply(const bicSuccessReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicSuccessReply)
}

void bicSuccessReply::SharedCtor() {
}

bicSuccessReply::~bicSuccessReply() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicSuccessReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicSuccessReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void bicSuccessReply::ArenaDtor(void* object) {
  bicSuccessReply* _this = reinterpret_cast< bicSuccessReply* >(object);
  (void)_this;
}
void bicSuccessReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicSuccessReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicSuccessReply& bicSuccessReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicSuccessReply_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicSuccessReply::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicSuccessReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicSuccessReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicSuccessReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicSuccessReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicSuccessReply)
  return target;
}

size_t bicSuccessReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicSuccessReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicSuccessReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicSuccessReply)
  GOOGLE_DCHECK_NE(&from, this);
  const bicSuccessReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicSuccessReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicSuccessReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicSuccessReply)
    MergeFrom(*source);
  }
}

void bicSuccessReply::MergeFrom(const bicSuccessReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicSuccessReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void bicSuccessReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicSuccessReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicSuccessReply::CopyFrom(const bicSuccessReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicSuccessReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicSuccessReply::IsInitialized() const {
  return true;
}

void bicSuccessReply::InternalSwap(bicSuccessReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bicSuccessReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScanDevicesRequest::InitAsDefaultInstance() {
}
class ScanDevicesRequest::_Internal {
 public:
};

ScanDevicesRequest::ScanDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.ScanDevicesRequest)
}
ScanDevicesRequest::ScanDevicesRequest(const ScanDevicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bridgename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bridgename().empty()) {
    bridgename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bridgename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BICgRPC.ScanDevicesRequest)
}

void ScanDevicesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanDevicesRequest_BICgRPC_2eproto.base);
  bridgename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ScanDevicesRequest::~ScanDevicesRequest() {
  // @@protoc_insertion_point(destructor:BICgRPC.ScanDevicesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScanDevicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bridgename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScanDevicesRequest::ArenaDtor(void* object) {
  ScanDevicesRequest* _this = reinterpret_cast< ScanDevicesRequest* >(object);
  (void)_this;
}
void ScanDevicesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanDevicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanDevicesRequest& ScanDevicesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanDevicesRequest_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void ScanDevicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.ScanDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bridgename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanDevicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bridgeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bridgename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.ScanDevicesRequest.bridgeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanDevicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.ScanDevicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bridgeName = 1;
  if (this->bridgename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bridgename().data(), static_cast<int>(this->_internal_bridgename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.ScanDevicesRequest.bridgeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bridgename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.ScanDevicesRequest)
  return target;
}

size_t ScanDevicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.ScanDevicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bridgeName = 1;
  if (this->bridgename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bridgename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanDevicesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.ScanDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanDevicesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanDevicesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.ScanDevicesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.ScanDevicesRequest)
    MergeFrom(*source);
  }
}

void ScanDevicesRequest::MergeFrom(const ScanDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.ScanDevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bridgename().size() > 0) {
    _internal_set_bridgename(from._internal_bridgename());
  }
}

void ScanDevicesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.ScanDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanDevicesRequest::CopyFrom(const ScanDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.ScanDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanDevicesRequest::IsInitialized() const {
  return true;
}

void ScanDevicesRequest::InternalSwap(ScanDevicesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bridgename_.Swap(&other->bridgename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanDevicesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScanDevicesReply::InitAsDefaultInstance() {
  ::BICgRPC::_ScanDevicesReply_default_instance_._instance.get_mutable()->discovereddevice_ = const_cast< ::BICgRPC::bicGetImplantInfoReply*>(
      ::BICgRPC::bicGetImplantInfoReply::internal_default_instance());
}
class ScanDevicesReply::_Internal {
 public:
  static const ::BICgRPC::bicGetImplantInfoReply& discovereddevice(const ScanDevicesReply* msg);
};

const ::BICgRPC::bicGetImplantInfoReply&
ScanDevicesReply::_Internal::discovereddevice(const ScanDevicesReply* msg) {
  return *msg->discovereddevice_;
}
ScanDevicesReply::ScanDevicesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.ScanDevicesReply)
}
ScanDevicesReply::ScanDevicesReply(const ScanDevicesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_discovereddevice()) {
    discovereddevice_ = new ::BICgRPC::bicGetImplantInfoReply(*from.discovereddevice_);
  } else {
    discovereddevice_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BICgRPC.ScanDevicesReply)
}

void ScanDevicesReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanDevicesReply_BICgRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  discovereddevice_ = nullptr;
}

ScanDevicesReply::~ScanDevicesReply() {
  // @@protoc_insertion_point(destructor:BICgRPC.ScanDevicesReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScanDevicesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete discovereddevice_;
}

void ScanDevicesReply::ArenaDtor(void* object) {
  ScanDevicesReply* _this = reinterpret_cast< ScanDevicesReply* >(object);
  (void)_this;
}
void ScanDevicesReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanDevicesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanDevicesReply& ScanDevicesReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanDevicesReply_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void ScanDevicesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.ScanDevicesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && discovereddevice_ != nullptr) {
    delete discovereddevice_;
  }
  discovereddevice_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanDevicesReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.ScanDevicesReply.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BICgRPC.bicGetImplantInfoReply discoveredDevice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_discovereddevice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanDevicesReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.ScanDevicesReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.ScanDevicesReply.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .BICgRPC.bicGetImplantInfoReply discoveredDevice = 2;
  if (this->has_discovereddevice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::discovereddevice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.ScanDevicesReply)
  return target;
}

size_t ScanDevicesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.ScanDevicesReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .BICgRPC.bicGetImplantInfoReply discoveredDevice = 2;
  if (this->has_discovereddevice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *discovereddevice_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanDevicesReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.ScanDevicesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanDevicesReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanDevicesReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.ScanDevicesReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.ScanDevicesReply)
    MergeFrom(*source);
  }
}

void ScanDevicesReply::MergeFrom(const ScanDevicesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.ScanDevicesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_discovereddevice()) {
    _internal_mutable_discovereddevice()->::BICgRPC::bicGetImplantInfoReply::MergeFrom(from._internal_discovereddevice());
  }
}

void ScanDevicesReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.ScanDevicesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanDevicesReply::CopyFrom(const ScanDevicesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.ScanDevicesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanDevicesReply::IsInitialized() const {
  return true;
}

void ScanDevicesReply::InternalSwap(ScanDevicesReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(discovereddevice_, other->discovereddevice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanDevicesReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectDeviceRequest::InitAsDefaultInstance() {
}
class ConnectDeviceRequest::_Internal {
 public:
};

ConnectDeviceRequest::ConnectDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.ConnectDeviceRequest)
}
ConnectDeviceRequest::ConnectDeviceRequest(const ConnectDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deviceaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceaddress().empty()) {
    deviceaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_deviceaddress(),
      GetArena());
  }
  logfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logfilename().empty()) {
    logfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_logfilename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BICgRPC.ConnectDeviceRequest)
}

void ConnectDeviceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectDeviceRequest_BICgRPC_2eproto.base);
  deviceaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConnectDeviceRequest::~ConnectDeviceRequest() {
  // @@protoc_insertion_point(destructor:BICgRPC.ConnectDeviceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  deviceaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectDeviceRequest::ArenaDtor(void* object) {
  ConnectDeviceRequest* _this = reinterpret_cast< ConnectDeviceRequest* >(object);
  (void)_this;
}
void ConnectDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectDeviceRequest& ConnectDeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectDeviceRequest_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void ConnectDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.ConnectDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logfilename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string deviceAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.ConnectDeviceRequest.deviceAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logFileName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_logfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.ConnectDeviceRequest.logFileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.ConnectDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceAddress = 1;
  if (this->deviceaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceaddress().data(), static_cast<int>(this->_internal_deviceaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.ConnectDeviceRequest.deviceAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceaddress(), target);
  }

  // string logFileName = 2;
  if (this->logfilename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logfilename().data(), static_cast<int>(this->_internal_logfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.ConnectDeviceRequest.logFileName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_logfilename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.ConnectDeviceRequest)
  return target;
}

size_t ConnectDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.ConnectDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceAddress = 1;
  if (this->deviceaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceaddress());
  }

  // string logFileName = 2;
  if (this->logfilename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logfilename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectDeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.ConnectDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectDeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectDeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.ConnectDeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.ConnectDeviceRequest)
    MergeFrom(*source);
  }
}

void ConnectDeviceRequest::MergeFrom(const ConnectDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.ConnectDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceaddress().size() > 0) {
    _internal_set_deviceaddress(from._internal_deviceaddress());
  }
  if (from.logfilename().size() > 0) {
    _internal_set_logfilename(from._internal_logfilename());
  }
}

void ConnectDeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.ConnectDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectDeviceRequest::CopyFrom(const ConnectDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.ConnectDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectDeviceRequest::IsInitialized() const {
  return true;
}

void ConnectDeviceRequest::InternalSwap(ConnectDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deviceaddress_.Swap(&other->deviceaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logfilename_.Swap(&other->logfilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectDeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bicGetImplantInfoRequest::InitAsDefaultInstance() {
}
class bicGetImplantInfoRequest::_Internal {
 public:
};

bicGetImplantInfoRequest::bicGetImplantInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicGetImplantInfoRequest)
}
bicGetImplantInfoRequest::bicGetImplantInfoRequest(const bicGetImplantInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  updatecachedinfo_ = from.updatecachedinfo_;
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicGetImplantInfoRequest)
}

void bicGetImplantInfoRequest::SharedCtor() {
  updatecachedinfo_ = false;
}

bicGetImplantInfoRequest::~bicGetImplantInfoRequest() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicGetImplantInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicGetImplantInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void bicGetImplantInfoRequest::ArenaDtor(void* object) {
  bicGetImplantInfoRequest* _this = reinterpret_cast< bicGetImplantInfoRequest* >(object);
  (void)_this;
}
void bicGetImplantInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicGetImplantInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicGetImplantInfoRequest& bicGetImplantInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicGetImplantInfoRequest_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicGetImplantInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicGetImplantInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updatecachedinfo_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicGetImplantInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool updateCachedInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          updatecachedinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicGetImplantInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicGetImplantInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool updateCachedInfo = 1;
  if (this->updatecachedinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_updatecachedinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicGetImplantInfoRequest)
  return target;
}

size_t bicGetImplantInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicGetImplantInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool updateCachedInfo = 1;
  if (this->updatecachedinfo() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicGetImplantInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicGetImplantInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const bicGetImplantInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicGetImplantInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicGetImplantInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicGetImplantInfoRequest)
    MergeFrom(*source);
  }
}

void bicGetImplantInfoRequest::MergeFrom(const bicGetImplantInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicGetImplantInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.updatecachedinfo() != 0) {
    _internal_set_updatecachedinfo(from._internal_updatecachedinfo());
  }
}

void bicGetImplantInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicGetImplantInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicGetImplantInfoRequest::CopyFrom(const bicGetImplantInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicGetImplantInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicGetImplantInfoRequest::IsInitialized() const {
  return true;
}

void bicGetImplantInfoRequest::InternalSwap(bicGetImplantInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(updatecachedinfo_, other->updatecachedinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bicGetImplantInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bicGetImplantInfoReply_bicChannelInfo::InitAsDefaultInstance() {
}
class bicGetImplantInfoReply_bicChannelInfo::_Internal {
 public:
};

bicGetImplantInfoReply_bicChannelInfo::bicGetImplantInfoReply_bicChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
}
bicGetImplantInfoReply_bicChannelInfo::bicGetImplantInfoReply_bicChannelInfo(const bicGetImplantInfoReply_bicChannelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&measurevaluemin_, &from.measurevaluemin_,
    static_cast<size_t>(reinterpret_cast<char*>(&stimvaluemax_) -
    reinterpret_cast<char*>(&measurevaluemin_)) + sizeof(stimvaluemax_));
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
}

void bicGetImplantInfoReply_bicChannelInfo::SharedCtor() {
  ::memset(&measurevaluemin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stimvaluemax_) -
      reinterpret_cast<char*>(&measurevaluemin_)) + sizeof(stimvaluemax_));
}

bicGetImplantInfoReply_bicChannelInfo::~bicGetImplantInfoReply_bicChannelInfo() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicGetImplantInfoReply_bicChannelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void bicGetImplantInfoReply_bicChannelInfo::ArenaDtor(void* object) {
  bicGetImplantInfoReply_bicChannelInfo* _this = reinterpret_cast< bicGetImplantInfoReply_bicChannelInfo* >(object);
  (void)_this;
}
void bicGetImplantInfoReply_bicChannelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicGetImplantInfoReply_bicChannelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicGetImplantInfoReply_bicChannelInfo& bicGetImplantInfoReply_bicChannelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicGetImplantInfoReply_bicChannelInfo_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicGetImplantInfoReply_bicChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&measurevaluemin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stimvaluemax_) -
      reinterpret_cast<char*>(&measurevaluemin_)) + sizeof(stimvaluemax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicGetImplantInfoReply_bicChannelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool canMeasure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          canmeasure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double measureValueMin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          measurevaluemin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double measureValueMax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          measurevaluemax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool canStimulate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          canstimulate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BICgRPC.bicGetImplantInfoReply.bicChannelInfo.UnitType stimulationUnit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stimulationunit(static_cast<::BICgRPC::bicGetImplantInfoReply_bicChannelInfo_UnitType>(val));
        } else goto handle_unusual;
        continue;
      // double stimValueMin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          stimvaluemin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stimValueMax = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          stimvaluemax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool canMeasureImpedance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          canmeasureimpedance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicGetImplantInfoReply_bicChannelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool canMeasure = 1;
  if (this->canmeasure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_canmeasure(), target);
  }

  // double measureValueMin = 2;
  if (!(this->measurevaluemin() <= 0 && this->measurevaluemin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_measurevaluemin(), target);
  }

  // double measureValueMax = 3;
  if (!(this->measurevaluemax() <= 0 && this->measurevaluemax() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_measurevaluemax(), target);
  }

  // bool canStimulate = 4;
  if (this->canstimulate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_canstimulate(), target);
  }

  // .BICgRPC.bicGetImplantInfoReply.bicChannelInfo.UnitType stimulationUnit = 5;
  if (this->stimulationunit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_stimulationunit(), target);
  }

  // double stimValueMin = 6;
  if (!(this->stimvaluemin() <= 0 && this->stimvaluemin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_stimvaluemin(), target);
  }

  // double stimValueMax = 7;
  if (!(this->stimvaluemax() <= 0 && this->stimvaluemax() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_stimvaluemax(), target);
  }

  // bool canMeasureImpedance = 8;
  if (this->canmeasureimpedance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_canmeasureimpedance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
  return target;
}

size_t bicGetImplantInfoReply_bicChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double measureValueMin = 2;
  if (!(this->measurevaluemin() <= 0 && this->measurevaluemin() >= 0)) {
    total_size += 1 + 8;
  }

  // double measureValueMax = 3;
  if (!(this->measurevaluemax() <= 0 && this->measurevaluemax() >= 0)) {
    total_size += 1 + 8;
  }

  // bool canMeasure = 1;
  if (this->canmeasure() != 0) {
    total_size += 1 + 1;
  }

  // bool canStimulate = 4;
  if (this->canstimulate() != 0) {
    total_size += 1 + 1;
  }

  // bool canMeasureImpedance = 8;
  if (this->canmeasureimpedance() != 0) {
    total_size += 1 + 1;
  }

  // .BICgRPC.bicGetImplantInfoReply.bicChannelInfo.UnitType stimulationUnit = 5;
  if (this->stimulationunit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stimulationunit());
  }

  // double stimValueMin = 6;
  if (!(this->stimvaluemin() <= 0 && this->stimvaluemin() >= 0)) {
    total_size += 1 + 8;
  }

  // double stimValueMax = 7;
  if (!(this->stimvaluemax() <= 0 && this->stimvaluemax() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicGetImplantInfoReply_bicChannelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const bicGetImplantInfoReply_bicChannelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicGetImplantInfoReply_bicChannelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
    MergeFrom(*source);
  }
}

void bicGetImplantInfoReply_bicChannelInfo::MergeFrom(const bicGetImplantInfoReply_bicChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.measurevaluemin() <= 0 && from.measurevaluemin() >= 0)) {
    _internal_set_measurevaluemin(from._internal_measurevaluemin());
  }
  if (!(from.measurevaluemax() <= 0 && from.measurevaluemax() >= 0)) {
    _internal_set_measurevaluemax(from._internal_measurevaluemax());
  }
  if (from.canmeasure() != 0) {
    _internal_set_canmeasure(from._internal_canmeasure());
  }
  if (from.canstimulate() != 0) {
    _internal_set_canstimulate(from._internal_canstimulate());
  }
  if (from.canmeasureimpedance() != 0) {
    _internal_set_canmeasureimpedance(from._internal_canmeasureimpedance());
  }
  if (from.stimulationunit() != 0) {
    _internal_set_stimulationunit(from._internal_stimulationunit());
  }
  if (!(from.stimvaluemin() <= 0 && from.stimvaluemin() >= 0)) {
    _internal_set_stimvaluemin(from._internal_stimvaluemin());
  }
  if (!(from.stimvaluemax() <= 0 && from.stimvaluemax() >= 0)) {
    _internal_set_stimvaluemax(from._internal_stimvaluemax());
  }
}

void bicGetImplantInfoReply_bicChannelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicGetImplantInfoReply_bicChannelInfo::CopyFrom(const bicGetImplantInfoReply_bicChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicGetImplantInfoReply.bicChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicGetImplantInfoReply_bicChannelInfo::IsInitialized() const {
  return true;
}

void bicGetImplantInfoReply_bicChannelInfo::InternalSwap(bicGetImplantInfoReply_bicChannelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(bicGetImplantInfoReply_bicChannelInfo, stimvaluemax_)
      + sizeof(bicGetImplantInfoReply_bicChannelInfo::stimvaluemax_)
      - PROTOBUF_FIELD_OFFSET(bicGetImplantInfoReply_bicChannelInfo, measurevaluemin_)>(
          reinterpret_cast<char*>(&measurevaluemin_),
          reinterpret_cast<char*>(&other->measurevaluemin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata bicGetImplantInfoReply_bicChannelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bicGetImplantInfoReply::InitAsDefaultInstance() {
}
class bicGetImplantInfoReply::_Internal {
 public:
};

bicGetImplantInfoReply::bicGetImplantInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channelinfolist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicGetImplantInfoReply)
}
bicGetImplantInfoReply::bicGetImplantInfoReply(const bicGetImplantInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channelinfolist_(from.channelinfolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  firmwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firmwareversion().empty()) {
    firmwareversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_firmwareversion(),
      GetArena());
  }
  devicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devicetype().empty()) {
    devicetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_devicetype(),
      GetArena());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_deviceid(),
      GetArena());
  }
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_success().empty()) {
    success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_success(),
      GetArena());
  }
  ::memcpy(&channelcount_, &from.channelcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&samplingrate_) -
    reinterpret_cast<char*>(&channelcount_)) + sizeof(samplingrate_));
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicGetImplantInfoReply)
}

void bicGetImplantInfoReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_bicGetImplantInfoReply_BICgRPC_2eproto.base);
  firmwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channelcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samplingrate_) -
      reinterpret_cast<char*>(&channelcount_)) + sizeof(samplingrate_));
}

bicGetImplantInfoReply::~bicGetImplantInfoReply() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicGetImplantInfoReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicGetImplantInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  firmwareversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void bicGetImplantInfoReply::ArenaDtor(void* object) {
  bicGetImplantInfoReply* _this = reinterpret_cast< bicGetImplantInfoReply* >(object);
  (void)_this;
}
void bicGetImplantInfoReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicGetImplantInfoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicGetImplantInfoReply& bicGetImplantInfoReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicGetImplantInfoReply_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicGetImplantInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicGetImplantInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelinfolist_.Clear();
  firmwareversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  devicetype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deviceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&channelcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samplingrate_) -
      reinterpret_cast<char*>(&channelcount_)) + sizeof(samplingrate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicGetImplantInfoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string firmwareVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_firmwareversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.bicGetImplantInfoReply.firmwareVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_devicetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.bicGetImplantInfoReply.deviceType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.bicGetImplantInfoReply.deviceId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BICgRPC.bicGetImplantInfoReply.bicChannelInfo channelInfoList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channelinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 channelCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          channelcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 measurementChannelCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          measurementchannelcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stimulationChannelCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          stimulationchannelcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 samplingRate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          samplingrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string success = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_success();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.bicGetImplantInfoReply.success"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicGetImplantInfoReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicGetImplantInfoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firmwareversion().data(), static_cast<int>(this->_internal_firmwareversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.bicGetImplantInfoReply.firmwareVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_firmwareversion(), target);
  }

  // string deviceType = 2;
  if (this->devicetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicetype().data(), static_cast<int>(this->_internal_devicetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.bicGetImplantInfoReply.deviceType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_devicetype(), target);
  }

  // string deviceId = 3;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.bicGetImplantInfoReply.deviceId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_deviceid(), target);
  }

  // repeated .BICgRPC.bicGetImplantInfoReply.bicChannelInfo channelInfoList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channelinfolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_channelinfolist(i), target, stream);
  }

  // uint32 channelCount = 5;
  if (this->channelcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channelcount(), target);
  }

  // uint32 measurementChannelCount = 6;
  if (this->measurementchannelcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_measurementchannelcount(), target);
  }

  // uint32 stimulationChannelCount = 7;
  if (this->stimulationchannelcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_stimulationchannelcount(), target);
  }

  // uint32 samplingRate = 8;
  if (this->samplingrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_samplingrate(), target);
  }

  // string success = 9;
  if (this->success().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success().data(), static_cast<int>(this->_internal_success().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.bicGetImplantInfoReply.success");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicGetImplantInfoReply)
  return target;
}

size_t bicGetImplantInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicGetImplantInfoReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BICgRPC.bicGetImplantInfoReply.bicChannelInfo channelInfoList = 4;
  total_size += 1UL * this->_internal_channelinfolist_size();
  for (const auto& msg : this->channelinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firmwareversion());
  }

  // string deviceType = 2;
  if (this->devicetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicetype());
  }

  // string deviceId = 3;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string success = 9;
  if (this->success().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_success());
  }

  // uint32 channelCount = 5;
  if (this->channelcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channelcount());
  }

  // uint32 measurementChannelCount = 6;
  if (this->measurementchannelcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_measurementchannelcount());
  }

  // uint32 stimulationChannelCount = 7;
  if (this->stimulationchannelcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stimulationchannelcount());
  }

  // uint32 samplingRate = 8;
  if (this->samplingrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_samplingrate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicGetImplantInfoReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicGetImplantInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const bicGetImplantInfoReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicGetImplantInfoReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicGetImplantInfoReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicGetImplantInfoReply)
    MergeFrom(*source);
  }
}

void bicGetImplantInfoReply::MergeFrom(const bicGetImplantInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicGetImplantInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channelinfolist_.MergeFrom(from.channelinfolist_);
  if (from.firmwareversion().size() > 0) {
    _internal_set_firmwareversion(from._internal_firmwareversion());
  }
  if (from.devicetype().size() > 0) {
    _internal_set_devicetype(from._internal_devicetype());
  }
  if (from.deviceid().size() > 0) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (from.success().size() > 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.channelcount() != 0) {
    _internal_set_channelcount(from._internal_channelcount());
  }
  if (from.measurementchannelcount() != 0) {
    _internal_set_measurementchannelcount(from._internal_measurementchannelcount());
  }
  if (from.stimulationchannelcount() != 0) {
    _internal_set_stimulationchannelcount(from._internal_stimulationchannelcount());
  }
  if (from.samplingrate() != 0) {
    _internal_set_samplingrate(from._internal_samplingrate());
  }
}

void bicGetImplantInfoReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicGetImplantInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicGetImplantInfoReply::CopyFrom(const bicGetImplantInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicGetImplantInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicGetImplantInfoReply::IsInitialized() const {
  return true;
}

void bicGetImplantInfoReply::InternalSwap(bicGetImplantInfoReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channelinfolist_.InternalSwap(&other->channelinfolist_);
  firmwareversion_.Swap(&other->firmwareversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  devicetype_.Swap(&other->devicetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_.Swap(&other->success_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(bicGetImplantInfoReply, samplingrate_)
      + sizeof(bicGetImplantInfoReply::samplingrate_)
      - PROTOBUF_FIELD_OFFSET(bicGetImplantInfoReply, channelcount_)>(
          reinterpret_cast<char*>(&channelcount_),
          reinterpret_cast<char*>(&other->channelcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata bicGetImplantInfoReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bicSetStreamEnable::InitAsDefaultInstance() {
}
class bicSetStreamEnable::_Internal {
 public:
};

bicSetStreamEnable::bicSetStreamEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicSetStreamEnable)
}
bicSetStreamEnable::bicSetStreamEnable(const bicSetStreamEnable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicSetStreamEnable)
}

void bicSetStreamEnable::SharedCtor() {
  enable_ = false;
}

bicSetStreamEnable::~bicSetStreamEnable() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicSetStreamEnable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicSetStreamEnable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void bicSetStreamEnable::ArenaDtor(void* object) {
  bicSetStreamEnable* _this = reinterpret_cast< bicSetStreamEnable* >(object);
  (void)_this;
}
void bicSetStreamEnable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicSetStreamEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicSetStreamEnable& bicSetStreamEnable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicSetStreamEnable_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicSetStreamEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicSetStreamEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicSetStreamEnable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicSetStreamEnable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicSetStreamEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicSetStreamEnable)
  return target;
}

size_t bicSetStreamEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicSetStreamEnable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicSetStreamEnable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicSetStreamEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const bicSetStreamEnable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicSetStreamEnable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicSetStreamEnable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicSetStreamEnable)
    MergeFrom(*source);
  }
}

void bicSetStreamEnable::MergeFrom(const bicSetStreamEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicSetStreamEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void bicSetStreamEnable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicSetStreamEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicSetStreamEnable::CopyFrom(const bicSetStreamEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicSetStreamEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicSetStreamEnable::IsInitialized() const {
  return true;
}

void bicSetStreamEnable::InternalSwap(bicSetStreamEnable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bicSetStreamEnable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bicGetImpedanceRequest::InitAsDefaultInstance() {
}
class bicGetImpedanceRequest::_Internal {
 public:
};

bicGetImpedanceRequest::bicGetImpedanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicGetImpedanceRequest)
}
bicGetImpedanceRequest::bicGetImpedanceRequest(const bicGetImpedanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicGetImpedanceRequest)
}

void bicGetImpedanceRequest::SharedCtor() {
  channel_ = 0u;
}

bicGetImpedanceRequest::~bicGetImpedanceRequest() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicGetImpedanceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicGetImpedanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void bicGetImpedanceRequest::ArenaDtor(void* object) {
  bicGetImpedanceRequest* _this = reinterpret_cast< bicGetImpedanceRequest* >(object);
  (void)_this;
}
void bicGetImpedanceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicGetImpedanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicGetImpedanceRequest& bicGetImpedanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicGetImpedanceRequest_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicGetImpedanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicGetImpedanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicGetImpedanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicGetImpedanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicGetImpedanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicGetImpedanceRequest)
  return target;
}

size_t bicGetImpedanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicGetImpedanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicGetImpedanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicGetImpedanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const bicGetImpedanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicGetImpedanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicGetImpedanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicGetImpedanceRequest)
    MergeFrom(*source);
  }
}

void bicGetImpedanceRequest::MergeFrom(const bicGetImpedanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicGetImpedanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
}

void bicGetImpedanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicGetImpedanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicGetImpedanceRequest::CopyFrom(const bicGetImpedanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicGetImpedanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicGetImpedanceRequest::IsInitialized() const {
  return true;
}

void bicGetImpedanceRequest::InternalSwap(bicGetImpedanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bicGetImpedanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bicGetImpedanceReply::InitAsDefaultInstance() {
}
class bicGetImpedanceReply::_Internal {
 public:
};

bicGetImpedanceReply::bicGetImpedanceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicGetImpedanceReply)
}
bicGetImpedanceReply::bicGetImpedanceReply(const bicGetImpedanceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_units().empty()) {
    units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_units(),
      GetArena());
  }
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_success().empty()) {
    success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_success(),
      GetArena());
  }
  channelimpedance_ = from.channelimpedance_;
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicGetImpedanceReply)
}

void bicGetImpedanceReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_bicGetImpedanceReply_BICgRPC_2eproto.base);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelimpedance_ = 0;
}

bicGetImpedanceReply::~bicGetImpedanceReply() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicGetImpedanceReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicGetImpedanceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void bicGetImpedanceReply::ArenaDtor(void* object) {
  bicGetImpedanceReply* _this = reinterpret_cast< bicGetImpedanceReply* >(object);
  (void)_this;
}
void bicGetImpedanceReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicGetImpedanceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicGetImpedanceReply& bicGetImpedanceReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicGetImpedanceReply_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicGetImpedanceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicGetImpedanceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channelimpedance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicGetImpedanceReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double channelImpedance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          channelimpedance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.bicGetImpedanceReply.units"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_success();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.bicGetImpedanceReply.success"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicGetImpedanceReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicGetImpedanceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double channelImpedance = 1;
  if (!(this->channelimpedance() <= 0 && this->channelimpedance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_channelimpedance(), target);
  }

  // string units = 2;
  if (this->units().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.bicGetImpedanceReply.units");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_units(), target);
  }

  // string success = 3;
  if (this->success().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success().data(), static_cast<int>(this->_internal_success().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.bicGetImpedanceReply.success");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicGetImpedanceReply)
  return target;
}

size_t bicGetImpedanceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicGetImpedanceReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string units = 2;
  if (this->units().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_units());
  }

  // string success = 3;
  if (this->success().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_success());
  }

  // double channelImpedance = 1;
  if (!(this->channelimpedance() <= 0 && this->channelimpedance() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicGetImpedanceReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicGetImpedanceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const bicGetImpedanceReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicGetImpedanceReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicGetImpedanceReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicGetImpedanceReply)
    MergeFrom(*source);
  }
}

void bicGetImpedanceReply::MergeFrom(const bicGetImpedanceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicGetImpedanceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.units().size() > 0) {
    _internal_set_units(from._internal_units());
  }
  if (from.success().size() > 0) {
    _internal_set_success(from._internal_success());
  }
  if (!(from.channelimpedance() <= 0 && from.channelimpedance() >= 0)) {
    _internal_set_channelimpedance(from._internal_channelimpedance());
  }
}

void bicGetImpedanceReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicGetImpedanceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicGetImpedanceReply::CopyFrom(const bicGetImpedanceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicGetImpedanceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicGetImpedanceReply::IsInitialized() const {
  return true;
}

void bicGetImpedanceReply::InternalSwap(bicGetImpedanceReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  units_.Swap(&other->units_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_.Swap(&other->success_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(channelimpedance_, other->channelimpedance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bicGetImpedanceReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bicGetTemperatureReply::InitAsDefaultInstance() {
}
class bicGetTemperatureReply::_Internal {
 public:
};

bicGetTemperatureReply::bicGetTemperatureReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicGetTemperatureReply)
}
bicGetTemperatureReply::bicGetTemperatureReply(const bicGetTemperatureReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_units().empty()) {
    units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_units(),
      GetArena());
  }
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_success().empty()) {
    success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_success(),
      GetArena());
  }
  temperature_ = from.temperature_;
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicGetTemperatureReply)
}

void bicGetTemperatureReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_bicGetTemperatureReply_BICgRPC_2eproto.base);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  temperature_ = 0;
}

bicGetTemperatureReply::~bicGetTemperatureReply() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicGetTemperatureReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicGetTemperatureReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void bicGetTemperatureReply::ArenaDtor(void* object) {
  bicGetTemperatureReply* _this = reinterpret_cast< bicGetTemperatureReply* >(object);
  (void)_this;
}
void bicGetTemperatureReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicGetTemperatureReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicGetTemperatureReply& bicGetTemperatureReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicGetTemperatureReply_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicGetTemperatureReply::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicGetTemperatureReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  temperature_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicGetTemperatureReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.bicGetTemperatureReply.units"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_success();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.bicGetTemperatureReply.success"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicGetTemperatureReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicGetTemperatureReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double temperature = 1;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_temperature(), target);
  }

  // string units = 2;
  if (this->units().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.bicGetTemperatureReply.units");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_units(), target);
  }

  // string success = 3;
  if (this->success().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success().data(), static_cast<int>(this->_internal_success().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.bicGetTemperatureReply.success");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicGetTemperatureReply)
  return target;
}

size_t bicGetTemperatureReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicGetTemperatureReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string units = 2;
  if (this->units().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_units());
  }

  // string success = 3;
  if (this->success().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_success());
  }

  // double temperature = 1;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicGetTemperatureReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicGetTemperatureReply)
  GOOGLE_DCHECK_NE(&from, this);
  const bicGetTemperatureReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicGetTemperatureReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicGetTemperatureReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicGetTemperatureReply)
    MergeFrom(*source);
  }
}

void bicGetTemperatureReply::MergeFrom(const bicGetTemperatureReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicGetTemperatureReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.units().size() > 0) {
    _internal_set_units(from._internal_units());
  }
  if (from.success().size() > 0) {
    _internal_set_success(from._internal_success());
  }
  if (!(from.temperature() <= 0 && from.temperature() >= 0)) {
    _internal_set_temperature(from._internal_temperature());
  }
}

void bicGetTemperatureReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicGetTemperatureReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicGetTemperatureReply::CopyFrom(const bicGetTemperatureReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicGetTemperatureReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicGetTemperatureReply::IsInitialized() const {
  return true;
}

void bicGetTemperatureReply::InternalSwap(bicGetTemperatureReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  units_.Swap(&other->units_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_.Swap(&other->success_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(temperature_, other->temperature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bicGetTemperatureReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bicGetHumidityReply::InitAsDefaultInstance() {
}
class bicGetHumidityReply::_Internal {
 public:
};

bicGetHumidityReply::bicGetHumidityReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicGetHumidityReply)
}
bicGetHumidityReply::bicGetHumidityReply(const bicGetHumidityReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_units().empty()) {
    units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_units(),
      GetArena());
  }
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_success().empty()) {
    success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_success(),
      GetArena());
  }
  humidity_ = from.humidity_;
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicGetHumidityReply)
}

void bicGetHumidityReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_bicGetHumidityReply_BICgRPC_2eproto.base);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  humidity_ = 0;
}

bicGetHumidityReply::~bicGetHumidityReply() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicGetHumidityReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicGetHumidityReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void bicGetHumidityReply::ArenaDtor(void* object) {
  bicGetHumidityReply* _this = reinterpret_cast< bicGetHumidityReply* >(object);
  (void)_this;
}
void bicGetHumidityReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicGetHumidityReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicGetHumidityReply& bicGetHumidityReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicGetHumidityReply_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicGetHumidityReply::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicGetHumidityReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  humidity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicGetHumidityReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double humidity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.bicGetHumidityReply.units"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_success();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.bicGetHumidityReply.success"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicGetHumidityReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicGetHumidityReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double humidity = 1;
  if (!(this->humidity() <= 0 && this->humidity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_humidity(), target);
  }

  // string units = 2;
  if (this->units().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.bicGetHumidityReply.units");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_units(), target);
  }

  // string success = 3;
  if (this->success().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success().data(), static_cast<int>(this->_internal_success().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.bicGetHumidityReply.success");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicGetHumidityReply)
  return target;
}

size_t bicGetHumidityReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicGetHumidityReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string units = 2;
  if (this->units().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_units());
  }

  // string success = 3;
  if (this->success().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_success());
  }

  // double humidity = 1;
  if (!(this->humidity() <= 0 && this->humidity() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicGetHumidityReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicGetHumidityReply)
  GOOGLE_DCHECK_NE(&from, this);
  const bicGetHumidityReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicGetHumidityReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicGetHumidityReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicGetHumidityReply)
    MergeFrom(*source);
  }
}

void bicGetHumidityReply::MergeFrom(const bicGetHumidityReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicGetHumidityReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.units().size() > 0) {
    _internal_set_units(from._internal_units());
  }
  if (from.success().size() > 0) {
    _internal_set_success(from._internal_success());
  }
  if (!(from.humidity() <= 0 && from.humidity() >= 0)) {
    _internal_set_humidity(from._internal_humidity());
  }
}

void bicGetHumidityReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicGetHumidityReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicGetHumidityReply::CopyFrom(const bicGetHumidityReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicGetHumidityReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicGetHumidityReply::IsInitialized() const {
  return true;
}

void bicGetHumidityReply::InternalSwap(bicGetHumidityReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  units_.Swap(&other->units_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_.Swap(&other->success_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(humidity_, other->humidity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bicGetHumidityReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bicSetSensingEnableRequest::InitAsDefaultInstance() {
}
class bicSetSensingEnableRequest::_Internal {
 public:
};

bicSetSensingEnableRequest::bicSetSensingEnableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  refchannels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicSetSensingEnableRequest)
}
bicSetSensingEnableRequest::bicSetSensingEnableRequest(const bicSetSensingEnableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      refchannels_(from.refchannels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enablesensing_ = from.enablesensing_;
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicSetSensingEnableRequest)
}

void bicSetSensingEnableRequest::SharedCtor() {
  enablesensing_ = false;
}

bicSetSensingEnableRequest::~bicSetSensingEnableRequest() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicSetSensingEnableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicSetSensingEnableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void bicSetSensingEnableRequest::ArenaDtor(void* object) {
  bicSetSensingEnableRequest* _this = reinterpret_cast< bicSetSensingEnableRequest* >(object);
  (void)_this;
}
void bicSetSensingEnableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicSetSensingEnableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicSetSensingEnableRequest& bicSetSensingEnableRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicSetSensingEnableRequest_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicSetSensingEnableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicSetSensingEnableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refchannels_.Clear();
  enablesensing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicSetSensingEnableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enableSensing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enablesensing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 refChannels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_refchannels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_refchannels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicSetSensingEnableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicSetSensingEnableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enableSensing = 1;
  if (this->enablesensing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enablesensing(), target);
  }

  // repeated uint32 refChannels = 2;
  {
    int byte_size = _refchannels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_refchannels(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicSetSensingEnableRequest)
  return target;
}

size_t bicSetSensingEnableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicSetSensingEnableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 refChannels = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->refchannels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _refchannels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool enableSensing = 1;
  if (this->enablesensing() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicSetSensingEnableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicSetSensingEnableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const bicSetSensingEnableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicSetSensingEnableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicSetSensingEnableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicSetSensingEnableRequest)
    MergeFrom(*source);
  }
}

void bicSetSensingEnableRequest::MergeFrom(const bicSetSensingEnableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicSetSensingEnableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refchannels_.MergeFrom(from.refchannels_);
  if (from.enablesensing() != 0) {
    _internal_set_enablesensing(from._internal_enablesensing());
  }
}

void bicSetSensingEnableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicSetSensingEnableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicSetSensingEnableRequest::CopyFrom(const bicSetSensingEnableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicSetSensingEnableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicSetSensingEnableRequest::IsInitialized() const {
  return true;
}

void bicSetSensingEnableRequest::InternalSwap(bicSetSensingEnableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  refchannels_.InternalSwap(&other->refchannels_);
  swap(enablesensing_, other->enablesensing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bicSetSensingEnableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bicSetImplantPowerRequest::InitAsDefaultInstance() {
}
class bicSetImplantPowerRequest::_Internal {
 public:
};

bicSetImplantPowerRequest::bicSetImplantPowerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicSetImplantPowerRequest)
}
bicSetImplantPowerRequest::bicSetImplantPowerRequest(const bicSetImplantPowerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  powerenabled_ = from.powerenabled_;
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicSetImplantPowerRequest)
}

void bicSetImplantPowerRequest::SharedCtor() {
  powerenabled_ = false;
}

bicSetImplantPowerRequest::~bicSetImplantPowerRequest() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicSetImplantPowerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicSetImplantPowerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void bicSetImplantPowerRequest::ArenaDtor(void* object) {
  bicSetImplantPowerRequest* _this = reinterpret_cast< bicSetImplantPowerRequest* >(object);
  (void)_this;
}
void bicSetImplantPowerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicSetImplantPowerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicSetImplantPowerRequest& bicSetImplantPowerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicSetImplantPowerRequest_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicSetImplantPowerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicSetImplantPowerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  powerenabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicSetImplantPowerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool powerEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          powerenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicSetImplantPowerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicSetImplantPowerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool powerEnabled = 1;
  if (this->powerenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_powerenabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicSetImplantPowerRequest)
  return target;
}

size_t bicSetImplantPowerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicSetImplantPowerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool powerEnabled = 1;
  if (this->powerenabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicSetImplantPowerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicSetImplantPowerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const bicSetImplantPowerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicSetImplantPowerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicSetImplantPowerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicSetImplantPowerRequest)
    MergeFrom(*source);
  }
}

void bicSetImplantPowerRequest::MergeFrom(const bicSetImplantPowerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicSetImplantPowerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.powerenabled() != 0) {
    _internal_set_powerenabled(from._internal_powerenabled());
  }
}

void bicSetImplantPowerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicSetImplantPowerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicSetImplantPowerRequest::CopyFrom(const bicSetImplantPowerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicSetImplantPowerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicSetImplantPowerRequest::IsInitialized() const {
  return true;
}

void bicSetImplantPowerRequest::InternalSwap(bicSetImplantPowerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(powerenabled_, other->powerenabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bicSetImplantPowerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bicStartStimulationRequest::InitAsDefaultInstance() {
}
class bicStartStimulationRequest::_Internal {
 public:
};

bicStartStimulationRequest::bicStartStimulationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.bicStartStimulationRequest)
}
bicStartStimulationRequest::bicStartStimulationRequest(const bicStartStimulationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BICgRPC.bicStartStimulationRequest)
}

void bicStartStimulationRequest::SharedCtor() {
}

bicStartStimulationRequest::~bicStartStimulationRequest() {
  // @@protoc_insertion_point(destructor:BICgRPC.bicStartStimulationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bicStartStimulationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void bicStartStimulationRequest::ArenaDtor(void* object) {
  bicStartStimulationRequest* _this = reinterpret_cast< bicStartStimulationRequest* >(object);
  (void)_this;
}
void bicStartStimulationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bicStartStimulationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bicStartStimulationRequest& bicStartStimulationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bicStartStimulationRequest_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void bicStartStimulationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.bicStartStimulationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bicStartStimulationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bicStartStimulationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.bicStartStimulationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.bicStartStimulationRequest)
  return target;
}

size_t bicStartStimulationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.bicStartStimulationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bicStartStimulationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.bicStartStimulationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const bicStartStimulationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bicStartStimulationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.bicStartStimulationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.bicStartStimulationRequest)
    MergeFrom(*source);
  }
}

void bicStartStimulationRequest::MergeFrom(const bicStartStimulationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.bicStartStimulationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void bicStartStimulationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.bicStartStimulationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bicStartStimulationRequest::CopyFrom(const bicStartStimulationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.bicStartStimulationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bicStartStimulationRequest::IsInitialized() const {
  return true;
}

void bicStartStimulationRequest::InternalSwap(bicStartStimulationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bicStartStimulationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TemperatureUpdate::InitAsDefaultInstance() {
}
class TemperatureUpdate::_Internal {
 public:
};

TemperatureUpdate::TemperatureUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.TemperatureUpdate)
}
TemperatureUpdate::TemperatureUpdate(const TemperatureUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_units().empty()) {
    units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_units(),
      GetArena());
  }
  temperature_ = from.temperature_;
  // @@protoc_insertion_point(copy_constructor:BICgRPC.TemperatureUpdate)
}

void TemperatureUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TemperatureUpdate_BICgRPC_2eproto.base);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  temperature_ = 0;
}

TemperatureUpdate::~TemperatureUpdate() {
  // @@protoc_insertion_point(destructor:BICgRPC.TemperatureUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TemperatureUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TemperatureUpdate::ArenaDtor(void* object) {
  TemperatureUpdate* _this = reinterpret_cast< TemperatureUpdate* >(object);
  (void)_this;
}
void TemperatureUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TemperatureUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TemperatureUpdate& TemperatureUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TemperatureUpdate_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void TemperatureUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.TemperatureUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  temperature_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemperatureUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.TemperatureUpdate.units"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TemperatureUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.TemperatureUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double temperature = 1;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_temperature(), target);
  }

  // string units = 2;
  if (this->units().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.TemperatureUpdate.units");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_units(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.TemperatureUpdate)
  return target;
}

size_t TemperatureUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.TemperatureUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string units = 2;
  if (this->units().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_units());
  }

  // double temperature = 1;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TemperatureUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.TemperatureUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const TemperatureUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TemperatureUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.TemperatureUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.TemperatureUpdate)
    MergeFrom(*source);
  }
}

void TemperatureUpdate::MergeFrom(const TemperatureUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.TemperatureUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.units().size() > 0) {
    _internal_set_units(from._internal_units());
  }
  if (!(from.temperature() <= 0 && from.temperature() >= 0)) {
    _internal_set_temperature(from._internal_temperature());
  }
}

void TemperatureUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.TemperatureUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemperatureUpdate::CopyFrom(const TemperatureUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.TemperatureUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemperatureUpdate::IsInitialized() const {
  return true;
}

void TemperatureUpdate::InternalSwap(TemperatureUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  units_.Swap(&other->units_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(temperature_, other->temperature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TemperatureUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HumidityUpdate::InitAsDefaultInstance() {
}
class HumidityUpdate::_Internal {
 public:
};

HumidityUpdate::HumidityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.HumidityUpdate)
}
HumidityUpdate::HumidityUpdate(const HumidityUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_units().empty()) {
    units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_units(),
      GetArena());
  }
  humidity_ = from.humidity_;
  // @@protoc_insertion_point(copy_constructor:BICgRPC.HumidityUpdate)
}

void HumidityUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HumidityUpdate_BICgRPC_2eproto.base);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  humidity_ = 0;
}

HumidityUpdate::~HumidityUpdate() {
  // @@protoc_insertion_point(destructor:BICgRPC.HumidityUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HumidityUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HumidityUpdate::ArenaDtor(void* object) {
  HumidityUpdate* _this = reinterpret_cast< HumidityUpdate* >(object);
  (void)_this;
}
void HumidityUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HumidityUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HumidityUpdate& HumidityUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HumidityUpdate_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void HumidityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.HumidityUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  humidity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HumidityUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double humidity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.HumidityUpdate.units"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HumidityUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.HumidityUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double humidity = 1;
  if (!(this->humidity() <= 0 && this->humidity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_humidity(), target);
  }

  // string units = 2;
  if (this->units().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.HumidityUpdate.units");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_units(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.HumidityUpdate)
  return target;
}

size_t HumidityUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.HumidityUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string units = 2;
  if (this->units().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_units());
  }

  // double humidity = 1;
  if (!(this->humidity() <= 0 && this->humidity() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HumidityUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.HumidityUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const HumidityUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HumidityUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.HumidityUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.HumidityUpdate)
    MergeFrom(*source);
  }
}

void HumidityUpdate::MergeFrom(const HumidityUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.HumidityUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.units().size() > 0) {
    _internal_set_units(from._internal_units());
  }
  if (!(from.humidity() <= 0 && from.humidity() >= 0)) {
    _internal_set_humidity(from._internal_humidity());
  }
}

void HumidityUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.HumidityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumidityUpdate::CopyFrom(const HumidityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.HumidityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumidityUpdate::IsInitialized() const {
  return true;
}

void HumidityUpdate::InternalSwap(HumidityUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  units_.Swap(&other->units_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(humidity_, other->humidity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HumidityUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Bridge::InitAsDefaultInstance() {
}
class Bridge::_Internal {
 public:
};

Bridge::Bridge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.Bridge)
}
Bridge::Bridge(const Bridge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  implanttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_implanttype().empty()) {
    implanttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_implanttype(),
      GetArena());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_deviceid(),
      GetArena());
  }
  firmwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firmwareversion().empty()) {
    firmwareversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_firmwareversion(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BICgRPC.Bridge)
}

void Bridge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bridge_BICgRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  implanttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Bridge::~Bridge() {
  // @@protoc_insertion_point(destructor:BICgRPC.Bridge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bridge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  implanttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Bridge::ArenaDtor(void* object) {
  Bridge* _this = reinterpret_cast< Bridge* >(object);
  (void)_this;
}
void Bridge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bridge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bridge& Bridge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bridge_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void Bridge::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.Bridge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  implanttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deviceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firmwareversion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bridge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.Bridge.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string implantType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_implanttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.Bridge.implantType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.Bridge.deviceId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string firmwareVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_firmwareversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.Bridge.firmwareVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bridge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.Bridge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.Bridge.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string implantType = 2;
  if (this->implanttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_implanttype().data(), static_cast<int>(this->_internal_implanttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.Bridge.implantType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_implanttype(), target);
  }

  // string deviceId = 3;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.Bridge.deviceId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_deviceid(), target);
  }

  // string firmwareVersion = 4;
  if (this->firmwareversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firmwareversion().data(), static_cast<int>(this->_internal_firmwareversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.Bridge.firmwareVersion");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_firmwareversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.Bridge)
  return target;
}

size_t Bridge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.Bridge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string implantType = 2;
  if (this->implanttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_implanttype());
  }

  // string deviceId = 3;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string firmwareVersion = 4;
  if (this->firmwareversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firmwareversion());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bridge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.Bridge)
  GOOGLE_DCHECK_NE(&from, this);
  const Bridge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bridge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.Bridge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.Bridge)
    MergeFrom(*source);
  }
}

void Bridge::MergeFrom(const Bridge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.Bridge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.implanttype().size() > 0) {
    _internal_set_implanttype(from._internal_implanttype());
  }
  if (from.deviceid().size() > 0) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (from.firmwareversion().size() > 0) {
    _internal_set_firmwareversion(from._internal_firmwareversion());
  }
}

void Bridge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.Bridge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bridge::CopyFrom(const Bridge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.Bridge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bridge::IsInitialized() const {
  return true;
}

void Bridge::InternalSwap(Bridge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  implanttype_.Swap(&other->implanttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firmwareversion_.Swap(&other->firmwareversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Bridge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryBridgesRequest::InitAsDefaultInstance() {
}
class QueryBridgesRequest::_Internal {
 public:
};

QueryBridgesRequest::QueryBridgesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.QueryBridgesRequest)
}
QueryBridgesRequest::QueryBridgesRequest(const QueryBridgesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BICgRPC.QueryBridgesRequest)
}

void QueryBridgesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryBridgesRequest_BICgRPC_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueryBridgesRequest::~QueryBridgesRequest() {
  // @@protoc_insertion_point(destructor:BICgRPC.QueryBridgesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryBridgesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryBridgesRequest::ArenaDtor(void* object) {
  QueryBridgesRequest* _this = reinterpret_cast< QueryBridgesRequest* >(object);
  (void)_this;
}
void QueryBridgesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryBridgesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryBridgesRequest& QueryBridgesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryBridgesRequest_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void QueryBridgesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.QueryBridgesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBridgesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.QueryBridgesRequest.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryBridgesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.QueryBridgesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.QueryBridgesRequest.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.QueryBridgesRequest)
  return target;
}

size_t QueryBridgesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.QueryBridgesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryBridgesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.QueryBridgesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryBridgesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryBridgesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.QueryBridgesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.QueryBridgesRequest)
    MergeFrom(*source);
  }
}

void QueryBridgesRequest::MergeFrom(const QueryBridgesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.QueryBridgesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {
    _internal_set_query(from._internal_query());
  }
}

void QueryBridgesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.QueryBridgesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBridgesRequest::CopyFrom(const QueryBridgesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.QueryBridgesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBridgesRequest::IsInitialized() const {
  return true;
}

void QueryBridgesRequest::InternalSwap(QueryBridgesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBridgesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryBridgesResponse::InitAsDefaultInstance() {
}
class QueryBridgesResponse::_Internal {
 public:
};

QueryBridgesResponse::QueryBridgesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bridges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.QueryBridgesResponse)
}
QueryBridgesResponse::QueryBridgesResponse(const QueryBridgesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bridges_(from.bridges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BICgRPC.QueryBridgesResponse)
}

void QueryBridgesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryBridgesResponse_BICgRPC_2eproto.base);
}

QueryBridgesResponse::~QueryBridgesResponse() {
  // @@protoc_insertion_point(destructor:BICgRPC.QueryBridgesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryBridgesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryBridgesResponse::ArenaDtor(void* object) {
  QueryBridgesResponse* _this = reinterpret_cast< QueryBridgesResponse* >(object);
  (void)_this;
}
void QueryBridgesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryBridgesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryBridgesResponse& QueryBridgesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryBridgesResponse_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void QueryBridgesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.QueryBridgesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bridges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBridgesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BICgRPC.Bridge bridges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bridges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryBridgesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.QueryBridgesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BICgRPC.Bridge bridges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bridges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bridges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.QueryBridgesResponse)
  return target;
}

size_t QueryBridgesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.QueryBridgesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BICgRPC.Bridge bridges = 1;
  total_size += 1UL * this->_internal_bridges_size();
  for (const auto& msg : this->bridges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryBridgesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.QueryBridgesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryBridgesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryBridgesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.QueryBridgesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.QueryBridgesResponse)
    MergeFrom(*source);
  }
}

void QueryBridgesResponse::MergeFrom(const QueryBridgesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.QueryBridgesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bridges_.MergeFrom(from.bridges_);
}

void QueryBridgesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.QueryBridgesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBridgesResponse::CopyFrom(const QueryBridgesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.QueryBridgesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBridgesResponse::IsInitialized() const {
  return true;
}

void QueryBridgesResponse::InternalSwap(QueryBridgesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bridges_.InternalSwap(&other->bridges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBridgesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectBridgeRequest::InitAsDefaultInstance() {
  ::BICgRPC::_ConnectBridgeRequest_default_instance_._instance.get_mutable()->parameters_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ConnectBridgeRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& parameters(const ConnectBridgeRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
ConnectBridgeRequest::_Internal::parameters(const ConnectBridgeRequest* msg) {
  return *msg->parameters_;
}
void ConnectBridgeRequest::clear_parameters() {
  if (GetArena() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
}
ConnectBridgeRequest::ConnectBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.ConnectBridgeRequest)
}
ConnectBridgeRequest::ConnectBridgeRequest(const ConnectBridgeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_parameters()) {
    parameters_ = new PROTOBUF_NAMESPACE_ID::Any(*from.parameters_);
  } else {
    parameters_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BICgRPC.ConnectBridgeRequest)
}

void ConnectBridgeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectBridgeRequest_BICgRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parameters_ = nullptr;
}

ConnectBridgeRequest::~ConnectBridgeRequest() {
  // @@protoc_insertion_point(destructor:BICgRPC.ConnectBridgeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectBridgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parameters_;
}

void ConnectBridgeRequest::ArenaDtor(void* object) {
  ConnectBridgeRequest* _this = reinterpret_cast< ConnectBridgeRequest* >(object);
  (void)_this;
}
void ConnectBridgeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectBridgeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectBridgeRequest& ConnectBridgeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectBridgeRequest_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void ConnectBridgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.ConnectBridgeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectBridgeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.ConnectBridgeRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectBridgeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.ConnectBridgeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.ConnectBridgeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Any parameters = 2;
  if (this->has_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parameters(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.ConnectBridgeRequest)
  return target;
}

size_t ConnectBridgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.ConnectBridgeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any parameters = 2;
  if (this->has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectBridgeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.ConnectBridgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectBridgeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectBridgeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.ConnectBridgeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.ConnectBridgeRequest)
    MergeFrom(*source);
  }
}

void ConnectBridgeRequest::MergeFrom(const ConnectBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.ConnectBridgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_parameters()) {
    _internal_mutable_parameters()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_parameters());
  }
}

void ConnectBridgeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.ConnectBridgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectBridgeRequest::CopyFrom(const ConnectBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.ConnectBridgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectBridgeRequest::IsInitialized() const {
  return true;
}

void ConnectBridgeRequest::InternalSwap(ConnectBridgeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(parameters_, other->parameters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectBridgeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectBridgeResponse::InitAsDefaultInstance() {
  ::BICgRPC::_ConnectBridgeResponse_default_instance_._instance.get_mutable()->details_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ConnectBridgeResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& details(const ConnectBridgeResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
ConnectBridgeResponse::_Internal::details(const ConnectBridgeResponse* msg) {
  return *msg->details_;
}
void ConnectBridgeResponse::clear_details() {
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
ConnectBridgeResponse::ConnectBridgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.ConnectBridgeResponse)
}
ConnectBridgeResponse::ConnectBridgeResponse(const ConnectBridgeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_details()) {
    details_ = new PROTOBUF_NAMESPACE_ID::Any(*from.details_);
  } else {
    details_ = nullptr;
  }
  connection_status_ = from.connection_status_;
  // @@protoc_insertion_point(copy_constructor:BICgRPC.ConnectBridgeResponse)
}

void ConnectBridgeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectBridgeResponse_BICgRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_status_) -
      reinterpret_cast<char*>(&details_)) + sizeof(connection_status_));
}

ConnectBridgeResponse::~ConnectBridgeResponse() {
  // @@protoc_insertion_point(destructor:BICgRPC.ConnectBridgeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectBridgeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete details_;
}

void ConnectBridgeResponse::ArenaDtor(void* object) {
  ConnectBridgeResponse* _this = reinterpret_cast< ConnectBridgeResponse* >(object);
  (void)_this;
}
void ConnectBridgeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectBridgeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectBridgeResponse& ConnectBridgeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectBridgeResponse_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void ConnectBridgeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.ConnectBridgeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  connection_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectBridgeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.ConnectBridgeResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BICgRPC.ConnectBridgeStatus connection_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connection_status(static_cast<::BICgRPC::ConnectBridgeStatus>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectBridgeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.ConnectBridgeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.ConnectBridgeResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .BICgRPC.ConnectBridgeStatus connection_status = 2;
  if (this->connection_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_connection_status(), target);
  }

  // .google.protobuf.Any details = 3;
  if (this->has_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.ConnectBridgeResponse)
  return target;
}

size_t ConnectBridgeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.ConnectBridgeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any details = 3;
  if (this->has_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  // .BICgRPC.ConnectBridgeStatus connection_status = 2;
  if (this->connection_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connection_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectBridgeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.ConnectBridgeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectBridgeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectBridgeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.ConnectBridgeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.ConnectBridgeResponse)
    MergeFrom(*source);
  }
}

void ConnectBridgeResponse::MergeFrom(const ConnectBridgeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.ConnectBridgeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_details()) {
    _internal_mutable_details()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_details());
  }
  if (from.connection_status() != 0) {
    _internal_set_connection_status(from._internal_connection_status());
  }
}

void ConnectBridgeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.ConnectBridgeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectBridgeResponse::CopyFrom(const ConnectBridgeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.ConnectBridgeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectBridgeResponse::IsInitialized() const {
  return true;
}

void ConnectBridgeResponse::InternalSwap(ConnectBridgeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectBridgeResponse, connection_status_)
      + sizeof(ConnectBridgeResponse::connection_status_)
      - PROTOBUF_FIELD_OFFSET(ConnectBridgeResponse, details_)>(
          reinterpret_cast<char*>(&details_),
          reinterpret_cast<char*>(&other->details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectBridgeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeBridgeRequest::InitAsDefaultInstance() {
}
class DescribeBridgeRequest::_Internal {
 public:
};

DescribeBridgeRequest::DescribeBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.DescribeBridgeRequest)
}
DescribeBridgeRequest::DescribeBridgeRequest(const DescribeBridgeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BICgRPC.DescribeBridgeRequest)
}

void DescribeBridgeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeBridgeRequest_BICgRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DescribeBridgeRequest::~DescribeBridgeRequest() {
  // @@protoc_insertion_point(destructor:BICgRPC.DescribeBridgeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeBridgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DescribeBridgeRequest::ArenaDtor(void* object) {
  DescribeBridgeRequest* _this = reinterpret_cast< DescribeBridgeRequest* >(object);
  (void)_this;
}
void DescribeBridgeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeBridgeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeBridgeRequest& DescribeBridgeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeBridgeRequest_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void DescribeBridgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.DescribeBridgeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeBridgeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.DescribeBridgeRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeBridgeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.DescribeBridgeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.DescribeBridgeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.DescribeBridgeRequest)
  return target;
}

size_t DescribeBridgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.DescribeBridgeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeBridgeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.DescribeBridgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeBridgeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeBridgeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.DescribeBridgeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.DescribeBridgeRequest)
    MergeFrom(*source);
  }
}

void DescribeBridgeRequest::MergeFrom(const DescribeBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.DescribeBridgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void DescribeBridgeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.DescribeBridgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeBridgeRequest::CopyFrom(const DescribeBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.DescribeBridgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeBridgeRequest::IsInitialized() const {
  return true;
}

void DescribeBridgeRequest::InternalSwap(DescribeBridgeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeBridgeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeBridgeResponse::InitAsDefaultInstance() {
  ::BICgRPC::_DescribeBridgeResponse_default_instance_._instance.get_mutable()->details_ = const_cast< ::BICgRPC::Bridge*>(
      ::BICgRPC::Bridge::internal_default_instance());
  ::BICgRPC::_DescribeBridgeResponse_default_instance_._instance.get_mutable()->error_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class DescribeBridgeResponse::_Internal {
 public:
  static const ::BICgRPC::Bridge& details(const DescribeBridgeResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& error(const DescribeBridgeResponse* msg);
};

const ::BICgRPC::Bridge&
DescribeBridgeResponse::_Internal::details(const DescribeBridgeResponse* msg) {
  return *msg->details_;
}
const PROTOBUF_NAMESPACE_ID::Any&
DescribeBridgeResponse::_Internal::error(const DescribeBridgeResponse* msg) {
  return *msg->error_;
}
void DescribeBridgeResponse::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
DescribeBridgeResponse::DescribeBridgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.DescribeBridgeResponse)
}
DescribeBridgeResponse::DescribeBridgeResponse(const DescribeBridgeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_details()) {
    details_ = new ::BICgRPC::Bridge(*from.details_);
  } else {
    details_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new PROTOBUF_NAMESPACE_ID::Any(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BICgRPC.DescribeBridgeResponse)
}

void DescribeBridgeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeBridgeResponse_BICgRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&details_)) + sizeof(error_));
}

DescribeBridgeResponse::~DescribeBridgeResponse() {
  // @@protoc_insertion_point(destructor:BICgRPC.DescribeBridgeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescribeBridgeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete details_;
  if (this != internal_default_instance()) delete error_;
}

void DescribeBridgeResponse::ArenaDtor(void* object) {
  DescribeBridgeResponse* _this = reinterpret_cast< DescribeBridgeResponse* >(object);
  (void)_this;
}
void DescribeBridgeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeBridgeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeBridgeResponse& DescribeBridgeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeBridgeResponse_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void DescribeBridgeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.DescribeBridgeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeBridgeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.DescribeBridgeResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BICgRPC.Bridge details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeBridgeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.DescribeBridgeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.DescribeBridgeResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .BICgRPC.Bridge details = 2;
  if (this->has_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::details(this), target, stream);
  }

  // .google.protobuf.Any error = 3;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.DescribeBridgeResponse)
  return target;
}

size_t DescribeBridgeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.DescribeBridgeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .BICgRPC.Bridge details = 2;
  if (this->has_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  // .google.protobuf.Any error = 3;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeBridgeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.DescribeBridgeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeBridgeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeBridgeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.DescribeBridgeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.DescribeBridgeResponse)
    MergeFrom(*source);
  }
}

void DescribeBridgeResponse::MergeFrom(const DescribeBridgeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.DescribeBridgeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_details()) {
    _internal_mutable_details()->::BICgRPC::Bridge::MergeFrom(from._internal_details());
  }
  if (from.has_error()) {
    _internal_mutable_error()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_error());
  }
}

void DescribeBridgeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.DescribeBridgeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeBridgeResponse::CopyFrom(const DescribeBridgeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.DescribeBridgeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeBridgeResponse::IsInitialized() const {
  return true;
}

void DescribeBridgeResponse::InternalSwap(DescribeBridgeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeBridgeResponse, error_)
      + sizeof(DescribeBridgeResponse::error_)
      - PROTOBUF_FIELD_OFFSET(DescribeBridgeResponse, details_)>(
          reinterpret_cast<char*>(&details_),
          reinterpret_cast<char*>(&other->details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeBridgeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisconnectBridgeRequest::InitAsDefaultInstance() {
}
class DisconnectBridgeRequest::_Internal {
 public:
};

DisconnectBridgeRequest::DisconnectBridgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BICgRPC.DisconnectBridgeRequest)
}
DisconnectBridgeRequest::DisconnectBridgeRequest(const DisconnectBridgeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BICgRPC.DisconnectBridgeRequest)
}

void DisconnectBridgeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisconnectBridgeRequest_BICgRPC_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DisconnectBridgeRequest::~DisconnectBridgeRequest() {
  // @@protoc_insertion_point(destructor:BICgRPC.DisconnectBridgeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisconnectBridgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisconnectBridgeRequest::ArenaDtor(void* object) {
  DisconnectBridgeRequest* _this = reinterpret_cast< DisconnectBridgeRequest* >(object);
  (void)_this;
}
void DisconnectBridgeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisconnectBridgeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisconnectBridgeRequest& DisconnectBridgeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisconnectBridgeRequest_BICgRPC_2eproto.base);
  return *internal_default_instance();
}


void DisconnectBridgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BICgRPC.DisconnectBridgeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisconnectBridgeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BICgRPC.DisconnectBridgeRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisconnectBridgeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BICgRPC.DisconnectBridgeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BICgRPC.DisconnectBridgeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BICgRPC.DisconnectBridgeRequest)
  return target;
}

size_t DisconnectBridgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BICgRPC.DisconnectBridgeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisconnectBridgeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BICgRPC.DisconnectBridgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisconnectBridgeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisconnectBridgeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BICgRPC.DisconnectBridgeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BICgRPC.DisconnectBridgeRequest)
    MergeFrom(*source);
  }
}

void DisconnectBridgeRequest::MergeFrom(const DisconnectBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BICgRPC.DisconnectBridgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void DisconnectBridgeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BICgRPC.DisconnectBridgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectBridgeRequest::CopyFrom(const DisconnectBridgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BICgRPC.DisconnectBridgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectBridgeRequest::IsInitialized() const {
  return true;
}

void DisconnectBridgeRequest::InternalSwap(DisconnectBridgeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectBridgeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace BICgRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BICgRPC::bicSuccessReply* Arena::CreateMaybeMessage< ::BICgRPC::bicSuccessReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicSuccessReply >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::ScanDevicesRequest* Arena::CreateMaybeMessage< ::BICgRPC::ScanDevicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::ScanDevicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::ScanDevicesReply* Arena::CreateMaybeMessage< ::BICgRPC::ScanDevicesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::ScanDevicesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::ConnectDeviceRequest* Arena::CreateMaybeMessage< ::BICgRPC::ConnectDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::ConnectDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::bicGetImplantInfoRequest* Arena::CreateMaybeMessage< ::BICgRPC::bicGetImplantInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicGetImplantInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo* Arena::CreateMaybeMessage< ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicGetImplantInfoReply_bicChannelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::bicGetImplantInfoReply* Arena::CreateMaybeMessage< ::BICgRPC::bicGetImplantInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicGetImplantInfoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::bicSetStreamEnable* Arena::CreateMaybeMessage< ::BICgRPC::bicSetStreamEnable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicSetStreamEnable >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::bicGetImpedanceRequest* Arena::CreateMaybeMessage< ::BICgRPC::bicGetImpedanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicGetImpedanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::bicGetImpedanceReply* Arena::CreateMaybeMessage< ::BICgRPC::bicGetImpedanceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicGetImpedanceReply >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::bicGetTemperatureReply* Arena::CreateMaybeMessage< ::BICgRPC::bicGetTemperatureReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicGetTemperatureReply >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::bicGetHumidityReply* Arena::CreateMaybeMessage< ::BICgRPC::bicGetHumidityReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicGetHumidityReply >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::bicSetSensingEnableRequest* Arena::CreateMaybeMessage< ::BICgRPC::bicSetSensingEnableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicSetSensingEnableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::bicSetImplantPowerRequest* Arena::CreateMaybeMessage< ::BICgRPC::bicSetImplantPowerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicSetImplantPowerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::bicStartStimulationRequest* Arena::CreateMaybeMessage< ::BICgRPC::bicStartStimulationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::bicStartStimulationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::TemperatureUpdate* Arena::CreateMaybeMessage< ::BICgRPC::TemperatureUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::TemperatureUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::HumidityUpdate* Arena::CreateMaybeMessage< ::BICgRPC::HumidityUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::HumidityUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::Bridge* Arena::CreateMaybeMessage< ::BICgRPC::Bridge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::Bridge >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::QueryBridgesRequest* Arena::CreateMaybeMessage< ::BICgRPC::QueryBridgesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::QueryBridgesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::QueryBridgesResponse* Arena::CreateMaybeMessage< ::BICgRPC::QueryBridgesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::QueryBridgesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::ConnectBridgeRequest* Arena::CreateMaybeMessage< ::BICgRPC::ConnectBridgeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::ConnectBridgeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::ConnectBridgeResponse* Arena::CreateMaybeMessage< ::BICgRPC::ConnectBridgeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::ConnectBridgeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::DescribeBridgeRequest* Arena::CreateMaybeMessage< ::BICgRPC::DescribeBridgeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::DescribeBridgeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::DescribeBridgeResponse* Arena::CreateMaybeMessage< ::BICgRPC::DescribeBridgeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::DescribeBridgeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BICgRPC::DisconnectBridgeRequest* Arena::CreateMaybeMessage< ::BICgRPC::DisconnectBridgeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BICgRPC::DisconnectBridgeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
