// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.BICgRPC";
option java_outer_classname = "BICgRPC";
option objc_class_prefix = "HLW";

package BICgRPC;

// The greeting service definition.
service BICManager{
  // Sends a greeting
  rpc bicInit (bicInitRequest) returns (bicSuccessReply) {}
  rpc bicGetImplantInfo (bicGetImplantInfoRequest) returns (bicGetImplantInfoReply) {}
  rpc bicGetImpedance (bicGetImpedanceRequest) returns (bicGetImpedanceReply) {}
  rpc bicGetTemperature (bicNullRequest) returns (bicGetTemperatureReply) {}
  rpc bicGetHumidity (bicNullRequest) returns (bicGetHumidityReply) {}
  rpc bicSetSensingEnable (bicSetSensingEnableRequest) returns (bicSuccessReply) {}
  rpc bicSetImplantPower (bicSetImplantPowerRequest) returns (bicSuccessReply) {}
  rpc bicStartStimulation (bicStartStimulationRequest) returns (bicSuccessReply) {}
  rpc bicStopStimulation (bicNullRequest) returns (bicSuccessReply) {}
  rpc bicDispose (bicNullRequest) returns (bicSuccessReply) {}
}

// Basic Messages
message bicNullRequest{ }

message bicSuccessReply{
	string success = 1;
}

// bicInit Messages
message bicInitRequest {
  string logFileName = 1;
}

// bicGetImplantInfo Messages
message bicGetImplantInfoRequest{
	bool updateCachedInfo = 1;
}
message bicGetImplantInfoReply {
	message bicChannelInfo {
		enum UnitType{
		    UT_NO_UNIT = 0;
            UT_CURRENT = 1;
            UT_VOLTAGE = 2;
            UT_COUNT = 3;
		}
		bool canMeasure = 1;
		double measureValueMin = 2;
		double measureValueMax = 3;
		bool canStimulate = 4;
		UnitType stimulationUnit = 5;
		double stimValueMin = 6;
		double stimValueMax = 7;
		bool canMeasureImpedance = 8;
	}
	
	string firmwareVersion = 1;
	string deviceType = 2;
	string deviceId = 3;
	repeated bicChannelInfo channelInfoList = 4;
	uint32 channelCount = 5;
	uint32 measurementChannelCount = 6;
	uint32 stimulationChannelCount = 7;
	uint32 samplingRate = 8;
	string success = 9;
}

// bicGetImpedance Messages
message bicGetImpedanceRequest {
	uint32 channel = 1;
}

message bicGetImpedanceReply {
	double channelImpedance = 1;
	string units = 2;
	string success = 3;
}

// bicGetTemperature Messages
message bicGetTemperatureReply{
	double temperature = 1;
	string units = 2;
	string success = 3;
}

// bicGetHumiditiy Messages
message bicGetHumidityReply{
	double humidity = 1;
	string units = 2;
	string success = 3;
}

// bicSetSensingEnable Messages
message bicSetSensingEnableRequest{
	bool enableSensing = 1;
	repeated uint32 refChannels = 2;
}

// bicSetImplantPower Messages
message bicSetImplantPowerRequest{
	bool powerEnabled = 1;
}

// bicStartStimulation Messages
message bicStartStimulationRequest{
	
}