// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.BICgRPC";
option java_outer_classname = "BICgRPC";
option objc_class_prefix = "HLW";
option csharp_namespace = "BICgRPC";

package BICgRPC;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

// The BICBridgeService definition
service BICBridgeService {
	rpc ListBridges(QueryBridgesRequest) returns (QueryBridgesResponse);
	rpc ScanBridges(QueryBridgesRequest) returns (QueryBridgesResponse);
	rpc ConnectedBridges(QueryBridgesRequest) returns (QueryBridgesResponse);
	rpc ConnectBridge(ConnectBridgeRequest) returns (ConnectBridgeResponse);
	rpc DescribeBridge(DescribeBridgeRequest) returns (DescribeBridgeResponse);
	rpc DisconnectBridge(DisconnectBridgeRequest) returns (google.protobuf.Empty);
}

// The BICDeviceService definition.
service BICDeviceService{
	// Initialization/Destruction
	rpc ScanDevices (ScanDevicesRequest) returns (ScanDevicesReply) {}
	rpc ConnectDevice (ConnectDeviceRequest) returns (bicSuccessReply) {}
	rpc bicDispose (RequestDeviceAddress) returns (bicSuccessReply) {}

	// Get Functions
	rpc bicGetImplantInfo (bicGetImplantInfoRequest) returns (bicGetImplantInfoReply) {}
	rpc bicGetImpedance (bicGetImpedanceRequest) returns (bicGetImpedanceReply) {}
	rpc bicGetTemperature (RequestDeviceAddress) returns (bicGetTemperatureReply) {}
	rpc bicGetHumidity (RequestDeviceAddress) returns (bicGetHumidityReply) {}
	//rpc bicIsStimulating (google.protobuf.Empty) returns 
	//rpc bicIsMeasuring (google.protobuf.Empty) returns 

	// Set Functions
	//rpc bicSetSensingEnable (bicSetSensingEnableRequest) returns (bicSuccessReply) {} // Depreciated
	rpc bicSetImplantPower (bicSetImplantPowerRequest) returns (bicSuccessReply) {}

	// Stim Functions
	rpc bicStartStimulation (bicStartStimulationRequest) returns (bicSuccessReply) {}
	rpc bicStopStimulation (RequestDeviceAddress) returns (bicSuccessReply) {}
	rpc bicDefineStimulationWaveform (bicStimulationFunctionDefinitionRequest) returns (bicSuccessReply) {}
	
	// Streaming endpoints
	rpc bicNeuralStream (bicNeuralSetStreamingEnable) returns (stream NeuralUpdate) {}
	rpc bicTemperatureStream (bicSetStreamEnable) returns (stream TemperatureUpdate) {}
	rpc bicHumidityStream (bicSetStreamEnable) returns (stream HumidityUpdate) {}
	rpc bicConnectionStream (bicSetStreamEnable) returns (stream ConnectionUpdate) {}
	rpc bicPowerStream (bicSetStreamEnable) returns (stream PowerUpdate) {}
	rpc bicErrorStream (bicSetStreamEnable) returns (stream ErrorUpdate) {}
}

// Basic Messages
message bicSuccessReply{
}

// ScanDevices Messages
message ScanDevicesRequest {
  string bridgeName = 1;
}

message ScanDevicesReply{
	string name = 1;
	bicGetImplantInfoReply discoveredDevice = 2;
}

// ConnectDevice Messages
message ConnectDeviceRequest{
	string deviceAddress = 1;
	string logFileName = 2;
}

// bicGetImplantInfo Messages
message bicGetImplantInfoRequest{
	string deviceAddress = 1;
	bool updateCachedInfo = 2;
}

// bicGetImplantInfo Messages
message bicGetImplantInfoReply {
	message bicChannelInfo {
		enum UnitType{
		    UT_NO_UNIT = 0;
            UT_CURRENT = 1;
            UT_VOLTAGE = 2;
            UT_COUNT = 3;
		}
		bool canMeasure = 1;
		double measureValueMin = 2;
		double measureValueMax = 3;
		bool canStimulate = 4;
		UnitType stimulationUnit = 5;
		double stimValueMin = 6;
		double stimValueMax = 7;
		bool canMeasureImpedance = 8;
	}
	
	string firmwareVersion = 1;
	string deviceType = 2;
	string deviceId = 3;
	repeated bicChannelInfo channelInfoList = 4;
	uint32 channelCount = 5;
	uint32 measurementChannelCount = 6;
	uint32 stimulationChannelCount = 7;
	uint32 samplingRate = 8;
	string success = 9;
}

message bicSetStreamEnable{
	string deviceAddress = 1;
	bool enable = 2;
}

message RequestDeviceAddress{
	string deviceAddress = 1;
}

// *************************** Device Get/Set Service Messages ***************************
// bicGetImpedance Messages
message bicGetImpedanceRequest {
	string deviceAddress = 1;
	uint32 channel = 2;
}

message bicGetImpedanceReply {
	double channelImpedance = 1;
	string units = 2;
	string success = 3;
}

// bicGetTemperature Messages
message bicGetTemperatureReply{
	double temperature = 1;
	string units = 2;
	string success = 3;
}

// bicGetHumiditiy Messages
message bicGetHumidityReply{
	double humidity = 1;
	string units = 2;
	string success = 3;
}

// bicNeuralSensingEnableRequest Messages
message bicNeuralSetStreamingEnable{
	string deviceAddress = 1;
	bool enable = 2;
	repeated uint32 refChannels = 3;
	uint32 bufferSize = 4;
	uint32 maxInterpolationPoints = 5;
}

// bicSetImplantPower Messages
message bicSetImplantPowerRequest{
	string deviceAddress = 1;
	bool powerEnabled = 2;
}

// *************************** Device Stimulation Service Messages ***************************
// bicStartStimulation Messages
message bicStartStimulationRequest{
	string deviceAddress = 1;
	string functionName = 2;
}

message bicStimulationFunctionDefinitionRequest{
	string deviceAddress = 1;
	repeated StimulationFunctionDefinition functions = 2;
}

message StimulationFunctionDefinition{
	string functionName = 1;
	
	oneof functionDefinition{
		stimPulseFunction stimPulse = 2;
		pauseFunction pause = 3;
	}
}

message stimPulseFunction{
	repeated double amplitude = 1;
	double pulseWidth = 2;
	double dZ0duration = 3;
	double dZ1duration = 4;
	uint32 repetitions = 5;
	repeated uint32 sourceElectrodes = 6;
	repeated uint32 sinkElectrodes = 7;
}

message pauseFunction{
	double duration = 1;
}

// *************************** Device Streaming Service Messages ***************************
message TemperatureUpdate{
	double temperature = 1;
	string units = 2;
}

message HumidityUpdate{
	double humidity = 1;
	string units = 2;
}

message NeuralUpdate{
	repeated NeuralSample samples = 1;
}

message NeuralSample{
	uint32 numberOfMeasurements = 1;
	repeated double measurements = 2;
	uint32 supplyVoltage = 3;
	bool isConnected = 4;
	uint32 stimulationNumber = 5;
	bool stimulationActive = 6;
	uint32 sampleCounter = 7;
	bool isInterpolated = 8;
}

message ConnectionUpdate{
	string connectionType = 1;
	bool isConnected = 2;
}

message PowerUpdate{
	string parameter = 1;
	double value = 2;
	string units = 3;
}

message ErrorUpdate{
	string message = 1;
}


// *************************** Bridge Service Messages ***************************
message Bridge {
  /**
   * Scheme-less URI describing the bridge resource.
   * For example, '//summit/bridge/xxxxxxxxx' where
   * 'xxxxxxxxx' is the serial number of the bridge.
   */
  string name = 1;

  /**
   * Additional platform specific details. These are defined in a separate
   * protobuf files, one per device manufacturer.
   */
  string implantType = 2;
  string deviceId = 3;
  string firmwareVersion = 4;
}

/**
 * This message is used for all of the query functions on the BridgeService.
 * All the query functions have the same shape if there's a need we can split
 * out different messages later.
 */
message QueryBridgesRequest {
  /**
   * The partial scheme-less URI for the resource. For example,
   * '//summit/bridge/123' will search for all bridges whose
   * serial number begins with 123.
   */
  string query = 1;
}

/**
 * This message is used for all of the query functions on the BridgeService.
 * All the query functions have the same shape if there's a need we can split
 * out different messages later.
 */
message QueryBridgesResponse {
  /**
   * List of bridges.
   */
  repeated Bridge bridges = 1;
}

message ConnectBridgeRequest {
  /**
   * Scheme-less URI describing the bridge resource.
   * For example, '//summit/bridge/xxxxxxxxx' where
   * 'xxxxxxxxx' is the serial number of the bridge.
   */
  string name = 1;

  /**
   * Additional platform specific arguments. These are defined in separate
   * protobuf files, one per device manufacturer.
   */
  google.protobuf.Any parameters = 2;
}

/**
 * Common connection states for Bridges, additional details provide by manufacturer
 * specific connection status codes.
 */
enum ConnectBridgeStatus {
  CONNECT_BRIDGE_STATUS_UNSPECIFIED = 0;
  CONNECTION_SUCCESS = 1;
  CONNECTION_FAILURE = 2;
}

message ConnectBridgeResponse {
  /**
   * Scheme-less URI describing the bridge resource.
   * For example, '//summit/bridge/xxxxxxxxx' where
   * 'xxxxxxxxx' is the serial number of the bridge.
   */
  string name = 1;  

  /**
   * Status of the connection attempt.
   */
  ConnectBridgeStatus connection_status = 2;

  /**
   * Additional platform specific details. These are defined in a separate
   * protobuf files, one per device manufacturer.
   */
  google.protobuf.Any details = 3;
}

message DescribeBridgeRequest {
  /**
   * Scheme-less URI describing the bridge resource.
   * For example, '//summit/bridge/xxxxxxxxx' where
   * 'xxxxxxxxx' is the serial number of the bridge.
   */
  string name = 1; 
}

message DescribeBridgeResponse {
  /**
   * Scheme-less URI describing the bridge resource.
   * For example, '//summit/bridge/xxxxxxxxx' where
   * 'xxxxxxxxx' is the serial number of the bridge.
   */
  string name = 1;  

  /**
   * Additional platform specific bridge information. These are defined in a separate
   * protobuf files, one per device manufacturer.
   */
  Bridge details = 2;

  /**
   * Additional platform specific error details. These are defined in a separate
   * protobuf files, one per manufacturer.
   */
  google.protobuf.Any error = 3;
}

message DisconnectBridgeRequest {
  /**
   * Scheme-less URI describing the bridge resource.
   * For example, '//summit/bridge/xxxxxxxxx' where
   * 'xxxxxxxxx' is the serial number of the bridge.
   */
  string name = 1;
}
